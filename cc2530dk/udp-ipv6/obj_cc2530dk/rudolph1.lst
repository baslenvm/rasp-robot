                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.5 #9380 (Linux)
                                      4 ; This file was generated Wed Nov 18 02:57:30 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module rudolph1
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _trickle_send
                                     13 	.globl _trickle_close
                                     14 	.globl _trickle_open
                                     15 	.globl _ipolite_send
                                     16 	.globl _ipolite_close
                                     17 	.globl _ipolite_open
                                     18 	.globl _packetbuf_hdralloc
                                     19 	.globl _packetbuf_set_datalen
                                     20 	.globl _packetbuf_hdrptr
                                     21 	.globl _packetbuf_dataptr
                                     22 	.globl _packetbuf_clear
                                     23 	.globl _ctimer_stop
                                     24 	.globl _ctimer_set
                                     25 	.globl _ACTIVE
                                     26 	.globl _TX_BYTE
                                     27 	.globl _RX_BYTE
                                     28 	.globl _ERR
                                     29 	.globl _FE
                                     30 	.globl _SLAVE
                                     31 	.globl _RE
                                     32 	.globl _MODE
                                     33 	.globl _T3OVFIF
                                     34 	.globl _T3CH0IF
                                     35 	.globl _T3CH1IF
                                     36 	.globl _T4OVFIF
                                     37 	.globl _T4CH0IF
                                     38 	.globl _T4CH1IF
                                     39 	.globl _OVFIM
                                     40 	.globl _B_0
                                     41 	.globl _B_1
                                     42 	.globl _B_2
                                     43 	.globl _B_3
                                     44 	.globl _B_4
                                     45 	.globl _B_5
                                     46 	.globl _B_6
                                     47 	.globl _B_7
                                     48 	.globl _P2IF
                                     49 	.globl _UTX0IF
                                     50 	.globl _UTX1IF
                                     51 	.globl _P1IF
                                     52 	.globl _WDTIF
                                     53 	.globl _ACC_0
                                     54 	.globl _ACC_1
                                     55 	.globl _ACC_2
                                     56 	.globl _ACC_3
                                     57 	.globl _ACC_4
                                     58 	.globl _ACC_5
                                     59 	.globl _ACC_6
                                     60 	.globl _ACC_7
                                     61 	.globl _P
                                     62 	.globl _F1
                                     63 	.globl _OV
                                     64 	.globl _RS0
                                     65 	.globl _RS1
                                     66 	.globl _F0
                                     67 	.globl _AC
                                     68 	.globl _CY
                                     69 	.globl _DMAIF
                                     70 	.globl _T1IF
                                     71 	.globl _T2IF
                                     72 	.globl _T3IF
                                     73 	.globl _T4IF
                                     74 	.globl _P0IF
                                     75 	.globl _STIF
                                     76 	.globl _DMAIE
                                     77 	.globl _T1IE
                                     78 	.globl _T2IE
                                     79 	.globl _T3IE
                                     80 	.globl _T4IE
                                     81 	.globl _P0IE
                                     82 	.globl _RFERRIE
                                     83 	.globl _ADCIE
                                     84 	.globl _URX0IE
                                     85 	.globl _URX1IE
                                     86 	.globl _ENCIE
                                     87 	.globl _STIE
                                     88 	.globl _EA
                                     89 	.globl _P2_0
                                     90 	.globl _P2_1
                                     91 	.globl _P2_2
                                     92 	.globl _P2_3
                                     93 	.globl _P2_4
                                     94 	.globl _P2_5
                                     95 	.globl _P2_6
                                     96 	.globl _P2_7
                                     97 	.globl _ENCIF_0
                                     98 	.globl _ENCIF_1
                                     99 	.globl _P1_0
                                    100 	.globl _P1_1
                                    101 	.globl _P1_2
                                    102 	.globl _P1_3
                                    103 	.globl _P1_4
                                    104 	.globl _P1_5
                                    105 	.globl _P1_6
                                    106 	.globl _P1_7
                                    107 	.globl _IT0
                                    108 	.globl _RFERRIF
                                    109 	.globl _IT1
                                    110 	.globl _URX0IF
                                    111 	.globl _ADCIF
                                    112 	.globl _URX1IF
                                    113 	.globl _P0_0
                                    114 	.globl _P0_1
                                    115 	.globl _P0_2
                                    116 	.globl _P0_3
                                    117 	.globl _P0_4
                                    118 	.globl _P0_5
                                    119 	.globl _P0_6
                                    120 	.globl _P0_7
                                    121 	.globl _WDCTL
                                    122 	.globl _U1GCR
                                    123 	.globl _U1UCR
                                    124 	.globl _U1BAUD
                                    125 	.globl _U1DBUF
                                    126 	.globl _U1CSR
                                    127 	.globl _U0GCR
                                    128 	.globl _U0UCR
                                    129 	.globl _U0BAUD
                                    130 	.globl _U0DBUF
                                    131 	.globl _U0CSR
                                    132 	.globl _TIMIF
                                    133 	.globl _T4CC1
                                    134 	.globl _T4CCTL1
                                    135 	.globl _T4CC0
                                    136 	.globl _T4CCTL0
                                    137 	.globl _T4CTL
                                    138 	.globl _T4CNT
                                    139 	.globl _T3CC1
                                    140 	.globl _T3CCTL1
                                    141 	.globl _T3CC0
                                    142 	.globl _T3CCTL0
                                    143 	.globl _T3CTL
                                    144 	.globl _T3CNT
                                    145 	.globl _T2MSEL
                                    146 	.globl _T2IRQM
                                    147 	.globl _T2MOVF2
                                    148 	.globl _T2MOVF1
                                    149 	.globl _T2MOVF0
                                    150 	.globl _T2M1
                                    151 	.globl _T2M0
                                    152 	.globl _T2IRQF
                                    153 	.globl _T2EVTCFG
                                    154 	.globl _T2CTRL
                                    155 	.globl _T1STAT
                                    156 	.globl _T1CCTL2
                                    157 	.globl _T1CCTL1
                                    158 	.globl _T1CCTL0
                                    159 	.globl _T1CTL
                                    160 	.globl _T1CNTH
                                    161 	.globl _T1CNTL
                                    162 	.globl _T1CC2H
                                    163 	.globl _T1CC2L
                                    164 	.globl _T1CC1H
                                    165 	.globl _T1CC1L
                                    166 	.globl _T1CC0H
                                    167 	.globl _T1CC0L
                                    168 	.globl _CLKCONSTA
                                    169 	.globl _CLKCONCMD
                                    170 	.globl _SLEEPSTA
                                    171 	.globl _SLEEPCMD
                                    172 	.globl _STLOAD
                                    173 	.globl _ST2
                                    174 	.globl _ST1
                                    175 	.globl _ST0
                                    176 	.globl _RFERRF
                                    177 	.globl _RFIRQF0
                                    178 	.globl _RFST
                                    179 	.globl _RFD
                                    180 	.globl _RFIRQF1
                                    181 	.globl _PSBANK
                                    182 	.globl _FMAP
                                    183 	.globl _MEMCTR
                                    184 	.globl __XPAGE
                                    185 	.globl _MPAGE
                                    186 	.globl _PMUX
                                    187 	.globl _P2DIR
                                    188 	.globl _P1DIR
                                    189 	.globl _P0DIR
                                    190 	.globl _P2INP
                                    191 	.globl _P1INP
                                    192 	.globl _P2SEL
                                    193 	.globl _P1SEL
                                    194 	.globl _P0SEL
                                    195 	.globl _APCFG
                                    196 	.globl _PERCFG
                                    197 	.globl _P0INP
                                    198 	.globl _P2IEN
                                    199 	.globl _P1IEN
                                    200 	.globl _P0IEN
                                    201 	.globl _PICTL
                                    202 	.globl _P2IFG
                                    203 	.globl _P1IFG
                                    204 	.globl _P0IFG
                                    205 	.globl _DMAREQ
                                    206 	.globl _DMAARM
                                    207 	.globl _DMA0CFGH
                                    208 	.globl _DMA0CFGL
                                    209 	.globl _DMA1CFGH
                                    210 	.globl _DMA1CFGL
                                    211 	.globl _DMAIRQ
                                    212 	.globl _ENCCS
                                    213 	.globl _ENCDO
                                    214 	.globl _ENCDI
                                    215 	.globl _RNDH
                                    216 	.globl _RNDL
                                    217 	.globl _ADCH
                                    218 	.globl _ADCL
                                    219 	.globl _ADCCON3
                                    220 	.globl _ADCCON2
                                    221 	.globl _ADCCON1
                                    222 	.globl _B
                                    223 	.globl _IRCON2
                                    224 	.globl _ACC
                                    225 	.globl _PSW
                                    226 	.globl _IRCON
                                    227 	.globl _IP1
                                    228 	.globl _IEN1
                                    229 	.globl _IP0
                                    230 	.globl _IEN0
                                    231 	.globl _P2
                                    232 	.globl _S1CON
                                    233 	.globl _IEN2
                                    234 	.globl _S0CON
                                    235 	.globl _DPS
                                    236 	.globl _P1
                                    237 	.globl _TCON
                                    238 	.globl _PCON
                                    239 	.globl _DPH1
                                    240 	.globl _DPL1
                                    241 	.globl _DPH0
                                    242 	.globl _DPL0
                                    243 	.globl _SP
                                    244 	.globl _P0
                                    245 	.globl _X_IEEE_ADDR
                                    246 	.globl _X_INFOPAGE
                                    247 	.globl _X_P2DIR
                                    248 	.globl _X_P1DIR
                                    249 	.globl _X_P0DIR
                                    250 	.globl _X_U1GCR
                                    251 	.globl _X_U1UCR
                                    252 	.globl _X_U1BAUD
                                    253 	.globl _X_U1DBUF
                                    254 	.globl _X_U1CSR
                                    255 	.globl _X_P2INP
                                    256 	.globl _X_P1INP
                                    257 	.globl _X_P2SEL
                                    258 	.globl _X_P1SEL
                                    259 	.globl _X_P0SEL
                                    260 	.globl _X_APCFG
                                    261 	.globl _X_PERCFG
                                    262 	.globl _X_T4CC1
                                    263 	.globl _X_T4CCTL1
                                    264 	.globl _X_T4CC0
                                    265 	.globl _X_T4CCTL0
                                    266 	.globl _X_T4CTL
                                    267 	.globl _X_T4CNT
                                    268 	.globl _X_RFIRQF0
                                    269 	.globl _X_T1CCTL2
                                    270 	.globl _X_T1CCTL1
                                    271 	.globl _X_T1CCTL0
                                    272 	.globl _X_T1CTL
                                    273 	.globl _X_T1CNTH
                                    274 	.globl _X_T1CNTL
                                    275 	.globl _X_RFST
                                    276 	.globl _X_T1CC2H
                                    277 	.globl _X_T1CC2L
                                    278 	.globl _X_T1CC1H
                                    279 	.globl _X_T1CC1L
                                    280 	.globl _X_T1CC0H
                                    281 	.globl _X_T1CC0L
                                    282 	.globl _X_RFD
                                    283 	.globl _X_TIMIF
                                    284 	.globl _X_DMAREQ
                                    285 	.globl _X_DMAARM
                                    286 	.globl _X_DMA0CFGH
                                    287 	.globl _X_DMA0CFGL
                                    288 	.globl _X_DMA1CFGH
                                    289 	.globl _X_DMA1CFGL
                                    290 	.globl _X_DMAIRQ
                                    291 	.globl _X_T3CC1
                                    292 	.globl _X_T3CCTL1
                                    293 	.globl _X_T3CC0
                                    294 	.globl _X_T3CCTL0
                                    295 	.globl _X_T3CTL
                                    296 	.globl _X_T3CNT
                                    297 	.globl _X_WDCTL
                                    298 	.globl _X_MEMCTR
                                    299 	.globl _X_CLKCONCMD
                                    300 	.globl _X_U0GCR
                                    301 	.globl _X_U0UCR
                                    302 	.globl _X_T2MSEL
                                    303 	.globl _X_U0BAUD
                                    304 	.globl _X_U0DBUF
                                    305 	.globl _X_RFERRF
                                    306 	.globl _X_SLEEPCMD
                                    307 	.globl _X_RNDH
                                    308 	.globl _X_RNDL
                                    309 	.globl _X_ADCH
                                    310 	.globl _X_ADCL
                                    311 	.globl _X_ADCCON3
                                    312 	.globl _X_ADCCON2
                                    313 	.globl _X_ADCCON1
                                    314 	.globl _X_ENCCS
                                    315 	.globl _X_ENCDO
                                    316 	.globl _X_ENCDI
                                    317 	.globl _X_T1STAT
                                    318 	.globl _X_PMUX
                                    319 	.globl _X_STLOAD
                                    320 	.globl _X_P2IEN
                                    321 	.globl _X_P0IEN
                                    322 	.globl _X_T2IRQM
                                    323 	.globl _X_T2MOVF2
                                    324 	.globl _X_T2MOVF1
                                    325 	.globl _X_T2MOVF0
                                    326 	.globl _X_T2M1
                                    327 	.globl _X_T2M0
                                    328 	.globl _X_T2IRQF
                                    329 	.globl _X_P2
                                    330 	.globl _X_PSBANK
                                    331 	.globl _X_FMAP
                                    332 	.globl _X_CLKCONSTA
                                    333 	.globl _X_SLEEPSTA
                                    334 	.globl _X_T2EVTCFG
                                    335 	.globl _X_ST2
                                    336 	.globl _X_ST1
                                    337 	.globl _X_ST0
                                    338 	.globl _X_T2CTRL
                                    339 	.globl _X__XPAGE
                                    340 	.globl _X_MPAGE
                                    341 	.globl _X_RFIRQF1
                                    342 	.globl _X_P1
                                    343 	.globl _X_P0INP
                                    344 	.globl _X_P1IEN
                                    345 	.globl _X_PICTL
                                    346 	.globl _X_P2IFG
                                    347 	.globl _X_P1IFG
                                    348 	.globl _X_P0IFG
                                    349 	.globl _X_U0CSR
                                    350 	.globl _X_P0
                                    351 	.globl _USBF5
                                    352 	.globl _USBF4
                                    353 	.globl _USBF3
                                    354 	.globl _USBF2
                                    355 	.globl _USBF1
                                    356 	.globl _USBF0
                                    357 	.globl _USBCNTH
                                    358 	.globl _USBCNTL
                                    359 	.globl _USBCNT0
                                    360 	.globl _USBCSOH
                                    361 	.globl _USBCSOL
                                    362 	.globl _USBMAXO
                                    363 	.globl _USBCSIH
                                    364 	.globl _USBCSIL
                                    365 	.globl _USBCS0
                                    366 	.globl _USBMAXI
                                    367 	.globl _USBCTRL
                                    368 	.globl _USBINDEX
                                    369 	.globl _USBFRMH
                                    370 	.globl _USBFRML
                                    371 	.globl _USBCIE
                                    372 	.globl _USBOIE
                                    373 	.globl _USBIIE
                                    374 	.globl _USBCIF
                                    375 	.globl _USBOIF
                                    376 	.globl _USBIIF
                                    377 	.globl _USBPOW
                                    378 	.globl _USBADDR
                                    379 	.globl _CSPT
                                    380 	.globl _CSPZ
                                    381 	.globl _CSPY
                                    382 	.globl _CSPX
                                    383 	.globl _CSPSTAT
                                    384 	.globl _CSPCTRL
                                    385 	.globl _CSPPROG23
                                    386 	.globl _CSPPROG22
                                    387 	.globl _CSPPROG21
                                    388 	.globl _CSPPROG20
                                    389 	.globl _CSPPROG19
                                    390 	.globl _CSPPROG18
                                    391 	.globl _CSPPROG17
                                    392 	.globl _CSPPROG16
                                    393 	.globl _CSPPROG15
                                    394 	.globl _CSPPROG14
                                    395 	.globl _CSPPROG13
                                    396 	.globl _CSPPROG12
                                    397 	.globl _CSPPROG11
                                    398 	.globl _CSPPROG10
                                    399 	.globl _CSPPROG9
                                    400 	.globl _CSPPROG8
                                    401 	.globl _CSPPROG7
                                    402 	.globl _CSPPROG6
                                    403 	.globl _CSPPROG5
                                    404 	.globl _CSPPROG4
                                    405 	.globl _CSPPROG3
                                    406 	.globl _CSPPROG2
                                    407 	.globl _CSPPROG1
                                    408 	.globl _CSPPROG0
                                    409 	.globl _RFC_OBS_CTRL2
                                    410 	.globl _RFC_OBS_CTRL1
                                    411 	.globl _RFC_OBS_CTRL0
                                    412 	.globl _TXFILTCFG
                                    413 	.globl _PTEST1
                                    414 	.globl _PTEST0
                                    415 	.globl _ATEST
                                    416 	.globl _DACTEST2
                                    417 	.globl _DACTEST1
                                    418 	.globl _DACTEST0
                                    419 	.globl _MDMTEST1
                                    420 	.globl _MDMTEST0
                                    421 	.globl _ADCTEST2
                                    422 	.globl _ADCTEST1
                                    423 	.globl _ADCTEST0
                                    424 	.globl _AGCCTRL3
                                    425 	.globl _AGCCTRL2
                                    426 	.globl _AGCCTRL1
                                    427 	.globl _AGCCTRL0
                                    428 	.globl _FSCAL3
                                    429 	.globl _FSCAL2
                                    430 	.globl _FSCAL1
                                    431 	.globl _FSCAL0
                                    432 	.globl _FSCTRL
                                    433 	.globl _RXCTRL
                                    434 	.globl _FREQEST
                                    435 	.globl _MDMCTRL1
                                    436 	.globl _MDMCTRL0
                                    437 	.globl _RFRND
                                    438 	.globl _RFERRM
                                    439 	.globl _RFIRQM1
                                    440 	.globl _RFIRQM0
                                    441 	.globl _TXLAST_PTR
                                    442 	.globl _TXFIRST_PTR
                                    443 	.globl _RXP1_PTR
                                    444 	.globl _RXLAST_PTR
                                    445 	.globl _RXFIRST_PTR
                                    446 	.globl _TXFIFOCNT
                                    447 	.globl _RXFIFOCNT
                                    448 	.globl _RXFIRST
                                    449 	.globl _RSSISTAT
                                    450 	.globl _RSSI
                                    451 	.globl _CCACTRL1
                                    452 	.globl _CCACTRL0
                                    453 	.globl _FSMCTRL
                                    454 	.globl _FIFOPCTRL
                                    455 	.globl _FSMSTAT1
                                    456 	.globl _FSMSTAT0
                                    457 	.globl _TXCTRL
                                    458 	.globl _TXPOWER
                                    459 	.globl _FREQCTRL
                                    460 	.globl _FREQTUNE
                                    461 	.globl _RXMASKCLR
                                    462 	.globl _RXMASKSET
                                    463 	.globl _RXENABLE
                                    464 	.globl _FRMCTRL1
                                    465 	.globl _FRMCTRL0
                                    466 	.globl _SRCEXTEN2
                                    467 	.globl _SRCEXTEN1
                                    468 	.globl _SRCEXTEN0
                                    469 	.globl _SRCSHORTEN2
                                    470 	.globl _SRCSHORTEN1
                                    471 	.globl _SRCSHORTEN0
                                    472 	.globl _SRCMATCH
                                    473 	.globl _FRMFILT1
                                    474 	.globl _FRMFILT0
                                    475 	.globl _SHORT_ADDR1
                                    476 	.globl _SHORT_ADDR0
                                    477 	.globl _PAN_ID1
                                    478 	.globl _PAN_ID0
                                    479 	.globl _EXT_ADDR7
                                    480 	.globl _EXT_ADDR6
                                    481 	.globl _EXT_ADDR5
                                    482 	.globl _EXT_ADDR4
                                    483 	.globl _EXT_ADDR3
                                    484 	.globl _EXT_ADDR2
                                    485 	.globl _EXT_ADDR1
                                    486 	.globl _EXT_ADDR0
                                    487 	.globl _SRCSHORTPENDEN2
                                    488 	.globl _SRCSHORTPENDEN1
                                    489 	.globl _SRCSHORTPENDEN0
                                    490 	.globl _SRCEXTPENDEN2
                                    491 	.globl _SRCEXTPENDEN1
                                    492 	.globl _SRCEXTPENDEN0
                                    493 	.globl _SRCRESINDEX
                                    494 	.globl _SRCRESMASK2
                                    495 	.globl _SRCRESMASK1
                                    496 	.globl _SRCRESMASK0
                                    497 	.globl _SRC_ADDR_TABLE
                                    498 	.globl _TXFIFO
                                    499 	.globl _RXFIFO
                                    500 	.globl _RFCORE_RAM
                                    501 	.globl _CMPCTL
                                    502 	.globl _OPAMPS
                                    503 	.globl _OPAMPC
                                    504 	.globl _STCV2
                                    505 	.globl _STCV1
                                    506 	.globl _STCV0
                                    507 	.globl _STCS
                                    508 	.globl _STCC
                                    509 	.globl _T1CC4H
                                    510 	.globl _T1CC4L
                                    511 	.globl _T1CC3H
                                    512 	.globl _T1CC3L
                                    513 	.globl _XX_T1CC2H
                                    514 	.globl _XX_T1CC2L
                                    515 	.globl _XX_T1CC1H
                                    516 	.globl _XX_T1CC1L
                                    517 	.globl _XX_T1CC0H
                                    518 	.globl _XX_T1CC0L
                                    519 	.globl _T1CCTL4
                                    520 	.globl _T1CCTL3
                                    521 	.globl _XX_T1CCTL2
                                    522 	.globl _XX_T1CCTL1
                                    523 	.globl _XX_T1CCTL0
                                    524 	.globl _CLD
                                    525 	.globl _IRCTL
                                    526 	.globl _CHIPINFO1
                                    527 	.globl _CHIPINFO0
                                    528 	.globl _FWDATA
                                    529 	.globl _FADDRH
                                    530 	.globl _FADDRL
                                    531 	.globl _FCTL
                                    532 	.globl _IVCTRL
                                    533 	.globl _BATTMON
                                    534 	.globl _SRCRC
                                    535 	.globl _DBGDATA
                                    536 	.globl _TESTREG0
                                    537 	.globl _CHIPID
                                    538 	.globl _CHVER
                                    539 	.globl _OBSSEL5
                                    540 	.globl _OBSSEL4
                                    541 	.globl _OBSSEL3
                                    542 	.globl _OBSSEL2
                                    543 	.globl _OBSSEL1
                                    544 	.globl _OBSSEL0
                                    545 	.globl _I2CIO
                                    546 	.globl _I2CWC
                                    547 	.globl _I2CADDR
                                    548 	.globl _I2CDATA
                                    549 	.globl _I2CSTAT
                                    550 	.globl _I2CCFG
                                    551 	.globl _OPAMPMC
                                    552 	.globl _MONMUX
                                    553 	.globl _rudolph1_open
                                    554 	.globl _rudolph1_close
                                    555 	.globl _rudolph1_send
                                    556 	.globl _rudolph1_stop
                                    557 ;--------------------------------------------------------
                                    558 ; special function registers
                                    559 ;--------------------------------------------------------
                                    560 	.area RSEG    (ABS,DATA)
      000000                        561 	.org 0x0000
                           000080   562 _P0	=	0x0080
                           000081   563 _SP	=	0x0081
                           000082   564 _DPL0	=	0x0082
                           000083   565 _DPH0	=	0x0083
                           000084   566 _DPL1	=	0x0084
                           000085   567 _DPH1	=	0x0085
                           000087   568 _PCON	=	0x0087
                           000088   569 _TCON	=	0x0088
                           000090   570 _P1	=	0x0090
                           000092   571 _DPS	=	0x0092
                           000098   572 _S0CON	=	0x0098
                           00009A   573 _IEN2	=	0x009a
                           00009B   574 _S1CON	=	0x009b
                           0000A0   575 _P2	=	0x00a0
                           0000A8   576 _IEN0	=	0x00a8
                           0000A9   577 _IP0	=	0x00a9
                           0000B8   578 _IEN1	=	0x00b8
                           0000B9   579 _IP1	=	0x00b9
                           0000C0   580 _IRCON	=	0x00c0
                           0000D0   581 _PSW	=	0x00d0
                           0000E0   582 _ACC	=	0x00e0
                           0000E8   583 _IRCON2	=	0x00e8
                           0000F0   584 _B	=	0x00f0
                           0000B4   585 _ADCCON1	=	0x00b4
                           0000B5   586 _ADCCON2	=	0x00b5
                           0000B6   587 _ADCCON3	=	0x00b6
                           0000BA   588 _ADCL	=	0x00ba
                           0000BB   589 _ADCH	=	0x00bb
                           0000BC   590 _RNDL	=	0x00bc
                           0000BD   591 _RNDH	=	0x00bd
                           0000B1   592 _ENCDI	=	0x00b1
                           0000B2   593 _ENCDO	=	0x00b2
                           0000B3   594 _ENCCS	=	0x00b3
                           0000D1   595 _DMAIRQ	=	0x00d1
                           0000D2   596 _DMA1CFGL	=	0x00d2
                           0000D3   597 _DMA1CFGH	=	0x00d3
                           0000D4   598 _DMA0CFGL	=	0x00d4
                           0000D5   599 _DMA0CFGH	=	0x00d5
                           0000D6   600 _DMAARM	=	0x00d6
                           0000D7   601 _DMAREQ	=	0x00d7
                           000089   602 _P0IFG	=	0x0089
                           00008A   603 _P1IFG	=	0x008a
                           00008B   604 _P2IFG	=	0x008b
                           00008C   605 _PICTL	=	0x008c
                           0000AB   606 _P0IEN	=	0x00ab
                           00008D   607 _P1IEN	=	0x008d
                           0000AC   608 _P2IEN	=	0x00ac
                           00008F   609 _P0INP	=	0x008f
                           0000F1   610 _PERCFG	=	0x00f1
                           0000F2   611 _APCFG	=	0x00f2
                           0000F3   612 _P0SEL	=	0x00f3
                           0000F4   613 _P1SEL	=	0x00f4
                           0000F5   614 _P2SEL	=	0x00f5
                           0000F6   615 _P1INP	=	0x00f6
                           0000F7   616 _P2INP	=	0x00f7
                           0000FD   617 _P0DIR	=	0x00fd
                           0000FE   618 _P1DIR	=	0x00fe
                           0000FF   619 _P2DIR	=	0x00ff
                           0000AE   620 _PMUX	=	0x00ae
                           000093   621 _MPAGE	=	0x0093
                           000093   622 __XPAGE	=	0x0093
                           0000C7   623 _MEMCTR	=	0x00c7
                           00009F   624 _FMAP	=	0x009f
                           00009F   625 _PSBANK	=	0x009f
                           000091   626 _RFIRQF1	=	0x0091
                           0000D9   627 _RFD	=	0x00d9
                           0000E1   628 _RFST	=	0x00e1
                           0000E9   629 _RFIRQF0	=	0x00e9
                           0000BF   630 _RFERRF	=	0x00bf
                           000095   631 _ST0	=	0x0095
                           000096   632 _ST1	=	0x0096
                           000097   633 _ST2	=	0x0097
                           0000AD   634 _STLOAD	=	0x00ad
                           0000BE   635 _SLEEPCMD	=	0x00be
                           00009D   636 _SLEEPSTA	=	0x009d
                           0000C6   637 _CLKCONCMD	=	0x00c6
                           00009E   638 _CLKCONSTA	=	0x009e
                           0000DA   639 _T1CC0L	=	0x00da
                           0000DB   640 _T1CC0H	=	0x00db
                           0000DC   641 _T1CC1L	=	0x00dc
                           0000DD   642 _T1CC1H	=	0x00dd
                           0000DE   643 _T1CC2L	=	0x00de
                           0000DF   644 _T1CC2H	=	0x00df
                           0000E2   645 _T1CNTL	=	0x00e2
                           0000E3   646 _T1CNTH	=	0x00e3
                           0000E4   647 _T1CTL	=	0x00e4
                           0000E5   648 _T1CCTL0	=	0x00e5
                           0000E6   649 _T1CCTL1	=	0x00e6
                           0000E7   650 _T1CCTL2	=	0x00e7
                           0000AF   651 _T1STAT	=	0x00af
                           000094   652 _T2CTRL	=	0x0094
                           00009C   653 _T2EVTCFG	=	0x009c
                           0000A1   654 _T2IRQF	=	0x00a1
                           0000A2   655 _T2M0	=	0x00a2
                           0000A3   656 _T2M1	=	0x00a3
                           0000A4   657 _T2MOVF0	=	0x00a4
                           0000A5   658 _T2MOVF1	=	0x00a5
                           0000A6   659 _T2MOVF2	=	0x00a6
                           0000A7   660 _T2IRQM	=	0x00a7
                           0000C3   661 _T2MSEL	=	0x00c3
                           0000CA   662 _T3CNT	=	0x00ca
                           0000CB   663 _T3CTL	=	0x00cb
                           0000CC   664 _T3CCTL0	=	0x00cc
                           0000CD   665 _T3CC0	=	0x00cd
                           0000CE   666 _T3CCTL1	=	0x00ce
                           0000CF   667 _T3CC1	=	0x00cf
                           0000EA   668 _T4CNT	=	0x00ea
                           0000EB   669 _T4CTL	=	0x00eb
                           0000EC   670 _T4CCTL0	=	0x00ec
                           0000ED   671 _T4CC0	=	0x00ed
                           0000EE   672 _T4CCTL1	=	0x00ee
                           0000EF   673 _T4CC1	=	0x00ef
                           0000D8   674 _TIMIF	=	0x00d8
                           000086   675 _U0CSR	=	0x0086
                           0000C1   676 _U0DBUF	=	0x00c1
                           0000C2   677 _U0BAUD	=	0x00c2
                           0000C4   678 _U0UCR	=	0x00c4
                           0000C5   679 _U0GCR	=	0x00c5
                           0000F8   680 _U1CSR	=	0x00f8
                           0000F9   681 _U1DBUF	=	0x00f9
                           0000FA   682 _U1BAUD	=	0x00fa
                           0000FB   683 _U1UCR	=	0x00fb
                           0000FC   684 _U1GCR	=	0x00fc
                           0000C9   685 _WDCTL	=	0x00c9
                                    686 ;--------------------------------------------------------
                                    687 ; special function bits
                                    688 ;--------------------------------------------------------
                                    689 	.area RSEG    (ABS,DATA)
      000000                        690 	.org 0x0000
                           000087   691 _P0_7	=	0x0087
                           000086   692 _P0_6	=	0x0086
                           000085   693 _P0_5	=	0x0085
                           000084   694 _P0_4	=	0x0084
                           000083   695 _P0_3	=	0x0083
                           000082   696 _P0_2	=	0x0082
                           000081   697 _P0_1	=	0x0081
                           000080   698 _P0_0	=	0x0080
                           00008F   699 _URX1IF	=	0x008f
                           00008D   700 _ADCIF	=	0x008d
                           00008B   701 _URX0IF	=	0x008b
                           00008A   702 _IT1	=	0x008a
                           000089   703 _RFERRIF	=	0x0089
                           000088   704 _IT0	=	0x0088
                           000097   705 _P1_7	=	0x0097
                           000096   706 _P1_6	=	0x0096
                           000095   707 _P1_5	=	0x0095
                           000094   708 _P1_4	=	0x0094
                           000093   709 _P1_3	=	0x0093
                           000092   710 _P1_2	=	0x0092
                           000091   711 _P1_1	=	0x0091
                           000090   712 _P1_0	=	0x0090
                           000099   713 _ENCIF_1	=	0x0099
                           000098   714 _ENCIF_0	=	0x0098
                           0000A7   715 _P2_7	=	0x00a7
                           0000A6   716 _P2_6	=	0x00a6
                           0000A5   717 _P2_5	=	0x00a5
                           0000A4   718 _P2_4	=	0x00a4
                           0000A3   719 _P2_3	=	0x00a3
                           0000A2   720 _P2_2	=	0x00a2
                           0000A1   721 _P2_1	=	0x00a1
                           0000A0   722 _P2_0	=	0x00a0
                           0000AF   723 _EA	=	0x00af
                           0000AD   724 _STIE	=	0x00ad
                           0000AC   725 _ENCIE	=	0x00ac
                           0000AB   726 _URX1IE	=	0x00ab
                           0000AA   727 _URX0IE	=	0x00aa
                           0000A9   728 _ADCIE	=	0x00a9
                           0000A8   729 _RFERRIE	=	0x00a8
                           0000BD   730 _P0IE	=	0x00bd
                           0000BC   731 _T4IE	=	0x00bc
                           0000BB   732 _T3IE	=	0x00bb
                           0000BA   733 _T2IE	=	0x00ba
                           0000B9   734 _T1IE	=	0x00b9
                           0000B8   735 _DMAIE	=	0x00b8
                           0000C7   736 _STIF	=	0x00c7
                           0000C5   737 _P0IF	=	0x00c5
                           0000C4   738 _T4IF	=	0x00c4
                           0000C3   739 _T3IF	=	0x00c3
                           0000C2   740 _T2IF	=	0x00c2
                           0000C1   741 _T1IF	=	0x00c1
                           0000C0   742 _DMAIF	=	0x00c0
                           0000D7   743 _CY	=	0x00d7
                           0000D6   744 _AC	=	0x00d6
                           0000D5   745 _F0	=	0x00d5
                           0000D4   746 _RS1	=	0x00d4
                           0000D3   747 _RS0	=	0x00d3
                           0000D2   748 _OV	=	0x00d2
                           0000D1   749 _F1	=	0x00d1
                           0000D0   750 _P	=	0x00d0
                           0000E7   751 _ACC_7	=	0x00e7
                           0000E6   752 _ACC_6	=	0x00e6
                           0000E5   753 _ACC_5	=	0x00e5
                           0000E4   754 _ACC_4	=	0x00e4
                           0000E3   755 _ACC_3	=	0x00e3
                           0000E2   756 _ACC_2	=	0x00e2
                           0000E1   757 _ACC_1	=	0x00e1
                           0000E0   758 _ACC_0	=	0x00e0
                           0000EC   759 _WDTIF	=	0x00ec
                           0000EB   760 _P1IF	=	0x00eb
                           0000EA   761 _UTX1IF	=	0x00ea
                           0000E9   762 _UTX0IF	=	0x00e9
                           0000E8   763 _P2IF	=	0x00e8
                           0000F7   764 _B_7	=	0x00f7
                           0000F6   765 _B_6	=	0x00f6
                           0000F5   766 _B_5	=	0x00f5
                           0000F4   767 _B_4	=	0x00f4
                           0000F3   768 _B_3	=	0x00f3
                           0000F2   769 _B_2	=	0x00f2
                           0000F1   770 _B_1	=	0x00f1
                           0000F0   771 _B_0	=	0x00f0
                           0000DE   772 _OVFIM	=	0x00de
                           0000DD   773 _T4CH1IF	=	0x00dd
                           0000DC   774 _T4CH0IF	=	0x00dc
                           0000DB   775 _T4OVFIF	=	0x00db
                           0000DA   776 _T3CH1IF	=	0x00da
                           0000D9   777 _T3CH0IF	=	0x00d9
                           0000D8   778 _T3OVFIF	=	0x00d8
                           0000FF   779 _MODE	=	0x00ff
                           0000FE   780 _RE	=	0x00fe
                           0000FD   781 _SLAVE	=	0x00fd
                           0000FC   782 _FE	=	0x00fc
                           0000FB   783 _ERR	=	0x00fb
                           0000FA   784 _RX_BYTE	=	0x00fa
                           0000F9   785 _TX_BYTE	=	0x00f9
                           0000F8   786 _ACTIVE	=	0x00f8
                                    787 ;--------------------------------------------------------
                                    788 ; overlayable register banks
                                    789 ;--------------------------------------------------------
                                    790 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        791 	.ds 8
                                    792 ;--------------------------------------------------------
                                    793 ; internal ram data
                                    794 ;--------------------------------------------------------
                                    795 	.area DSEG    (DATA)
                                    796 ;--------------------------------------------------------
                                    797 ; overlayable items in internal ram 
                                    798 ;--------------------------------------------------------
                                    799 ;--------------------------------------------------------
                                    800 ; indirectly addressable internal ram data
                                    801 ;--------------------------------------------------------
                                    802 	.area ISEG    (DATA)
                                    803 ;--------------------------------------------------------
                                    804 ; absolute internal ram data
                                    805 ;--------------------------------------------------------
                                    806 	.area IABS    (ABS,DATA)
                                    807 	.area IABS    (ABS,DATA)
                                    808 ;--------------------------------------------------------
                                    809 ; bit data
                                    810 ;--------------------------------------------------------
                                    811 	.area BSEG    (BIT)
                                    812 ;--------------------------------------------------------
                                    813 ; paged external ram data
                                    814 ;--------------------------------------------------------
                                    815 	.area PSEG    (PAG,XDATA)
                                    816 ;--------------------------------------------------------
                                    817 ; external ram data
                                    818 ;--------------------------------------------------------
                                    819 	.area XSEG    (XDATA)
                           0061A6   820 _MONMUX	=	0x61a6
                           0061A6   821 _OPAMPMC	=	0x61a6
                           006230   822 _I2CCFG	=	0x6230
                           006231   823 _I2CSTAT	=	0x6231
                           006232   824 _I2CDATA	=	0x6232
                           006233   825 _I2CADDR	=	0x6233
                           006234   826 _I2CWC	=	0x6234
                           006235   827 _I2CIO	=	0x6235
                           006243   828 _OBSSEL0	=	0x6243
                           006244   829 _OBSSEL1	=	0x6244
                           006245   830 _OBSSEL2	=	0x6245
                           006246   831 _OBSSEL3	=	0x6246
                           006247   832 _OBSSEL4	=	0x6247
                           006248   833 _OBSSEL5	=	0x6248
                           006249   834 _CHVER	=	0x6249
                           00624A   835 _CHIPID	=	0x624a
                           00624B   836 _TESTREG0	=	0x624b
                           006260   837 _DBGDATA	=	0x6260
                           006262   838 _SRCRC	=	0x6262
                           006264   839 _BATTMON	=	0x6264
                           006265   840 _IVCTRL	=	0x6265
                           006270   841 _FCTL	=	0x6270
                           006271   842 _FADDRL	=	0x6271
                           006272   843 _FADDRH	=	0x6272
                           006273   844 _FWDATA	=	0x6273
                           006276   845 _CHIPINFO0	=	0x6276
                           006277   846 _CHIPINFO1	=	0x6277
                           006281   847 _IRCTL	=	0x6281
                           006290   848 _CLD	=	0x6290
                           0062A0   849 _XX_T1CCTL0	=	0x62a0
                           0062A1   850 _XX_T1CCTL1	=	0x62a1
                           0062A2   851 _XX_T1CCTL2	=	0x62a2
                           0062A3   852 _T1CCTL3	=	0x62a3
                           0062A4   853 _T1CCTL4	=	0x62a4
                           0062A6   854 _XX_T1CC0L	=	0x62a6
                           0062A7   855 _XX_T1CC0H	=	0x62a7
                           0062A8   856 _XX_T1CC1L	=	0x62a8
                           0062A9   857 _XX_T1CC1H	=	0x62a9
                           0062AA   858 _XX_T1CC2L	=	0x62aa
                           0062AB   859 _XX_T1CC2H	=	0x62ab
                           0062AC   860 _T1CC3L	=	0x62ac
                           0062AD   861 _T1CC3H	=	0x62ad
                           0062AE   862 _T1CC4L	=	0x62ae
                           0062AF   863 _T1CC4H	=	0x62af
                           0062B0   864 _STCC	=	0x62b0
                           0062B1   865 _STCS	=	0x62b1
                           0062B2   866 _STCV0	=	0x62b2
                           0062B3   867 _STCV1	=	0x62b3
                           0062B4   868 _STCV2	=	0x62b4
                           0062C0   869 _OPAMPC	=	0x62c0
                           0062C1   870 _OPAMPS	=	0x62c1
                           0062D0   871 _CMPCTL	=	0x62d0
                           006000   872 _RFCORE_RAM	=	0x6000
                           006000   873 _RXFIFO	=	0x6000
                           006080   874 _TXFIFO	=	0x6080
                           006100   875 _SRC_ADDR_TABLE	=	0x6100
                           006160   876 _SRCRESMASK0	=	0x6160
                           006161   877 _SRCRESMASK1	=	0x6161
                           006162   878 _SRCRESMASK2	=	0x6162
                           006163   879 _SRCRESINDEX	=	0x6163
                           006164   880 _SRCEXTPENDEN0	=	0x6164
                           006165   881 _SRCEXTPENDEN1	=	0x6165
                           006166   882 _SRCEXTPENDEN2	=	0x6166
                           006167   883 _SRCSHORTPENDEN0	=	0x6167
                           006168   884 _SRCSHORTPENDEN1	=	0x6168
                           006169   885 _SRCSHORTPENDEN2	=	0x6169
                           00616A   886 _EXT_ADDR0	=	0x616a
                           00616B   887 _EXT_ADDR1	=	0x616b
                           00616C   888 _EXT_ADDR2	=	0x616c
                           00616D   889 _EXT_ADDR3	=	0x616d
                           00616E   890 _EXT_ADDR4	=	0x616e
                           00616F   891 _EXT_ADDR5	=	0x616f
                           006170   892 _EXT_ADDR6	=	0x6170
                           006171   893 _EXT_ADDR7	=	0x6171
                           006172   894 _PAN_ID0	=	0x6172
                           006173   895 _PAN_ID1	=	0x6173
                           006174   896 _SHORT_ADDR0	=	0x6174
                           006175   897 _SHORT_ADDR1	=	0x6175
                           006180   898 _FRMFILT0	=	0x6180
                           006181   899 _FRMFILT1	=	0x6181
                           006182   900 _SRCMATCH	=	0x6182
                           006183   901 _SRCSHORTEN0	=	0x6183
                           006184   902 _SRCSHORTEN1	=	0x6184
                           006185   903 _SRCSHORTEN2	=	0x6185
                           006186   904 _SRCEXTEN0	=	0x6186
                           006187   905 _SRCEXTEN1	=	0x6187
                           006188   906 _SRCEXTEN2	=	0x6188
                           006189   907 _FRMCTRL0	=	0x6189
                           00618A   908 _FRMCTRL1	=	0x618a
                           00618B   909 _RXENABLE	=	0x618b
                           00618C   910 _RXMASKSET	=	0x618c
                           00618D   911 _RXMASKCLR	=	0x618d
                           00618E   912 _FREQTUNE	=	0x618e
                           00618F   913 _FREQCTRL	=	0x618f
                           006190   914 _TXPOWER	=	0x6190
                           006191   915 _TXCTRL	=	0x6191
                           006192   916 _FSMSTAT0	=	0x6192
                           006193   917 _FSMSTAT1	=	0x6193
                           006194   918 _FIFOPCTRL	=	0x6194
                           006195   919 _FSMCTRL	=	0x6195
                           006196   920 _CCACTRL0	=	0x6196
                           006197   921 _CCACTRL1	=	0x6197
                           006198   922 _RSSI	=	0x6198
                           006199   923 _RSSISTAT	=	0x6199
                           00619A   924 _RXFIRST	=	0x619a
                           00619B   925 _RXFIFOCNT	=	0x619b
                           00619C   926 _TXFIFOCNT	=	0x619c
                           00619D   927 _RXFIRST_PTR	=	0x619d
                           00619E   928 _RXLAST_PTR	=	0x619e
                           00619F   929 _RXP1_PTR	=	0x619f
                           0061A1   930 _TXFIRST_PTR	=	0x61a1
                           0061A2   931 _TXLAST_PTR	=	0x61a2
                           0061A3   932 _RFIRQM0	=	0x61a3
                           0061A4   933 _RFIRQM1	=	0x61a4
                           0061A5   934 _RFERRM	=	0x61a5
                           0061A7   935 _RFRND	=	0x61a7
                           0061A8   936 _MDMCTRL0	=	0x61a8
                           0061A9   937 _MDMCTRL1	=	0x61a9
                           0061AA   938 _FREQEST	=	0x61aa
                           0061AB   939 _RXCTRL	=	0x61ab
                           0061AC   940 _FSCTRL	=	0x61ac
                           0061AD   941 _FSCAL0	=	0x61ad
                           0061AE   942 _FSCAL1	=	0x61ae
                           0061AF   943 _FSCAL2	=	0x61af
                           0061B0   944 _FSCAL3	=	0x61b0
                           0061B1   945 _AGCCTRL0	=	0x61b1
                           0061B2   946 _AGCCTRL1	=	0x61b2
                           0061B3   947 _AGCCTRL2	=	0x61b3
                           0061B4   948 _AGCCTRL3	=	0x61b4
                           0061B5   949 _ADCTEST0	=	0x61b5
                           0061B6   950 _ADCTEST1	=	0x61b6
                           0061B7   951 _ADCTEST2	=	0x61b7
                           0061B8   952 _MDMTEST0	=	0x61b8
                           0061B9   953 _MDMTEST1	=	0x61b9
                           0061BA   954 _DACTEST0	=	0x61ba
                           0061BB   955 _DACTEST1	=	0x61bb
                           0061BC   956 _DACTEST2	=	0x61bc
                           0061BD   957 _ATEST	=	0x61bd
                           0061BE   958 _PTEST0	=	0x61be
                           0061BF   959 _PTEST1	=	0x61bf
                           0061FA   960 _TXFILTCFG	=	0x61fa
                           0061EB   961 _RFC_OBS_CTRL0	=	0x61eb
                           0061EC   962 _RFC_OBS_CTRL1	=	0x61ec
                           0061ED   963 _RFC_OBS_CTRL2	=	0x61ed
                           0061C0   964 _CSPPROG0	=	0x61c0
                           0061C1   965 _CSPPROG1	=	0x61c1
                           0061C2   966 _CSPPROG2	=	0x61c2
                           0061C3   967 _CSPPROG3	=	0x61c3
                           0061C4   968 _CSPPROG4	=	0x61c4
                           0061C5   969 _CSPPROG5	=	0x61c5
                           0061C6   970 _CSPPROG6	=	0x61c6
                           0061C7   971 _CSPPROG7	=	0x61c7
                           0061C8   972 _CSPPROG8	=	0x61c8
                           0061C9   973 _CSPPROG9	=	0x61c9
                           0061CA   974 _CSPPROG10	=	0x61ca
                           0061CB   975 _CSPPROG11	=	0x61cb
                           0061CC   976 _CSPPROG12	=	0x61cc
                           0061CD   977 _CSPPROG13	=	0x61cd
                           0061CE   978 _CSPPROG14	=	0x61ce
                           0061CF   979 _CSPPROG15	=	0x61cf
                           0061D0   980 _CSPPROG16	=	0x61d0
                           0061D1   981 _CSPPROG17	=	0x61d1
                           0061D2   982 _CSPPROG18	=	0x61d2
                           0061D3   983 _CSPPROG19	=	0x61d3
                           0061D4   984 _CSPPROG20	=	0x61d4
                           0061D5   985 _CSPPROG21	=	0x61d5
                           0061D6   986 _CSPPROG22	=	0x61d6
                           0061D7   987 _CSPPROG23	=	0x61d7
                           0061E0   988 _CSPCTRL	=	0x61e0
                           0061E1   989 _CSPSTAT	=	0x61e1
                           0061E2   990 _CSPX	=	0x61e2
                           0061E3   991 _CSPY	=	0x61e3
                           0061E4   992 _CSPZ	=	0x61e4
                           0061E5   993 _CSPT	=	0x61e5
                           006200   994 _USBADDR	=	0x6200
                           006201   995 _USBPOW	=	0x6201
                           006202   996 _USBIIF	=	0x6202
                           006204   997 _USBOIF	=	0x6204
                           006206   998 _USBCIF	=	0x6206
                           006207   999 _USBIIE	=	0x6207
                           006209  1000 _USBOIE	=	0x6209
                           00620B  1001 _USBCIE	=	0x620b
                           00620C  1002 _USBFRML	=	0x620c
                           00620D  1003 _USBFRMH	=	0x620d
                           00620E  1004 _USBINDEX	=	0x620e
                           00620F  1005 _USBCTRL	=	0x620f
                           006210  1006 _USBMAXI	=	0x6210
                           006211  1007 _USBCS0	=	0x6211
                           006211  1008 _USBCSIL	=	0x6211
                           006212  1009 _USBCSIH	=	0x6212
                           006213  1010 _USBMAXO	=	0x6213
                           006214  1011 _USBCSOL	=	0x6214
                           006215  1012 _USBCSOH	=	0x6215
                           006216  1013 _USBCNT0	=	0x6216
                           006216  1014 _USBCNTL	=	0x6216
                           006217  1015 _USBCNTH	=	0x6217
                           006220  1016 _USBF0	=	0x6220
                           006222  1017 _USBF1	=	0x6222
                           006224  1018 _USBF2	=	0x6224
                           006226  1019 _USBF3	=	0x6226
                           006228  1020 _USBF4	=	0x6228
                           00622A  1021 _USBF5	=	0x622a
                           007080  1022 _X_P0	=	0x7080
                           007086  1023 _X_U0CSR	=	0x7086
                           007089  1024 _X_P0IFG	=	0x7089
                           00708A  1025 _X_P1IFG	=	0x708a
                           00708B  1026 _X_P2IFG	=	0x708b
                           00708C  1027 _X_PICTL	=	0x708c
                           00708D  1028 _X_P1IEN	=	0x708d
                           00708F  1029 _X_P0INP	=	0x708f
                           007090  1030 _X_P1	=	0x7090
                           007091  1031 _X_RFIRQF1	=	0x7091
                           007093  1032 _X_MPAGE	=	0x7093
                           007093  1033 _X__XPAGE	=	0x7093
                           007094  1034 _X_T2CTRL	=	0x7094
                           007095  1035 _X_ST0	=	0x7095
                           007096  1036 _X_ST1	=	0x7096
                           007097  1037 _X_ST2	=	0x7097
                           00709C  1038 _X_T2EVTCFG	=	0x709c
                           00709D  1039 _X_SLEEPSTA	=	0x709d
                           00709E  1040 _X_CLKCONSTA	=	0x709e
                           00709F  1041 _X_FMAP	=	0x709f
                           00709F  1042 _X_PSBANK	=	0x709f
                           0070A0  1043 _X_P2	=	0x70a0
                           0070A1  1044 _X_T2IRQF	=	0x70a1
                           0070A2  1045 _X_T2M0	=	0x70a2
                           0070A3  1046 _X_T2M1	=	0x70a3
                           0070A4  1047 _X_T2MOVF0	=	0x70a4
                           0070A5  1048 _X_T2MOVF1	=	0x70a5
                           0070A6  1049 _X_T2MOVF2	=	0x70a6
                           0070A7  1050 _X_T2IRQM	=	0x70a7
                           0070AB  1051 _X_P0IEN	=	0x70ab
                           0070AC  1052 _X_P2IEN	=	0x70ac
                           0070AD  1053 _X_STLOAD	=	0x70ad
                           0070AE  1054 _X_PMUX	=	0x70ae
                           0070AF  1055 _X_T1STAT	=	0x70af
                           0070B1  1056 _X_ENCDI	=	0x70b1
                           0070B2  1057 _X_ENCDO	=	0x70b2
                           0070B3  1058 _X_ENCCS	=	0x70b3
                           0070B4  1059 _X_ADCCON1	=	0x70b4
                           0070B5  1060 _X_ADCCON2	=	0x70b5
                           0070B6  1061 _X_ADCCON3	=	0x70b6
                           0070BA  1062 _X_ADCL	=	0x70ba
                           0070BB  1063 _X_ADCH	=	0x70bb
                           0070BC  1064 _X_RNDL	=	0x70bc
                           0070BD  1065 _X_RNDH	=	0x70bd
                           0070BE  1066 _X_SLEEPCMD	=	0x70be
                           0070BF  1067 _X_RFERRF	=	0x70bf
                           0070C1  1068 _X_U0DBUF	=	0x70c1
                           0070C2  1069 _X_U0BAUD	=	0x70c2
                           0070C3  1070 _X_T2MSEL	=	0x70c3
                           0070C4  1071 _X_U0UCR	=	0x70c4
                           0070C5  1072 _X_U0GCR	=	0x70c5
                           0070C6  1073 _X_CLKCONCMD	=	0x70c6
                           0070C7  1074 _X_MEMCTR	=	0x70c7
                           0070C9  1075 _X_WDCTL	=	0x70c9
                           0070CA  1076 _X_T3CNT	=	0x70ca
                           0070CB  1077 _X_T3CTL	=	0x70cb
                           0070CC  1078 _X_T3CCTL0	=	0x70cc
                           0070CD  1079 _X_T3CC0	=	0x70cd
                           0070CE  1080 _X_T3CCTL1	=	0x70ce
                           0070CF  1081 _X_T3CC1	=	0x70cf
                           0070D1  1082 _X_DMAIRQ	=	0x70d1
                           0070D2  1083 _X_DMA1CFGL	=	0x70d2
                           0070D3  1084 _X_DMA1CFGH	=	0x70d3
                           0070D4  1085 _X_DMA0CFGL	=	0x70d4
                           0070D5  1086 _X_DMA0CFGH	=	0x70d5
                           0070D6  1087 _X_DMAARM	=	0x70d6
                           0070D7  1088 _X_DMAREQ	=	0x70d7
                           0070D8  1089 _X_TIMIF	=	0x70d8
                           0070D9  1090 _X_RFD	=	0x70d9
                           0070DA  1091 _X_T1CC0L	=	0x70da
                           0070DB  1092 _X_T1CC0H	=	0x70db
                           0070DC  1093 _X_T1CC1L	=	0x70dc
                           0070DD  1094 _X_T1CC1H	=	0x70dd
                           0070DE  1095 _X_T1CC2L	=	0x70de
                           0070DF  1096 _X_T1CC2H	=	0x70df
                           0070E1  1097 _X_RFST	=	0x70e1
                           0070E2  1098 _X_T1CNTL	=	0x70e2
                           0070E3  1099 _X_T1CNTH	=	0x70e3
                           0070E4  1100 _X_T1CTL	=	0x70e4
                           0070E5  1101 _X_T1CCTL0	=	0x70e5
                           0070E6  1102 _X_T1CCTL1	=	0x70e6
                           0070E7  1103 _X_T1CCTL2	=	0x70e7
                           0070E9  1104 _X_RFIRQF0	=	0x70e9
                           0070EA  1105 _X_T4CNT	=	0x70ea
                           0070EB  1106 _X_T4CTL	=	0x70eb
                           0070EC  1107 _X_T4CCTL0	=	0x70ec
                           0070ED  1108 _X_T4CC0	=	0x70ed
                           0070EE  1109 _X_T4CCTL1	=	0x70ee
                           0070EF  1110 _X_T4CC1	=	0x70ef
                           0070F1  1111 _X_PERCFG	=	0x70f1
                           0070F2  1112 _X_APCFG	=	0x70f2
                           0070F3  1113 _X_P0SEL	=	0x70f3
                           0070F4  1114 _X_P1SEL	=	0x70f4
                           0070F5  1115 _X_P2SEL	=	0x70f5
                           0070F6  1116 _X_P1INP	=	0x70f6
                           0070F7  1117 _X_P2INP	=	0x70f7
                           0070F8  1118 _X_U1CSR	=	0x70f8
                           0070F9  1119 _X_U1DBUF	=	0x70f9
                           0070FA  1120 _X_U1BAUD	=	0x70fa
                           0070FB  1121 _X_U1UCR	=	0x70fb
                           0070FC  1122 _X_U1GCR	=	0x70fc
                           0070FD  1123 _X_P0DIR	=	0x70fd
                           0070FE  1124 _X_P1DIR	=	0x70fe
                           0070FF  1125 _X_P2DIR	=	0x70ff
                           007800  1126 _X_INFOPAGE	=	0x7800
                           00780C  1127 _X_IEEE_ADDR	=	0x780c
                                   1128 ;--------------------------------------------------------
                                   1129 ; absolute external ram data
                                   1130 ;--------------------------------------------------------
                                   1131 	.area XABS    (ABS,XDATA)
                                   1132 ;--------------------------------------------------------
                                   1133 ; external initialized ram data
                                   1134 ;--------------------------------------------------------
                                   1135 	.area XISEG   (XDATA)
                                   1136 	.area HOME    (CODE)
                                   1137 	.area GSINIT0 (CODE)
                                   1138 	.area GSINIT1 (CODE)
                                   1139 	.area GSINIT2 (CODE)
                                   1140 	.area GSINIT3 (CODE)
                                   1141 	.area GSINIT4 (CODE)
                                   1142 	.area GSINIT5 (CODE)
                                   1143 	.area GSINIT  (CODE)
                                   1144 	.area GSFINAL (CODE)
                                   1145 	.area CSEG    (CODE)
                                   1146 ;--------------------------------------------------------
                                   1147 ; global & static initialisations
                                   1148 ;--------------------------------------------------------
                                   1149 	.area HOME    (CODE)
                                   1150 	.area GSINIT  (CODE)
                                   1151 	.area GSFINAL (CODE)
                                   1152 	.area GSINIT  (CODE)
                                   1153 ;--------------------------------------------------------
                                   1154 ; Home
                                   1155 ;--------------------------------------------------------
                                   1156 	.area HOME    (CODE)
                                   1157 	.area HOME    (CODE)
                                   1158 ;--------------------------------------------------------
                                   1159 ; code
                                   1160 ;--------------------------------------------------------
                                   1161 	.area BANK1   (CODE)
                                   1162 ;------------------------------------------------------------
                                   1163 ;Allocation info for local variables in function 'read_data'
                                   1164 ;------------------------------------------------------------
                                   1165 ;dataptr                   Allocated to stack - sp -11
                                   1166 ;chunk                     Allocated to stack - sp -13
                                   1167 ;c                         Allocated to stack - sp -5
                                   1168 ;len                       Allocated to registers r3 r4 
                                   1169 ;sloc0                     Allocated to stack - sp -2
                                   1170 ;------------------------------------------------------------
                                   1171 ;	/opt/contiki/core/net/rime/rudolph1.c:88: read_data(struct rudolph1_conn *c, uint8_t *dataptr, int chunk)
                                   1172 ;	-----------------------------------------
                                   1173 ;	 function read_data
                                   1174 ;	-----------------------------------------
      000000                       1175 _read_data:
                           000007  1176 	ar7 = 0x07
                           000006  1177 	ar6 = 0x06
                           000005  1178 	ar5 = 0x05
                           000004  1179 	ar4 = 0x04
                           000003  1180 	ar3 = 0x03
                           000002  1181 	ar2 = 0x02
                           000001  1182 	ar1 = 0x01
                           000000  1183 	ar0 = 0x00
      000000 C0 82            [24] 1184 	push	dpl
      000002 C0 83            [24] 1185 	push	dph
      000004 C0 F0            [24] 1186 	push	b
      000006 05 81            [12] 1187 	inc	sp
      000008 05 81            [12] 1188 	inc	sp
      00000A 05 81            [12] 1189 	inc	sp
                                   1190 ;	/opt/contiki/core/net/rime/rudolph1.c:90: int len = 0;
                                   1191 ;	/opt/contiki/core/net/rime/rudolph1.c:92: if(c->cb->read_chunk) {
      00000C E4               [12] 1192 	clr	a
      00000D FB               [12] 1193 	mov	r3,a
      00000E FC               [12] 1194 	mov	r4,a
      00000F E5 81            [12] 1195 	mov	a,sp
      000011 24 FB            [12] 1196 	add	a,#0xfb
      000013 F8               [12] 1197 	mov	r0,a
      000014 74 8C            [12] 1198 	mov	a,#0x8C
      000016 26               [12] 1199 	add	a,@r0
      000017 FA               [12] 1200 	mov	r2,a
      000018 E4               [12] 1201 	clr	a
      000019 08               [12] 1202 	inc	r0
      00001A 36               [12] 1203 	addc	a,@r0
      00001B FE               [12] 1204 	mov	r6,a
      00001C 08               [12] 1205 	inc	r0
      00001D 86 07            [24] 1206 	mov	ar7,@r0
      00001F 8A 82            [24] 1207 	mov	dpl,r2
      000021 8E 83            [24] 1208 	mov	dph,r6
      000023 8F F0            [24] 1209 	mov	b,r7
      000025 12r00r00         [24] 1210 	lcall	__gptrget
      000028 FA               [12] 1211 	mov	r2,a
      000029 A3               [24] 1212 	inc	dptr
      00002A 12r00r00         [24] 1213 	lcall	__gptrget
      00002D FE               [12] 1214 	mov	r6,a
      00002E A3               [24] 1215 	inc	dptr
      00002F 12r00r00         [24] 1216 	lcall	__gptrget
      000032 FF               [12] 1217 	mov	r7,a
      000033 74 03            [12] 1218 	mov	a,#0x03
      000035 2A               [12] 1219 	add	a,r2
      000036 FA               [12] 1220 	mov	r2,a
      000037 E4               [12] 1221 	clr	a
      000038 3E               [12] 1222 	addc	a,r6
      000039 FE               [12] 1223 	mov	r6,a
      00003A 8A 82            [24] 1224 	mov	dpl,r2
      00003C 8E 83            [24] 1225 	mov	dph,r6
      00003E 8F F0            [24] 1226 	mov	b,r7
      000040 A8 81            [24] 1227 	mov	r0,sp
      000042 18               [12] 1228 	dec	r0
      000043 18               [12] 1229 	dec	r0
      000044 12r00r00         [24] 1230 	lcall	__gptrget
      000047 F6               [12] 1231 	mov	@r0,a
      000048 A3               [24] 1232 	inc	dptr
      000049 12r00r00         [24] 1233 	lcall	__gptrget
      00004C 08               [12] 1234 	inc	r0
      00004D F6               [12] 1235 	mov	@r0,a
      00004E A3               [24] 1236 	inc	dptr
      00004F 12r00r00         [24] 1237 	lcall	__gptrget
      000052 08               [12] 1238 	inc	r0
      000053 F6               [12] 1239 	mov	@r0,a
      000054 A8 81            [24] 1240 	mov	r0,sp
      000056 18               [12] 1241 	dec	r0
      000057 18               [12] 1242 	dec	r0
      000058 E6               [12] 1243 	mov	a,@r0
      000059 08               [12] 1244 	inc	r0
      00005A 46               [12] 1245 	orl	a,@r0
      00005B 60 68            [24] 1246 	jz	00102$
                                   1247 ;	/opt/contiki/core/net/rime/rudolph1.c:93: len = c->cb->read_chunk(c, chunk * RUDOLPH1_DATASIZE,
      00005D E5 81            [12] 1248 	mov	a,sp
      00005F 24 F3            [12] 1249 	add	a,#0xf3
      000061 F8               [12] 1250 	mov	r0,a
      000062 86 02            [24] 1251 	mov	ar2,@r0
      000064 08               [12] 1252 	inc	r0
      000065 E6               [12] 1253 	mov	a,@r0
      000066 54 03            [12] 1254 	anl	a,#0x03
      000068 A2 E0            [12] 1255 	mov	c,acc.0
      00006A CA               [12] 1256 	xch	a,r2
      00006B 13               [12] 1257 	rrc	a
      00006C CA               [12] 1258 	xch	a,r2
      00006D 13               [12] 1259 	rrc	a
      00006E A2 E0            [12] 1260 	mov	c,acc.0
      000070 CA               [12] 1261 	xch	a,r2
      000071 13               [12] 1262 	rrc	a
      000072 CA               [12] 1263 	xch	a,r2
      000073 13               [12] 1264 	rrc	a
      000074 CA               [12] 1265 	xch	a,r2
      000075 FF               [12] 1266 	mov	r7,a
      000076 74 40            [12] 1267 	mov	a,#0x40
      000078 C0 E0            [24] 1268 	push	acc
      00007A E4               [12] 1269 	clr	a
      00007B C0 E0            [24] 1270 	push	acc
      00007D E5 81            [12] 1271 	mov	a,sp
      00007F 24 F3            [12] 1272 	add	a,#0xf3
      000081 F8               [12] 1273 	mov	r0,a
      000082 E6               [12] 1274 	mov	a,@r0
      000083 C0 E0            [24] 1275 	push	acc
      000085 08               [12] 1276 	inc	r0
      000086 E6               [12] 1277 	mov	a,@r0
      000087 C0 E0            [24] 1278 	push	acc
      000089 08               [12] 1279 	inc	r0
      00008A E6               [12] 1280 	mov	a,@r0
      00008B C0 E0            [24] 1281 	push	acc
      00008D C0 02            [24] 1282 	push	ar2
      00008F C0 07            [24] 1283 	push	ar7
      000091 E5 81            [12] 1284 	mov	a,sp
      000093 24 F7            [12] 1285 	add	a,#0xf7
      000095 F8               [12] 1286 	mov	r0,a
      000096 E6               [12] 1287 	mov	a,@r0
      000097 C0 E0            [24] 1288 	push	acc
      000099 08               [12] 1289 	inc	r0
      00009A E6               [12] 1290 	mov	a,@r0
      00009B C0 E0            [24] 1291 	push	acc
      00009D 08               [12] 1292 	inc	r0
      00009E E6               [12] 1293 	mov	a,@r0
      00009F C0 E0            [24] 1294 	push	acc
      0000A1 E5 81            [12] 1295 	mov	a,sp
      0000A3 24 F1            [12] 1296 	add	a,#0xf1
      0000A5 F8               [12] 1297 	mov	r0,a
      0000A6 86 82            [24] 1298 	mov	dpl,@r0
      0000A8 08               [12] 1299 	inc	r0
      0000A9 86 83            [24] 1300 	mov	dph,@r0
      0000AB 08               [12] 1301 	inc	r0
      0000AC 86 F0            [24] 1302 	mov	b,@r0
      0000AE D0 02            [24] 1303 	pop	ar2
      0000B0 D0 01            [24] 1304 	pop	ar1
      0000B2 D0 00            [24] 1305 	pop	ar0
      0000B4 12r00r00         [24] 1306 	lcall	__sdcc_banked_call
      0000B7 AE 82            [24] 1307 	mov	r6,dpl
      0000B9 AF 83            [24] 1308 	mov	r7,dph
      0000BB E5 81            [12] 1309 	mov	a,sp
      0000BD 24 F9            [12] 1310 	add	a,#0xf9
      0000BF F5 81            [12] 1311 	mov	sp,a
      0000C1 8E 03            [24] 1312 	mov	ar3,r6
      0000C3 8F 04            [24] 1313 	mov	ar4,r7
      0000C5                       1314 00102$:
                                   1315 ;	/opt/contiki/core/net/rime/rudolph1.c:96: return len;
      0000C5 8B 82            [24] 1316 	mov	dpl,r3
      0000C7 8C 83            [24] 1317 	mov	dph,r4
      0000C9 E5 81            [12] 1318 	mov	a,sp
      0000CB 24 FA            [12] 1319 	add	a,#0xFA
      0000CD F5 81            [12] 1320 	mov	sp,a
      0000CF 02r00r00         [24] 1321 	ljmp	__sdcc_banked_ret
                                   1322 ;------------------------------------------------------------
                                   1323 ;Allocation info for local variables in function 'format_data'
                                   1324 ;------------------------------------------------------------
                                   1325 ;chunk                     Allocated to stack - sp -10
                                   1326 ;c                         Allocated to stack - sp -5
                                   1327 ;p                         Allocated to stack - sp -2
                                   1328 ;------------------------------------------------------------
                                   1329 ;	/opt/contiki/core/net/rime/rudolph1.c:100: format_data(struct rudolph1_conn *c, int chunk)
                                   1330 ;	-----------------------------------------
                                   1331 ;	 function format_data
                                   1332 ;	-----------------------------------------
      0000D2                       1333 _format_data:
      0000D2 C0 82            [24] 1334 	push	dpl
      0000D4 C0 83            [24] 1335 	push	dph
      0000D6 C0 F0            [24] 1336 	push	b
      0000D8 05 81            [12] 1337 	inc	sp
      0000DA 05 81            [12] 1338 	inc	sp
      0000DC 05 81            [12] 1339 	inc	sp
                                   1340 ;	/opt/contiki/core/net/rime/rudolph1.c:104: packetbuf_clear();
      0000DE 78r00            [12] 1341 	mov	r0,#_packetbuf_clear
      0000E0 79s00            [12] 1342 	mov	r1,#(_packetbuf_clear >> 8)
      0000E2 7As00            [12] 1343 	mov	r2,#(_packetbuf_clear >> 16)
      0000E4 12r00r00         [24] 1344 	lcall	__sdcc_banked_call
                                   1345 ;	/opt/contiki/core/net/rime/rudolph1.c:105: p = packetbuf_dataptr();
      0000E7 78r00            [12] 1346 	mov	r0,#_packetbuf_dataptr
      0000E9 79s00            [12] 1347 	mov	r1,#(_packetbuf_dataptr >> 8)
      0000EB 7As00            [12] 1348 	mov	r2,#(_packetbuf_dataptr >> 16)
      0000ED 12r00r00         [24] 1349 	lcall	__sdcc_banked_call
      0000F0 AA 82            [24] 1350 	mov	r2,dpl
      0000F2 AB 83            [24] 1351 	mov	r3,dph
      0000F4 AC F0            [24] 1352 	mov	r4,b
      0000F6 A8 81            [24] 1353 	mov	r0,sp
      0000F8 18               [12] 1354 	dec	r0
      0000F9 18               [12] 1355 	dec	r0
      0000FA A6 02            [24] 1356 	mov	@r0,ar2
      0000FC 08               [12] 1357 	inc	r0
      0000FD A6 03            [24] 1358 	mov	@r0,ar3
      0000FF 08               [12] 1359 	inc	r0
      000100 A6 04            [24] 1360 	mov	@r0,ar4
                                   1361 ;	/opt/contiki/core/net/rime/rudolph1.c:106: p->h.type = TYPE_DATA;
      000102 A8 81            [24] 1362 	mov	r0,sp
      000104 18               [12] 1363 	dec	r0
      000105 18               [12] 1364 	dec	r0
      000106 86 82            [24] 1365 	mov	dpl,@r0
      000108 08               [12] 1366 	inc	r0
      000109 86 83            [24] 1367 	mov	dph,@r0
      00010B 08               [12] 1368 	inc	r0
      00010C 86 F0            [24] 1369 	mov	b,@r0
      00010E E4               [12] 1370 	clr	a
      00010F 12r00r00         [24] 1371 	lcall	__gptrput
                                   1372 ;	/opt/contiki/core/net/rime/rudolph1.c:107: p->h.version = c->version;
      000112 A8 81            [24] 1373 	mov	r0,sp
      000114 18               [12] 1374 	dec	r0
      000115 18               [12] 1375 	dec	r0
      000116 04               [12] 1376 	inc	a
      000117 26               [12] 1377 	add	a,@r0
      000118 FD               [12] 1378 	mov	r5,a
      000119 E4               [12] 1379 	clr	a
      00011A 08               [12] 1380 	inc	r0
      00011B 36               [12] 1381 	addc	a,@r0
      00011C FE               [12] 1382 	mov	r6,a
      00011D 08               [12] 1383 	inc	r0
      00011E 86 07            [24] 1384 	mov	ar7,@r0
      000120 E5 81            [12] 1385 	mov	a,sp
      000122 24 FB            [12] 1386 	add	a,#0xfb
      000124 F8               [12] 1387 	mov	r0,a
      000125 74 AB            [12] 1388 	mov	a,#0xAB
      000127 26               [12] 1389 	add	a,@r0
      000128 FA               [12] 1390 	mov	r2,a
      000129 E4               [12] 1391 	clr	a
      00012A 08               [12] 1392 	inc	r0
      00012B 36               [12] 1393 	addc	a,@r0
      00012C FB               [12] 1394 	mov	r3,a
      00012D 08               [12] 1395 	inc	r0
      00012E 86 04            [24] 1396 	mov	ar4,@r0
      000130 8A 82            [24] 1397 	mov	dpl,r2
      000132 8B 83            [24] 1398 	mov	dph,r3
      000134 8C F0            [24] 1399 	mov	b,r4
      000136 12r00r00         [24] 1400 	lcall	__gptrget
      000139 8D 82            [24] 1401 	mov	dpl,r5
      00013B 8E 83            [24] 1402 	mov	dph,r6
      00013D 8F F0            [24] 1403 	mov	b,r7
      00013F 12r00r00         [24] 1404 	lcall	__gptrput
                                   1405 ;	/opt/contiki/core/net/rime/rudolph1.c:108: p->h.chunk = chunk;
      000142 A8 81            [24] 1406 	mov	r0,sp
      000144 18               [12] 1407 	dec	r0
      000145 18               [12] 1408 	dec	r0
      000146 74 02            [12] 1409 	mov	a,#0x02
      000148 26               [12] 1410 	add	a,@r0
      000149 FD               [12] 1411 	mov	r5,a
      00014A E4               [12] 1412 	clr	a
      00014B 08               [12] 1413 	inc	r0
      00014C 36               [12] 1414 	addc	a,@r0
      00014D FE               [12] 1415 	mov	r6,a
      00014E 08               [12] 1416 	inc	r0
      00014F 86 07            [24] 1417 	mov	ar7,@r0
      000151 8D 82            [24] 1418 	mov	dpl,r5
      000153 8E 83            [24] 1419 	mov	dph,r6
      000155 8F F0            [24] 1420 	mov	b,r7
      000157 E5 81            [12] 1421 	mov	a,sp
      000159 24 F6            [12] 1422 	add	a,#0xf6
      00015B F8               [12] 1423 	mov	r0,a
      00015C E6               [12] 1424 	mov	a,@r0
      00015D 12r00r00         [24] 1425 	lcall	__gptrput
      000160 A3               [24] 1426 	inc	dptr
      000161 08               [12] 1427 	inc	r0
      000162 E6               [12] 1428 	mov	a,@r0
      000163 12r00r00         [24] 1429 	lcall	__gptrput
                                   1430 ;	/opt/contiki/core/net/rime/rudolph1.c:109: p->datalen = read_data(c, p->data, chunk);
      000166 A8 81            [24] 1431 	mov	r0,sp
      000168 18               [12] 1432 	dec	r0
      000169 18               [12] 1433 	dec	r0
      00016A 74 04            [12] 1434 	mov	a,#0x04
      00016C 26               [12] 1435 	add	a,@r0
      00016D FD               [12] 1436 	mov	r5,a
      00016E E4               [12] 1437 	clr	a
      00016F 08               [12] 1438 	inc	r0
      000170 36               [12] 1439 	addc	a,@r0
      000171 FE               [12] 1440 	mov	r6,a
      000172 08               [12] 1441 	inc	r0
      000173 86 07            [24] 1442 	mov	ar7,@r0
      000175 A8 81            [24] 1443 	mov	r0,sp
      000177 18               [12] 1444 	dec	r0
      000178 18               [12] 1445 	dec	r0
      000179 74 05            [12] 1446 	mov	a,#0x05
      00017B 26               [12] 1447 	add	a,@r0
      00017C FA               [12] 1448 	mov	r2,a
      00017D E4               [12] 1449 	clr	a
      00017E 08               [12] 1450 	inc	r0
      00017F 36               [12] 1451 	addc	a,@r0
      000180 FB               [12] 1452 	mov	r3,a
      000181 08               [12] 1453 	inc	r0
      000182 86 04            [24] 1454 	mov	ar4,@r0
      000184 C0 07            [24] 1455 	push	ar7
      000186 C0 06            [24] 1456 	push	ar6
      000188 C0 05            [24] 1457 	push	ar5
      00018A E5 81            [12] 1458 	mov	a,sp
      00018C 24 F3            [12] 1459 	add	a,#0xf3
      00018E F8               [12] 1460 	mov	r0,a
      00018F E6               [12] 1461 	mov	a,@r0
      000190 C0 E0            [24] 1462 	push	acc
      000192 08               [12] 1463 	inc	r0
      000193 E6               [12] 1464 	mov	a,@r0
      000194 C0 E0            [24] 1465 	push	acc
      000196 C0 02            [24] 1466 	push	ar2
      000198 C0 03            [24] 1467 	push	ar3
      00019A C0 04            [24] 1468 	push	ar4
      00019C E5 81            [12] 1469 	mov	a,sp
      00019E 24 F3            [12] 1470 	add	a,#0xf3
      0001A0 F8               [12] 1471 	mov	r0,a
      0001A1 86 82            [24] 1472 	mov	dpl,@r0
      0001A3 08               [12] 1473 	inc	r0
      0001A4 86 83            [24] 1474 	mov	dph,@r0
      0001A6 08               [12] 1475 	inc	r0
      0001A7 86 F0            [24] 1476 	mov	b,@r0
      0001A9 78r00            [12] 1477 	mov	r0,#_read_data
      0001AB 79s00            [12] 1478 	mov	r1,#(_read_data >> 8)
      0001AD 7As00            [12] 1479 	mov	r2,#(_read_data >> 16)
      0001AF 12r00r00         [24] 1480 	lcall	__sdcc_banked_call
      0001B2 AB 82            [24] 1481 	mov	r3,dpl
      0001B4 E5 81            [12] 1482 	mov	a,sp
      0001B6 24 FB            [12] 1483 	add	a,#0xfb
      0001B8 F5 81            [12] 1484 	mov	sp,a
      0001BA D0 05            [24] 1485 	pop	ar5
      0001BC D0 06            [24] 1486 	pop	ar6
      0001BE D0 07            [24] 1487 	pop	ar7
      0001C0 8D 82            [24] 1488 	mov	dpl,r5
      0001C2 8E 83            [24] 1489 	mov	dph,r6
      0001C4 8F F0            [24] 1490 	mov	b,r7
      0001C6 EB               [12] 1491 	mov	a,r3
      0001C7 12r00r00         [24] 1492 	lcall	__gptrput
                                   1493 ;	/opt/contiki/core/net/rime/rudolph1.c:111: (RUDOLPH1_DATASIZE - p->datalen));
      0001CA 7C 00            [12] 1494 	mov	r4,#0x00
      0001CC 74 40            [12] 1495 	mov	a,#0x40
      0001CE C3               [12] 1496 	clr	c
      0001CF 9B               [12] 1497 	subb	a,r3
      0001D0 FB               [12] 1498 	mov	r3,a
      0001D1 E4               [12] 1499 	clr	a
      0001D2 9C               [12] 1500 	subb	a,r4
      0001D3 FC               [12] 1501 	mov	r4,a
      0001D4 74 45            [12] 1502 	mov	a,#0x45
      0001D6 C3               [12] 1503 	clr	c
      0001D7 9B               [12] 1504 	subb	a,r3
      0001D8 FB               [12] 1505 	mov	r3,a
      0001D9 E4               [12] 1506 	clr	a
      0001DA 9C               [12] 1507 	subb	a,r4
      0001DB FC               [12] 1508 	mov	r4,a
      0001DC 8B 82            [24] 1509 	mov	dpl,r3
      0001DE 8C 83            [24] 1510 	mov	dph,r4
      0001E0 C0 07            [24] 1511 	push	ar7
      0001E2 C0 06            [24] 1512 	push	ar6
      0001E4 C0 05            [24] 1513 	push	ar5
      0001E6 78r00            [12] 1514 	mov	r0,#_packetbuf_set_datalen
      0001E8 79s00            [12] 1515 	mov	r1,#(_packetbuf_set_datalen >> 8)
      0001EA 7As00            [12] 1516 	mov	r2,#(_packetbuf_set_datalen >> 16)
      0001EC 12r00r00         [24] 1517 	lcall	__sdcc_banked_call
      0001EF D0 05            [24] 1518 	pop	ar5
      0001F1 D0 06            [24] 1519 	pop	ar6
      0001F3 D0 07            [24] 1520 	pop	ar7
                                   1521 ;	/opt/contiki/core/net/rime/rudolph1.c:113: return p->datalen;
      0001F5 8D 82            [24] 1522 	mov	dpl,r5
      0001F7 8E 83            [24] 1523 	mov	dph,r6
      0001F9 8F F0            [24] 1524 	mov	b,r7
      0001FB 12r00r00         [24] 1525 	lcall	__gptrget
      0001FE FD               [12] 1526 	mov	r5,a
      0001FF 7F 00            [12] 1527 	mov	r7,#0x00
      000201 8D 82            [24] 1528 	mov	dpl,r5
      000203 8F 83            [24] 1529 	mov	dph,r7
      000205 E5 81            [12] 1530 	mov	a,sp
      000207 24 FA            [12] 1531 	add	a,#0xFA
      000209 F5 81            [12] 1532 	mov	sp,a
      00020B 02r00r00         [24] 1533 	ljmp	__sdcc_banked_ret
                                   1534 ;------------------------------------------------------------
                                   1535 ;Allocation info for local variables in function 'write_data'
                                   1536 ;------------------------------------------------------------
                                   1537 ;chunk                     Allocated to stack - sp -7
                                   1538 ;data                      Allocated to stack - sp -10
                                   1539 ;datalen                   Allocated to stack - sp -12
                                   1540 ;c                         Allocated to stack - sp -2
                                   1541 ;------------------------------------------------------------
                                   1542 ;	/opt/contiki/core/net/rime/rudolph1.c:117: write_data(struct rudolph1_conn *c, int chunk, uint8_t *data, int datalen)
                                   1543 ;	-----------------------------------------
                                   1544 ;	 function write_data
                                   1545 ;	-----------------------------------------
      00020E                       1546 _write_data:
      00020E C0 82            [24] 1547 	push	dpl
      000210 C0 83            [24] 1548 	push	dph
      000212 C0 F0            [24] 1549 	push	b
                                   1550 ;	/opt/contiki/core/net/rime/rudolph1.c:119: if(chunk == 0) {
      000214 E5 81            [12] 1551 	mov	a,sp
      000216 24 F9            [12] 1552 	add	a,#0xf9
      000218 F8               [12] 1553 	mov	r0,a
      000219 E6               [12] 1554 	mov	a,@r0
      00021A 08               [12] 1555 	inc	r0
      00021B 46               [12] 1556 	orl	a,@r0
      00021C 60 03            [24] 1557 	jz	00114$
      00021E 02r02rA6         [24] 1558 	ljmp	00102$
      000221                       1559 00114$:
                                   1560 ;	/opt/contiki/core/net/rime/rudolph1.c:120: c->cb->write_chunk(c, 0, RUDOLPH1_FLAG_NEWFILE, data, 0);
      000221 A8 81            [24] 1561 	mov	r0,sp
      000223 18               [12] 1562 	dec	r0
      000224 18               [12] 1563 	dec	r0
      000225 74 8C            [12] 1564 	mov	a,#0x8C
      000227 26               [12] 1565 	add	a,@r0
      000228 FA               [12] 1566 	mov	r2,a
      000229 E4               [12] 1567 	clr	a
      00022A 08               [12] 1568 	inc	r0
      00022B 36               [12] 1569 	addc	a,@r0
      00022C FB               [12] 1570 	mov	r3,a
      00022D 08               [12] 1571 	inc	r0
      00022E 86 04            [24] 1572 	mov	ar4,@r0
      000230 8A 82            [24] 1573 	mov	dpl,r2
      000232 8B 83            [24] 1574 	mov	dph,r3
      000234 8C F0            [24] 1575 	mov	b,r4
      000236 12r00r00         [24] 1576 	lcall	__gptrget
      000239 FA               [12] 1577 	mov	r2,a
      00023A A3               [24] 1578 	inc	dptr
      00023B 12r00r00         [24] 1579 	lcall	__gptrget
      00023E FB               [12] 1580 	mov	r3,a
      00023F A3               [24] 1581 	inc	dptr
      000240 12r00r00         [24] 1582 	lcall	__gptrget
      000243 FC               [12] 1583 	mov	r4,a
      000244 8A 82            [24] 1584 	mov	dpl,r2
      000246 8B 83            [24] 1585 	mov	dph,r3
      000248 8C F0            [24] 1586 	mov	b,r4
      00024A 12r00r00         [24] 1587 	lcall	__gptrget
      00024D FA               [12] 1588 	mov	r2,a
      00024E A3               [24] 1589 	inc	dptr
      00024F 12r00r00         [24] 1590 	lcall	__gptrget
      000252 FB               [12] 1591 	mov	r3,a
      000253 A3               [24] 1592 	inc	dptr
      000254 12r00r00         [24] 1593 	lcall	__gptrget
      000257 FC               [12] 1594 	mov	r4,a
      000258 C0 04            [24] 1595 	push	ar4
      00025A C0 03            [24] 1596 	push	ar3
      00025C C0 02            [24] 1597 	push	ar2
      00025E E4               [12] 1598 	clr	a
      00025F C0 E0            [24] 1599 	push	acc
      000261 C0 E0            [24] 1600 	push	acc
      000263 E5 81            [12] 1601 	mov	a,sp
      000265 24 F1            [12] 1602 	add	a,#0xf1
      000267 F8               [12] 1603 	mov	r0,a
      000268 E6               [12] 1604 	mov	a,@r0
      000269 C0 E0            [24] 1605 	push	acc
      00026B 08               [12] 1606 	inc	r0
      00026C E6               [12] 1607 	mov	a,@r0
      00026D C0 E0            [24] 1608 	push	acc
      00026F 08               [12] 1609 	inc	r0
      000270 E6               [12] 1610 	mov	a,@r0
      000271 C0 E0            [24] 1611 	push	acc
      000273 74 01            [12] 1612 	mov	a,#0x01
      000275 C0 E0            [24] 1613 	push	acc
      000277 E4               [12] 1614 	clr	a
      000278 C0 E0            [24] 1615 	push	acc
      00027A C0 E0            [24] 1616 	push	acc
      00027C C0 E0            [24] 1617 	push	acc
      00027E C0 02            [24] 1618 	push	ar2
      000280 C0 03            [24] 1619 	push	ar3
      000282 C0 04            [24] 1620 	push	ar4
      000284 E5 81            [12] 1621 	mov	a,sp
      000286 24 EF            [12] 1622 	add	a,#0xef
      000288 F8               [12] 1623 	mov	r0,a
      000289 86 82            [24] 1624 	mov	dpl,@r0
      00028B 08               [12] 1625 	inc	r0
      00028C 86 83            [24] 1626 	mov	dph,@r0
      00028E 08               [12] 1627 	inc	r0
      00028F 86 F0            [24] 1628 	mov	b,@r0
      000291 D0 02            [24] 1629 	pop	ar2
      000293 D0 01            [24] 1630 	pop	ar1
      000295 D0 00            [24] 1631 	pop	ar0
      000297 12r00r00         [24] 1632 	lcall	__sdcc_banked_call
      00029A E5 81            [12] 1633 	mov	a,sp
      00029C 24 F7            [12] 1634 	add	a,#0xf7
      00029E F5 81            [12] 1635 	mov	sp,a
      0002A0 D0 02            [24] 1636 	pop	ar2
      0002A2 D0 03            [24] 1637 	pop	ar3
      0002A4 D0 04            [24] 1638 	pop	ar4
      0002A6                       1639 00102$:
                                   1640 ;	/opt/contiki/core/net/rime/rudolph1.c:123: if(datalen < RUDOLPH1_DATASIZE) {
      0002A6 E5 81            [12] 1641 	mov	a,sp
      0002A8 24 F4            [12] 1642 	add	a,#0xf4
      0002AA F8               [12] 1643 	mov	r0,a
      0002AB C3               [12] 1644 	clr	c
      0002AC E6               [12] 1645 	mov	a,@r0
      0002AD 94 40            [12] 1646 	subb	a,#0x40
      0002AF 08               [12] 1647 	inc	r0
      0002B0 E6               [12] 1648 	mov	a,@r0
      0002B1 64 80            [12] 1649 	xrl	a,#0x80
      0002B3 94 80            [12] 1650 	subb	a,#0x80
      0002B5 40 03            [24] 1651 	jc	00115$
      0002B7 02r03r62         [24] 1652 	ljmp	00104$
      0002BA                       1653 00115$:
                                   1654 ;	/opt/contiki/core/net/rime/rudolph1.c:127: c->cb->write_chunk(c, chunk * RUDOLPH1_DATASIZE,
      0002BA A8 81            [24] 1655 	mov	r0,sp
      0002BC 18               [12] 1656 	dec	r0
      0002BD 18               [12] 1657 	dec	r0
      0002BE 74 8C            [12] 1658 	mov	a,#0x8C
      0002C0 26               [12] 1659 	add	a,@r0
      0002C1 FA               [12] 1660 	mov	r2,a
      0002C2 E4               [12] 1661 	clr	a
      0002C3 08               [12] 1662 	inc	r0
      0002C4 36               [12] 1663 	addc	a,@r0
      0002C5 FB               [12] 1664 	mov	r3,a
      0002C6 08               [12] 1665 	inc	r0
      0002C7 86 04            [24] 1666 	mov	ar4,@r0
      0002C9 8A 82            [24] 1667 	mov	dpl,r2
      0002CB 8B 83            [24] 1668 	mov	dph,r3
      0002CD 8C F0            [24] 1669 	mov	b,r4
      0002CF 12r00r00         [24] 1670 	lcall	__gptrget
      0002D2 FA               [12] 1671 	mov	r2,a
      0002D3 A3               [24] 1672 	inc	dptr
      0002D4 12r00r00         [24] 1673 	lcall	__gptrget
      0002D7 FB               [12] 1674 	mov	r3,a
      0002D8 A3               [24] 1675 	inc	dptr
      0002D9 12r00r00         [24] 1676 	lcall	__gptrget
      0002DC FC               [12] 1677 	mov	r4,a
      0002DD 8A 82            [24] 1678 	mov	dpl,r2
      0002DF 8B 83            [24] 1679 	mov	dph,r3
      0002E1 8C F0            [24] 1680 	mov	b,r4
      0002E3 12r00r00         [24] 1681 	lcall	__gptrget
      0002E6 FA               [12] 1682 	mov	r2,a
      0002E7 A3               [24] 1683 	inc	dptr
      0002E8 12r00r00         [24] 1684 	lcall	__gptrget
      0002EB FB               [12] 1685 	mov	r3,a
      0002EC A3               [24] 1686 	inc	dptr
      0002ED 12r00r00         [24] 1687 	lcall	__gptrget
      0002F0 FC               [12] 1688 	mov	r4,a
      0002F1 E5 81            [12] 1689 	mov	a,sp
      0002F3 24 F9            [12] 1690 	add	a,#0xf9
      0002F5 F8               [12] 1691 	mov	r0,a
      0002F6 86 06            [24] 1692 	mov	ar6,@r0
      0002F8 08               [12] 1693 	inc	r0
      0002F9 E6               [12] 1694 	mov	a,@r0
      0002FA 54 03            [12] 1695 	anl	a,#0x03
      0002FC A2 E0            [12] 1696 	mov	c,acc.0
      0002FE CE               [12] 1697 	xch	a,r6
      0002FF 13               [12] 1698 	rrc	a
      000300 CE               [12] 1699 	xch	a,r6
      000301 13               [12] 1700 	rrc	a
      000302 A2 E0            [12] 1701 	mov	c,acc.0
      000304 CE               [12] 1702 	xch	a,r6
      000305 13               [12] 1703 	rrc	a
      000306 CE               [12] 1704 	xch	a,r6
      000307 13               [12] 1705 	rrc	a
      000308 CE               [12] 1706 	xch	a,r6
      000309 FF               [12] 1707 	mov	r7,a
      00030A C0 04            [24] 1708 	push	ar4
      00030C C0 03            [24] 1709 	push	ar3
      00030E C0 02            [24] 1710 	push	ar2
      000310 E5 81            [12] 1711 	mov	a,sp
      000312 24 F1            [12] 1712 	add	a,#0xf1
      000314 F8               [12] 1713 	mov	r0,a
      000315 E6               [12] 1714 	mov	a,@r0
      000316 C0 E0            [24] 1715 	push	acc
      000318 08               [12] 1716 	inc	r0
      000319 E6               [12] 1717 	mov	a,@r0
      00031A C0 E0            [24] 1718 	push	acc
      00031C E5 81            [12] 1719 	mov	a,sp
      00031E 24 F1            [12] 1720 	add	a,#0xf1
      000320 F8               [12] 1721 	mov	r0,a
      000321 E6               [12] 1722 	mov	a,@r0
      000322 C0 E0            [24] 1723 	push	acc
      000324 08               [12] 1724 	inc	r0
      000325 E6               [12] 1725 	mov	a,@r0
      000326 C0 E0            [24] 1726 	push	acc
      000328 08               [12] 1727 	inc	r0
      000329 E6               [12] 1728 	mov	a,@r0
      00032A C0 E0            [24] 1729 	push	acc
      00032C 74 02            [12] 1730 	mov	a,#0x02
      00032E C0 E0            [24] 1731 	push	acc
      000330 E4               [12] 1732 	clr	a
      000331 C0 E0            [24] 1733 	push	acc
      000333 C0 06            [24] 1734 	push	ar6
      000335 C0 07            [24] 1735 	push	ar7
      000337 C0 02            [24] 1736 	push	ar2
      000339 C0 03            [24] 1737 	push	ar3
      00033B C0 04            [24] 1738 	push	ar4
      00033D E5 81            [12] 1739 	mov	a,sp
      00033F 24 EF            [12] 1740 	add	a,#0xef
      000341 F8               [12] 1741 	mov	r0,a
      000342 86 82            [24] 1742 	mov	dpl,@r0
      000344 08               [12] 1743 	inc	r0
      000345 86 83            [24] 1744 	mov	dph,@r0
      000347 08               [12] 1745 	inc	r0
      000348 86 F0            [24] 1746 	mov	b,@r0
      00034A D0 02            [24] 1747 	pop	ar2
      00034C D0 01            [24] 1748 	pop	ar1
      00034E D0 00            [24] 1749 	pop	ar0
      000350 12r00r00         [24] 1750 	lcall	__sdcc_banked_call
      000353 E5 81            [12] 1751 	mov	a,sp
      000355 24 F7            [12] 1752 	add	a,#0xf7
      000357 F5 81            [12] 1753 	mov	sp,a
      000359 D0 02            [24] 1754 	pop	ar2
      00035B D0 03            [24] 1755 	pop	ar3
      00035D D0 04            [24] 1756 	pop	ar4
      00035F 02r04r05         [24] 1757 	ljmp	00106$
      000362                       1758 00104$:
                                   1759 ;	/opt/contiki/core/net/rime/rudolph1.c:130: c->cb->write_chunk(c, chunk * RUDOLPH1_DATASIZE,
      000362 A8 81            [24] 1760 	mov	r0,sp
      000364 18               [12] 1761 	dec	r0
      000365 18               [12] 1762 	dec	r0
      000366 74 8C            [12] 1763 	mov	a,#0x8C
      000368 26               [12] 1764 	add	a,@r0
      000369 FD               [12] 1765 	mov	r5,a
      00036A E4               [12] 1766 	clr	a
      00036B 08               [12] 1767 	inc	r0
      00036C 36               [12] 1768 	addc	a,@r0
      00036D FE               [12] 1769 	mov	r6,a
      00036E 08               [12] 1770 	inc	r0
      00036F 86 07            [24] 1771 	mov	ar7,@r0
      000371 8D 82            [24] 1772 	mov	dpl,r5
      000373 8E 83            [24] 1773 	mov	dph,r6
      000375 8F F0            [24] 1774 	mov	b,r7
      000377 12r00r00         [24] 1775 	lcall	__gptrget
      00037A FD               [12] 1776 	mov	r5,a
      00037B A3               [24] 1777 	inc	dptr
      00037C 12r00r00         [24] 1778 	lcall	__gptrget
      00037F FE               [12] 1779 	mov	r6,a
      000380 A3               [24] 1780 	inc	dptr
      000381 12r00r00         [24] 1781 	lcall	__gptrget
      000384 FF               [12] 1782 	mov	r7,a
      000385 8D 82            [24] 1783 	mov	dpl,r5
      000387 8E 83            [24] 1784 	mov	dph,r6
      000389 8F F0            [24] 1785 	mov	b,r7
      00038B 12r00r00         [24] 1786 	lcall	__gptrget
      00038E FD               [12] 1787 	mov	r5,a
      00038F A3               [24] 1788 	inc	dptr
      000390 12r00r00         [24] 1789 	lcall	__gptrget
      000393 FE               [12] 1790 	mov	r6,a
      000394 A3               [24] 1791 	inc	dptr
      000395 12r00r00         [24] 1792 	lcall	__gptrget
      000398 FF               [12] 1793 	mov	r7,a
      000399 E5 81            [12] 1794 	mov	a,sp
      00039B 24 F9            [12] 1795 	add	a,#0xf9
      00039D F8               [12] 1796 	mov	r0,a
      00039E 86 03            [24] 1797 	mov	ar3,@r0
      0003A0 08               [12] 1798 	inc	r0
      0003A1 E6               [12] 1799 	mov	a,@r0
      0003A2 54 03            [12] 1800 	anl	a,#0x03
      0003A4 A2 E0            [12] 1801 	mov	c,acc.0
      0003A6 CB               [12] 1802 	xch	a,r3
      0003A7 13               [12] 1803 	rrc	a
      0003A8 CB               [12] 1804 	xch	a,r3
      0003A9 13               [12] 1805 	rrc	a
      0003AA A2 E0            [12] 1806 	mov	c,acc.0
      0003AC CB               [12] 1807 	xch	a,r3
      0003AD 13               [12] 1808 	rrc	a
      0003AE CB               [12] 1809 	xch	a,r3
      0003AF 13               [12] 1810 	rrc	a
      0003B0 CB               [12] 1811 	xch	a,r3
      0003B1 FC               [12] 1812 	mov	r4,a
      0003B2 C0 07            [24] 1813 	push	ar7
      0003B4 C0 06            [24] 1814 	push	ar6
      0003B6 C0 05            [24] 1815 	push	ar5
      0003B8 E5 81            [12] 1816 	mov	a,sp
      0003BA 24 F1            [12] 1817 	add	a,#0xf1
      0003BC F8               [12] 1818 	mov	r0,a
      0003BD E6               [12] 1819 	mov	a,@r0
      0003BE C0 E0            [24] 1820 	push	acc
      0003C0 08               [12] 1821 	inc	r0
      0003C1 E6               [12] 1822 	mov	a,@r0
      0003C2 C0 E0            [24] 1823 	push	acc
      0003C4 E5 81            [12] 1824 	mov	a,sp
      0003C6 24 F1            [12] 1825 	add	a,#0xf1
      0003C8 F8               [12] 1826 	mov	r0,a
      0003C9 E6               [12] 1827 	mov	a,@r0
      0003CA C0 E0            [24] 1828 	push	acc
      0003CC 08               [12] 1829 	inc	r0
      0003CD E6               [12] 1830 	mov	a,@r0
      0003CE C0 E0            [24] 1831 	push	acc
      0003D0 08               [12] 1832 	inc	r0
      0003D1 E6               [12] 1833 	mov	a,@r0
      0003D2 C0 E0            [24] 1834 	push	acc
      0003D4 E4               [12] 1835 	clr	a
      0003D5 C0 E0            [24] 1836 	push	acc
      0003D7 C0 E0            [24] 1837 	push	acc
      0003D9 C0 03            [24] 1838 	push	ar3
      0003DB C0 04            [24] 1839 	push	ar4
      0003DD C0 05            [24] 1840 	push	ar5
      0003DF C0 06            [24] 1841 	push	ar6
      0003E1 C0 07            [24] 1842 	push	ar7
      0003E3 E5 81            [12] 1843 	mov	a,sp
      0003E5 24 EF            [12] 1844 	add	a,#0xef
      0003E7 F8               [12] 1845 	mov	r0,a
      0003E8 86 82            [24] 1846 	mov	dpl,@r0
      0003EA 08               [12] 1847 	inc	r0
      0003EB 86 83            [24] 1848 	mov	dph,@r0
      0003ED 08               [12] 1849 	inc	r0
      0003EE 86 F0            [24] 1850 	mov	b,@r0
      0003F0 D0 02            [24] 1851 	pop	ar2
      0003F2 D0 01            [24] 1852 	pop	ar1
      0003F4 D0 00            [24] 1853 	pop	ar0
      0003F6 12r00r00         [24] 1854 	lcall	__sdcc_banked_call
      0003F9 E5 81            [12] 1855 	mov	a,sp
      0003FB 24 F7            [12] 1856 	add	a,#0xf7
      0003FD F5 81            [12] 1857 	mov	sp,a
      0003FF D0 05            [24] 1858 	pop	ar5
      000401 D0 06            [24] 1859 	pop	ar6
      000403 D0 07            [24] 1860 	pop	ar7
      000405                       1861 00106$:
      000405 15 81            [12] 1862 	dec	sp
      000407 15 81            [12] 1863 	dec	sp
      000409 15 81            [12] 1864 	dec	sp
      00040B 02r00r00         [24] 1865 	ljmp	__sdcc_banked_ret
                                   1866 ;------------------------------------------------------------
                                   1867 ;Allocation info for local variables in function 'send_nack'
                                   1868 ;------------------------------------------------------------
                                   1869 ;c                         Allocated to stack - sp -5
                                   1870 ;hdr                       Allocated to stack - sp -2
                                   1871 ;------------------------------------------------------------
                                   1872 ;	/opt/contiki/core/net/rime/rudolph1.c:136: send_nack(struct rudolph1_conn *c)
                                   1873 ;	-----------------------------------------
                                   1874 ;	 function send_nack
                                   1875 ;	-----------------------------------------
      00040E                       1876 _send_nack:
      00040E C0 82            [24] 1877 	push	dpl
      000410 C0 83            [24] 1878 	push	dph
      000412 C0 F0            [24] 1879 	push	b
      000414 05 81            [12] 1880 	inc	sp
      000416 05 81            [12] 1881 	inc	sp
      000418 05 81            [12] 1882 	inc	sp
                                   1883 ;	/opt/contiki/core/net/rime/rudolph1.c:139: packetbuf_clear();
      00041A 78r00            [12] 1884 	mov	r0,#_packetbuf_clear
      00041C 79s00            [12] 1885 	mov	r1,#(_packetbuf_clear >> 8)
      00041E 7As00            [12] 1886 	mov	r2,#(_packetbuf_clear >> 16)
      000420 12r00r00         [24] 1887 	lcall	__sdcc_banked_call
                                   1888 ;	/opt/contiki/core/net/rime/rudolph1.c:140: packetbuf_hdralloc(sizeof(struct rudolph1_hdr));
      000423 90 00 04         [24] 1889 	mov	dptr,#0x0004
      000426 78r00            [12] 1890 	mov	r0,#_packetbuf_hdralloc
      000428 79s00            [12] 1891 	mov	r1,#(_packetbuf_hdralloc >> 8)
      00042A 7As00            [12] 1892 	mov	r2,#(_packetbuf_hdralloc >> 16)
      00042C 12r00r00         [24] 1893 	lcall	__sdcc_banked_call
                                   1894 ;	/opt/contiki/core/net/rime/rudolph1.c:141: hdr = packetbuf_hdrptr();
      00042F 78r00            [12] 1895 	mov	r0,#_packetbuf_hdrptr
      000431 79s00            [12] 1896 	mov	r1,#(_packetbuf_hdrptr >> 8)
      000433 7As00            [12] 1897 	mov	r2,#(_packetbuf_hdrptr >> 16)
      000435 12r00r00         [24] 1898 	lcall	__sdcc_banked_call
      000438 AA 82            [24] 1899 	mov	r2,dpl
      00043A AB 83            [24] 1900 	mov	r3,dph
      00043C AC F0            [24] 1901 	mov	r4,b
      00043E A8 81            [24] 1902 	mov	r0,sp
      000440 18               [12] 1903 	dec	r0
      000441 18               [12] 1904 	dec	r0
      000442 A6 02            [24] 1905 	mov	@r0,ar2
      000444 08               [12] 1906 	inc	r0
      000445 A6 03            [24] 1907 	mov	@r0,ar3
      000447 08               [12] 1908 	inc	r0
      000448 A6 04            [24] 1909 	mov	@r0,ar4
                                   1910 ;	/opt/contiki/core/net/rime/rudolph1.c:143: hdr->type = TYPE_NACK;
      00044A A8 81            [24] 1911 	mov	r0,sp
      00044C 18               [12] 1912 	dec	r0
      00044D 18               [12] 1913 	dec	r0
      00044E 86 82            [24] 1914 	mov	dpl,@r0
      000450 08               [12] 1915 	inc	r0
      000451 86 83            [24] 1916 	mov	dph,@r0
      000453 08               [12] 1917 	inc	r0
      000454 86 F0            [24] 1918 	mov	b,@r0
      000456 74 01            [12] 1919 	mov	a,#0x01
      000458 12r00r00         [24] 1920 	lcall	__gptrput
                                   1921 ;	/opt/contiki/core/net/rime/rudolph1.c:144: hdr->version = c->version;
      00045B A8 81            [24] 1922 	mov	r0,sp
      00045D 18               [12] 1923 	dec	r0
      00045E 18               [12] 1924 	dec	r0
      00045F 26               [12] 1925 	add	a,@r0
      000460 FD               [12] 1926 	mov	r5,a
      000461 E4               [12] 1927 	clr	a
      000462 08               [12] 1928 	inc	r0
      000463 36               [12] 1929 	addc	a,@r0
      000464 FE               [12] 1930 	mov	r6,a
      000465 08               [12] 1931 	inc	r0
      000466 86 07            [24] 1932 	mov	ar7,@r0
      000468 E5 81            [12] 1933 	mov	a,sp
      00046A 24 FB            [12] 1934 	add	a,#0xfb
      00046C F8               [12] 1935 	mov	r0,a
      00046D 74 AB            [12] 1936 	mov	a,#0xAB
      00046F 26               [12] 1937 	add	a,@r0
      000470 FA               [12] 1938 	mov	r2,a
      000471 E4               [12] 1939 	clr	a
      000472 08               [12] 1940 	inc	r0
      000473 36               [12] 1941 	addc	a,@r0
      000474 FB               [12] 1942 	mov	r3,a
      000475 08               [12] 1943 	inc	r0
      000476 86 04            [24] 1944 	mov	ar4,@r0
      000478 8A 82            [24] 1945 	mov	dpl,r2
      00047A 8B 83            [24] 1946 	mov	dph,r3
      00047C 8C F0            [24] 1947 	mov	b,r4
      00047E 12r00r00         [24] 1948 	lcall	__gptrget
      000481 8D 82            [24] 1949 	mov	dpl,r5
      000483 8E 83            [24] 1950 	mov	dph,r6
      000485 8F F0            [24] 1951 	mov	b,r7
      000487 12r00r00         [24] 1952 	lcall	__gptrput
                                   1953 ;	/opt/contiki/core/net/rime/rudolph1.c:145: hdr->chunk = c->chunk;
      00048A A8 81            [24] 1954 	mov	r0,sp
      00048C 18               [12] 1955 	dec	r0
      00048D 18               [12] 1956 	dec	r0
      00048E 74 02            [12] 1957 	mov	a,#0x02
      000490 26               [12] 1958 	add	a,@r0
      000491 FD               [12] 1959 	mov	r5,a
      000492 E4               [12] 1960 	clr	a
      000493 08               [12] 1961 	inc	r0
      000494 36               [12] 1962 	addc	a,@r0
      000495 FE               [12] 1963 	mov	r6,a
      000496 08               [12] 1964 	inc	r0
      000497 86 07            [24] 1965 	mov	ar7,@r0
      000499 E5 81            [12] 1966 	mov	a,sp
      00049B 24 FB            [12] 1967 	add	a,#0xfb
      00049D F8               [12] 1968 	mov	r0,a
      00049E 74 A7            [12] 1969 	mov	a,#0xA7
      0004A0 26               [12] 1970 	add	a,@r0
      0004A1 FA               [12] 1971 	mov	r2,a
      0004A2 E4               [12] 1972 	clr	a
      0004A3 08               [12] 1973 	inc	r0
      0004A4 36               [12] 1974 	addc	a,@r0
      0004A5 FB               [12] 1975 	mov	r3,a
      0004A6 08               [12] 1976 	inc	r0
      0004A7 86 04            [24] 1977 	mov	ar4,@r0
      0004A9 8A 82            [24] 1978 	mov	dpl,r2
      0004AB 8B 83            [24] 1979 	mov	dph,r3
      0004AD 8C F0            [24] 1980 	mov	b,r4
      0004AF 12r00r00         [24] 1981 	lcall	__gptrget
      0004B2 FA               [12] 1982 	mov	r2,a
      0004B3 A3               [24] 1983 	inc	dptr
      0004B4 12r00r00         [24] 1984 	lcall	__gptrget
      0004B7 FB               [12] 1985 	mov	r3,a
      0004B8 8D 82            [24] 1986 	mov	dpl,r5
      0004BA 8E 83            [24] 1987 	mov	dph,r6
      0004BC 8F F0            [24] 1988 	mov	b,r7
      0004BE EA               [12] 1989 	mov	a,r2
      0004BF 12r00r00         [24] 1990 	lcall	__gptrput
      0004C2 A3               [24] 1991 	inc	dptr
      0004C3 EB               [12] 1992 	mov	a,r3
      0004C4 12r00r00         [24] 1993 	lcall	__gptrput
                                   1994 ;	/opt/contiki/core/net/rime/rudolph1.c:150: ipolite_send(&c->ipolite, NACK_TIMEOUT, sizeof(struct rudolph1_hdr));
      0004C7 E5 81            [12] 1995 	mov	a,sp
      0004C9 24 FB            [12] 1996 	add	a,#0xfb
      0004CB F8               [12] 1997 	mov	r0,a
      0004CC 74 5E            [12] 1998 	mov	a,#0x5E
      0004CE 26               [12] 1999 	add	a,@r0
      0004CF FD               [12] 2000 	mov	r5,a
      0004D0 E4               [12] 2001 	clr	a
      0004D1 08               [12] 2002 	inc	r0
      0004D2 36               [12] 2003 	addc	a,@r0
      0004D3 FE               [12] 2004 	mov	r6,a
      0004D4 08               [12] 2005 	inc	r0
      0004D5 86 07            [24] 2006 	mov	ar7,@r0
      0004D7 74 04            [12] 2007 	mov	a,#0x04
      0004D9 C0 E0            [24] 2008 	push	acc
      0004DB 74 20            [12] 2009 	mov	a,#0x20
      0004DD C0 E0            [24] 2010 	push	acc
      0004DF E4               [12] 2011 	clr	a
      0004E0 C0 E0            [24] 2012 	push	acc
      0004E2 8D 82            [24] 2013 	mov	dpl,r5
      0004E4 8E 83            [24] 2014 	mov	dph,r6
      0004E6 8F F0            [24] 2015 	mov	b,r7
      0004E8 78r00            [12] 2016 	mov	r0,#_ipolite_send
      0004EA 79s00            [12] 2017 	mov	r1,#(_ipolite_send >> 8)
      0004EC 7As00            [12] 2018 	mov	r2,#(_ipolite_send >> 16)
      0004EE 12r00r00         [24] 2019 	lcall	__sdcc_banked_call
      0004F1 15 81            [12] 2020 	dec	sp
      0004F3 15 81            [12] 2021 	dec	sp
      0004F5 15 81            [12] 2022 	dec	sp
      0004F7 E5 81            [12] 2023 	mov	a,sp
      0004F9 24 FA            [12] 2024 	add	a,#0xFA
      0004FB F5 81            [12] 2025 	mov	sp,a
      0004FD 02r00r00         [24] 2026 	ljmp	__sdcc_banked_ret
                                   2027 ;------------------------------------------------------------
                                   2028 ;Allocation info for local variables in function 'handle_data'
                                   2029 ;------------------------------------------------------------
                                   2030 ;p                         Allocated to stack - sp -20
                                   2031 ;c                         Allocated to stack - sp -14
                                   2032 ;sloc0                     Allocated to stack - sp -8
                                   2033 ;sloc1                     Allocated to stack - sp -11
                                   2034 ;sloc2                     Allocated to stack - sp -7
                                   2035 ;sloc3                     Allocated to stack - sp -4
                                   2036 ;sloc4                     Allocated to stack - sp -2
                                   2037 ;------------------------------------------------------------
                                   2038 ;	/opt/contiki/core/net/rime/rudolph1.c:154: handle_data(struct rudolph1_conn *c, struct rudolph1_datapacket *p)
                                   2039 ;	-----------------------------------------
                                   2040 ;	 function handle_data
                                   2041 ;	-----------------------------------------
      000500                       2042 _handle_data:
      000500 C0 82            [24] 2043 	push	dpl
      000502 C0 83            [24] 2044 	push	dph
      000504 C0 F0            [24] 2045 	push	b
      000506 E5 81            [12] 2046 	mov	a,sp
      000508 24 0C            [12] 2047 	add	a,#0x0C
                                   2048 ;	/opt/contiki/core/net/rime/rudolph1.c:156: if(LT(c->version, p->h.version)) {
      00050A F5 81            [12] 2049 	mov	sp,a
      00050C 24 F2            [12] 2050 	add	a,#0xf2
      00050E F8               [12] 2051 	mov	r0,a
      00050F 74 AB            [12] 2052 	mov	a,#0xAB
      000511 26               [12] 2053 	add	a,@r0
      000512 FA               [12] 2054 	mov	r2,a
      000513 E4               [12] 2055 	clr	a
      000514 08               [12] 2056 	inc	r0
      000515 36               [12] 2057 	addc	a,@r0
      000516 FB               [12] 2058 	mov	r3,a
      000517 08               [12] 2059 	inc	r0
      000518 86 04            [24] 2060 	mov	ar4,@r0
      00051A 8A 82            [24] 2061 	mov	dpl,r2
      00051C 8B 83            [24] 2062 	mov	dph,r3
      00051E 8C F0            [24] 2063 	mov	b,r4
      000520 E5 81            [12] 2064 	mov	a,sp
      000522 24 F8            [12] 2065 	add	a,#0xf8
      000524 F8               [12] 2066 	mov	r0,a
      000525 12r00r00         [24] 2067 	lcall	__gptrget
      000528 F6               [12] 2068 	mov	@r0,a
      000529 E5 81            [12] 2069 	mov	a,sp
      00052B 24 EC            [12] 2070 	add	a,#0xec
      00052D F8               [12] 2071 	mov	r0,a
      00052E E5 81            [12] 2072 	mov	a,sp
      000530 24 F5            [12] 2073 	add	a,#0xf5
      000532 F9               [12] 2074 	mov	r1,a
      000533 E6               [12] 2075 	mov	a,@r0
      000534 F7               [12] 2076 	mov	@r1,a
      000535 08               [12] 2077 	inc	r0
      000536 09               [12] 2078 	inc	r1
      000537 E6               [12] 2079 	mov	a,@r0
      000538 F7               [12] 2080 	mov	@r1,a
      000539 08               [12] 2081 	inc	r0
      00053A 09               [12] 2082 	inc	r1
      00053B E6               [12] 2083 	mov	a,@r0
      00053C F7               [12] 2084 	mov	@r1,a
      00053D E5 81            [12] 2085 	mov	a,sp
      00053F 24 F5            [12] 2086 	add	a,#0xf5
      000541 F8               [12] 2087 	mov	r0,a
      000542 74 01            [12] 2088 	mov	a,#0x01
      000544 26               [12] 2089 	add	a,@r0
      000545 FD               [12] 2090 	mov	r5,a
      000546 E4               [12] 2091 	clr	a
      000547 08               [12] 2092 	inc	r0
      000548 36               [12] 2093 	addc	a,@r0
      000549 FE               [12] 2094 	mov	r6,a
      00054A 08               [12] 2095 	inc	r0
      00054B 86 07            [24] 2096 	mov	ar7,@r0
      00054D 8D 82            [24] 2097 	mov	dpl,r5
      00054F 8E 83            [24] 2098 	mov	dph,r6
      000551 8F F0            [24] 2099 	mov	b,r7
      000553 12r00r00         [24] 2100 	lcall	__gptrget
      000556 FF               [12] 2101 	mov	r7,a
      000557 E5 81            [12] 2102 	mov	a,sp
      000559 24 F8            [12] 2103 	add	a,#0xf8
      00055B F8               [12] 2104 	mov	r0,a
      00055C E6               [12] 2105 	mov	a,@r0
      00055D C3               [12] 2106 	clr	c
      00055E 9F               [12] 2107 	subb	a,r7
      00055F FE               [12] 2108 	mov	r6,a
      000560 20 E7 03         [24] 2109 	jb	acc.7,00142$
      000563 02r06r5E         [24] 2110 	ljmp	00117$
      000566                       2111 00142$:
                                   2112 ;	/opt/contiki/core/net/rime/rudolph1.c:160: c->version = p->h.version;
      000566 8A 82            [24] 2113 	mov	dpl,r2
      000568 8B 83            [24] 2114 	mov	dph,r3
      00056A 8C F0            [24] 2115 	mov	b,r4
      00056C EF               [12] 2116 	mov	a,r7
      00056D 12r00r00         [24] 2117 	lcall	__gptrput
                                   2118 ;	/opt/contiki/core/net/rime/rudolph1.c:161: c->highest_chunk_heard = c->chunk = 0;
      000570 E5 81            [12] 2119 	mov	a,sp
      000572 24 F2            [12] 2120 	add	a,#0xf2
      000574 F8               [12] 2121 	mov	r0,a
      000575 74 A9            [12] 2122 	mov	a,#0xA9
      000577 26               [12] 2123 	add	a,@r0
      000578 FF               [12] 2124 	mov	r7,a
      000579 E4               [12] 2125 	clr	a
      00057A 08               [12] 2126 	inc	r0
      00057B 36               [12] 2127 	addc	a,@r0
      00057C FD               [12] 2128 	mov	r5,a
      00057D 08               [12] 2129 	inc	r0
      00057E 86 04            [24] 2130 	mov	ar4,@r0
      000580 E5 81            [12] 2131 	mov	a,sp
      000582 24 F2            [12] 2132 	add	a,#0xf2
      000584 F8               [12] 2133 	mov	r0,a
      000585 74 A7            [12] 2134 	mov	a,#0xA7
      000587 26               [12] 2135 	add	a,@r0
      000588 FA               [12] 2136 	mov	r2,a
      000589 E4               [12] 2137 	clr	a
      00058A 08               [12] 2138 	inc	r0
      00058B 36               [12] 2139 	addc	a,@r0
      00058C FB               [12] 2140 	mov	r3,a
      00058D 08               [12] 2141 	inc	r0
      00058E 86 06            [24] 2142 	mov	ar6,@r0
      000590 8A 82            [24] 2143 	mov	dpl,r2
      000592 8B 83            [24] 2144 	mov	dph,r3
      000594 8E F0            [24] 2145 	mov	b,r6
      000596 E4               [12] 2146 	clr	a
      000597 12r00r00         [24] 2147 	lcall	__gptrput
      00059A A3               [24] 2148 	inc	dptr
      00059B 12r00r00         [24] 2149 	lcall	__gptrput
      00059E 8F 82            [24] 2150 	mov	dpl,r7
      0005A0 8D 83            [24] 2151 	mov	dph,r5
      0005A2 8C F0            [24] 2152 	mov	b,r4
      0005A4 12r00r00         [24] 2153 	lcall	__gptrput
      0005A7 A3               [24] 2154 	inc	dptr
      0005A8 12r00r00         [24] 2155 	lcall	__gptrput
                                   2156 ;	/opt/contiki/core/net/rime/rudolph1.c:162: if(p->h.chunk != 0) {
      0005AB E5 81            [12] 2157 	mov	a,sp
      0005AD 24 F5            [12] 2158 	add	a,#0xf5
      0005AF F8               [12] 2159 	mov	r0,a
      0005B0 74 02            [12] 2160 	mov	a,#0x02
      0005B2 26               [12] 2161 	add	a,@r0
      0005B3 FC               [12] 2162 	mov	r4,a
      0005B4 E4               [12] 2163 	clr	a
      0005B5 08               [12] 2164 	inc	r0
      0005B6 36               [12] 2165 	addc	a,@r0
      0005B7 FD               [12] 2166 	mov	r5,a
      0005B8 08               [12] 2167 	inc	r0
      0005B9 86 06            [24] 2168 	mov	ar6,@r0
      0005BB 8C 82            [24] 2169 	mov	dpl,r4
      0005BD 8D 83            [24] 2170 	mov	dph,r5
      0005BF 8E F0            [24] 2171 	mov	b,r6
      0005C1 12r00r00         [24] 2172 	lcall	__gptrget
      0005C4 FC               [12] 2173 	mov	r4,a
      0005C5 A3               [24] 2174 	inc	dptr
      0005C6 12r00r00         [24] 2175 	lcall	__gptrget
      0005C9 FD               [12] 2176 	mov	r5,a
      0005CA 4C               [12] 2177 	orl	a,r4
      0005CB 60 19            [24] 2178 	jz	00102$
                                   2179 ;	/opt/contiki/core/net/rime/rudolph1.c:163: send_nack(c);
      0005CD E5 81            [12] 2180 	mov	a,sp
      0005CF 24 F2            [12] 2181 	add	a,#0xf2
      0005D1 F8               [12] 2182 	mov	r0,a
      0005D2 86 82            [24] 2183 	mov	dpl,@r0
      0005D4 08               [12] 2184 	inc	r0
      0005D5 86 83            [24] 2185 	mov	dph,@r0
      0005D7 08               [12] 2186 	inc	r0
      0005D8 86 F0            [24] 2187 	mov	b,@r0
      0005DA 78r0E            [12] 2188 	mov	r0,#_send_nack
      0005DC 79s04            [12] 2189 	mov	r1,#(_send_nack >> 8)
      0005DE 7As00            [12] 2190 	mov	r2,#(_send_nack >> 16)
      0005E0 12r00r00         [24] 2191 	lcall	__sdcc_banked_call
      0005E3 02r08rA0         [24] 2192 	ljmp	00119$
      0005E6                       2193 00102$:
                                   2194 ;	/opt/contiki/core/net/rime/rudolph1.c:165: write_data(c, 0, p->data, p->datalen);
      0005E6 E5 81            [12] 2195 	mov	a,sp
      0005E8 24 F5            [12] 2196 	add	a,#0xf5
      0005EA F8               [12] 2197 	mov	r0,a
      0005EB 74 04            [12] 2198 	mov	a,#0x04
      0005ED 26               [12] 2199 	add	a,@r0
      0005EE FC               [12] 2200 	mov	r4,a
      0005EF E4               [12] 2201 	clr	a
      0005F0 08               [12] 2202 	inc	r0
      0005F1 36               [12] 2203 	addc	a,@r0
      0005F2 FD               [12] 2204 	mov	r5,a
      0005F3 08               [12] 2205 	inc	r0
      0005F4 86 06            [24] 2206 	mov	ar6,@r0
      0005F6 8C 82            [24] 2207 	mov	dpl,r4
      0005F8 8D 83            [24] 2208 	mov	dph,r5
      0005FA 8E F0            [24] 2209 	mov	b,r6
      0005FC 12r00r00         [24] 2210 	lcall	__gptrget
      0005FF FC               [12] 2211 	mov	r4,a
      000600 7E 00            [12] 2212 	mov	r6,#0x00
      000602 E5 81            [12] 2213 	mov	a,sp
      000604 24 F5            [12] 2214 	add	a,#0xf5
      000606 F8               [12] 2215 	mov	r0,a
      000607 74 05            [12] 2216 	mov	a,#0x05
      000609 26               [12] 2217 	add	a,@r0
      00060A FA               [12] 2218 	mov	r2,a
      00060B E4               [12] 2219 	clr	a
      00060C 08               [12] 2220 	inc	r0
      00060D 36               [12] 2221 	addc	a,@r0
      00060E FB               [12] 2222 	mov	r3,a
      00060F 08               [12] 2223 	inc	r0
      000610 86 05            [24] 2224 	mov	ar5,@r0
      000612 C0 04            [24] 2225 	push	ar4
      000614 C0 06            [24] 2226 	push	ar6
      000616 C0 02            [24] 2227 	push	ar2
      000618 C0 03            [24] 2228 	push	ar3
      00061A C0 05            [24] 2229 	push	ar5
      00061C E4               [12] 2230 	clr	a
      00061D C0 E0            [24] 2231 	push	acc
      00061F C0 E0            [24] 2232 	push	acc
      000621 E5 81            [12] 2233 	mov	a,sp
      000623 24 EB            [12] 2234 	add	a,#0xeb
      000625 F8               [12] 2235 	mov	r0,a
      000626 86 82            [24] 2236 	mov	dpl,@r0
      000628 08               [12] 2237 	inc	r0
      000629 86 83            [24] 2238 	mov	dph,@r0
      00062B 08               [12] 2239 	inc	r0
      00062C 86 F0            [24] 2240 	mov	b,@r0
      00062E 78r0E            [12] 2241 	mov	r0,#_write_data
      000630 79s02            [12] 2242 	mov	r1,#(_write_data >> 8)
      000632 7As00            [12] 2243 	mov	r2,#(_write_data >> 16)
      000634 12r00r00         [24] 2244 	lcall	__sdcc_banked_call
      000637 E5 81            [12] 2245 	mov	a,sp
      000639 24 F9            [12] 2246 	add	a,#0xf9
                                   2247 ;	/opt/contiki/core/net/rime/rudolph1.c:166: c->chunk = 1; /* Next chunk is 1. */
      00063B F5 81            [12] 2248 	mov	sp,a
      00063D 24 F2            [12] 2249 	add	a,#0xf2
      00063F F8               [12] 2250 	mov	r0,a
      000640 74 A7            [12] 2251 	mov	a,#0xA7
      000642 26               [12] 2252 	add	a,@r0
      000643 FC               [12] 2253 	mov	r4,a
      000644 E4               [12] 2254 	clr	a
      000645 08               [12] 2255 	inc	r0
      000646 36               [12] 2256 	addc	a,@r0
      000647 FD               [12] 2257 	mov	r5,a
      000648 08               [12] 2258 	inc	r0
      000649 86 06            [24] 2259 	mov	ar6,@r0
      00064B 8C 82            [24] 2260 	mov	dpl,r4
      00064D 8D 83            [24] 2261 	mov	dph,r5
      00064F 8E F0            [24] 2262 	mov	b,r6
      000651 74 01            [12] 2263 	mov	a,#0x01
      000653 12r00r00         [24] 2264 	lcall	__gptrput
      000656 A3               [24] 2265 	inc	dptr
      000657 E4               [12] 2266 	clr	a
      000658 12r00r00         [24] 2267 	lcall	__gptrput
      00065B 02r08rA0         [24] 2268 	ljmp	00119$
      00065E                       2269 00117$:
                                   2270 ;	/opt/contiki/core/net/rime/rudolph1.c:169: } else if(p->h.version == c->version) {
      00065E E5 81            [12] 2271 	mov	a,sp
      000660 24 F8            [12] 2272 	add	a,#0xf8
      000662 F8               [12] 2273 	mov	r0,a
      000663 E6               [12] 2274 	mov	a,@r0
      000664 B5 07 02         [24] 2275 	cjne	a,ar7,00144$
      000667 80 03            [24] 2276 	sjmp	00145$
      000669                       2277 00144$:
      000669 02r08rA0         [24] 2278 	ljmp	00119$
      00066C                       2279 00145$:
                                   2280 ;	/opt/contiki/core/net/rime/rudolph1.c:174: if(p->h.chunk == c->chunk) {
      00066C E5 81            [12] 2281 	mov	a,sp
      00066E 24 F5            [12] 2282 	add	a,#0xf5
      000670 F8               [12] 2283 	mov	r0,a
      000671 74 02            [12] 2284 	mov	a,#0x02
      000673 26               [12] 2285 	add	a,@r0
      000674 FD               [12] 2286 	mov	r5,a
      000675 E4               [12] 2287 	clr	a
      000676 08               [12] 2288 	inc	r0
      000677 36               [12] 2289 	addc	a,@r0
      000678 FE               [12] 2290 	mov	r6,a
      000679 08               [12] 2291 	inc	r0
      00067A 86 07            [24] 2292 	mov	ar7,@r0
      00067C 8D 82            [24] 2293 	mov	dpl,r5
      00067E 8E 83            [24] 2294 	mov	dph,r6
      000680 8F F0            [24] 2295 	mov	b,r7
      000682 E5 81            [12] 2296 	mov	a,sp
      000684 24 F9            [12] 2297 	add	a,#0xf9
      000686 F8               [12] 2298 	mov	r0,a
      000687 12r00r00         [24] 2299 	lcall	__gptrget
      00068A F6               [12] 2300 	mov	@r0,a
      00068B A3               [24] 2301 	inc	dptr
      00068C 12r00r00         [24] 2302 	lcall	__gptrget
      00068F 08               [12] 2303 	inc	r0
      000690 F6               [12] 2304 	mov	@r0,a
      000691 E5 81            [12] 2305 	mov	a,sp
      000693 24 F2            [12] 2306 	add	a,#0xf2
      000695 F8               [12] 2307 	mov	r0,a
      000696 74 A7            [12] 2308 	mov	a,#0xA7
      000698 26               [12] 2309 	add	a,@r0
      000699 FA               [12] 2310 	mov	r2,a
      00069A E4               [12] 2311 	clr	a
      00069B 08               [12] 2312 	inc	r0
      00069C 36               [12] 2313 	addc	a,@r0
      00069D FB               [12] 2314 	mov	r3,a
      00069E 08               [12] 2315 	inc	r0
      00069F 86 04            [24] 2316 	mov	ar4,@r0
      0006A1 8A 82            [24] 2317 	mov	dpl,r2
      0006A3 8B 83            [24] 2318 	mov	dph,r3
      0006A5 8C F0            [24] 2319 	mov	b,r4
      0006A7 12r00r00         [24] 2320 	lcall	__gptrget
      0006AA FB               [12] 2321 	mov	r3,a
      0006AB A3               [24] 2322 	inc	dptr
      0006AC 12r00r00         [24] 2323 	lcall	__gptrget
      0006AF FC               [12] 2324 	mov	r4,a
      0006B0 E5 81            [12] 2325 	mov	a,sp
      0006B2 24 F9            [12] 2326 	add	a,#0xf9
      0006B4 F8               [12] 2327 	mov	r0,a
      0006B5 E6               [12] 2328 	mov	a,@r0
      0006B6 B5 03 07         [24] 2329 	cjne	a,ar3,00146$
      0006B9 08               [12] 2330 	inc	r0
      0006BA E6               [12] 2331 	mov	a,@r0
      0006BB B5 04 02         [24] 2332 	cjne	a,ar4,00146$
      0006BE 80 03            [24] 2333 	sjmp	00147$
      0006C0                       2334 00146$:
      0006C0 02r07rEC         [24] 2335 	ljmp	00110$
      0006C3                       2336 00147$:
                                   2337 ;	/opt/contiki/core/net/rime/rudolph1.c:178: write_data(c, p->h.chunk, p->data, p->datalen);
      0006C3 C0 05            [24] 2338 	push	ar5
      0006C5 C0 06            [24] 2339 	push	ar6
      0006C7 C0 07            [24] 2340 	push	ar7
      0006C9 E5 81            [12] 2341 	mov	a,sp
      0006CB 24 F2            [12] 2342 	add	a,#0xf2
      0006CD F8               [12] 2343 	mov	r0,a
      0006CE 74 04            [12] 2344 	mov	a,#0x04
      0006D0 26               [12] 2345 	add	a,@r0
      0006D1 FA               [12] 2346 	mov	r2,a
      0006D2 E4               [12] 2347 	clr	a
      0006D3 08               [12] 2348 	inc	r0
      0006D4 36               [12] 2349 	addc	a,@r0
      0006D5 FE               [12] 2350 	mov	r6,a
      0006D6 08               [12] 2351 	inc	r0
      0006D7 86 07            [24] 2352 	mov	ar7,@r0
      0006D9 8A 82            [24] 2353 	mov	dpl,r2
      0006DB 8E 83            [24] 2354 	mov	dph,r6
      0006DD 8F F0            [24] 2355 	mov	b,r7
      0006DF 12r00r00         [24] 2356 	lcall	__gptrget
      0006E2 FA               [12] 2357 	mov	r2,a
      0006E3 7C 00            [12] 2358 	mov	r4,#0x00
      0006E5 E5 81            [12] 2359 	mov	a,sp
      0006E7 24 F2            [12] 2360 	add	a,#0xf2
      0006E9 F8               [12] 2361 	mov	r0,a
      0006EA 74 05            [12] 2362 	mov	a,#0x05
      0006EC 26               [12] 2363 	add	a,@r0
      0006ED FD               [12] 2364 	mov	r5,a
      0006EE E4               [12] 2365 	clr	a
      0006EF 08               [12] 2366 	inc	r0
      0006F0 36               [12] 2367 	addc	a,@r0
      0006F1 FE               [12] 2368 	mov	r6,a
      0006F2 08               [12] 2369 	inc	r0
      0006F3 86 07            [24] 2370 	mov	ar7,@r0
      0006F5 C0 07            [24] 2371 	push	ar7
      0006F7 C0 06            [24] 2372 	push	ar6
      0006F9 C0 05            [24] 2373 	push	ar5
      0006FB C0 02            [24] 2374 	push	ar2
      0006FD C0 04            [24] 2375 	push	ar4
      0006FF C0 05            [24] 2376 	push	ar5
      000701 C0 06            [24] 2377 	push	ar6
      000703 C0 07            [24] 2378 	push	ar7
      000705 E5 81            [12] 2379 	mov	a,sp
      000707 24 EE            [12] 2380 	add	a,#0xee
      000709 F8               [12] 2381 	mov	r0,a
      00070A E6               [12] 2382 	mov	a,@r0
      00070B C0 E0            [24] 2383 	push	acc
      00070D 08               [12] 2384 	inc	r0
      00070E E6               [12] 2385 	mov	a,@r0
      00070F C0 E0            [24] 2386 	push	acc
      000711 E5 81            [12] 2387 	mov	a,sp
      000713 24 E5            [12] 2388 	add	a,#0xe5
      000715 F8               [12] 2389 	mov	r0,a
      000716 86 82            [24] 2390 	mov	dpl,@r0
      000718 08               [12] 2391 	inc	r0
      000719 86 83            [24] 2392 	mov	dph,@r0
      00071B 08               [12] 2393 	inc	r0
      00071C 86 F0            [24] 2394 	mov	b,@r0
      00071E 78r0E            [12] 2395 	mov	r0,#_write_data
      000720 79s02            [12] 2396 	mov	r1,#(_write_data >> 8)
      000722 7As00            [12] 2397 	mov	r2,#(_write_data >> 16)
      000724 12r00r00         [24] 2398 	lcall	__sdcc_banked_call
      000727 E5 81            [12] 2399 	mov	a,sp
      000729 24 F9            [12] 2400 	add	a,#0xf9
      00072B F5 81            [12] 2401 	mov	sp,a
      00072D D0 05            [24] 2402 	pop	ar5
      00072F D0 06            [24] 2403 	pop	ar6
      000731 D0 07            [24] 2404 	pop	ar7
                                   2405 ;	/opt/contiki/core/net/rime/rudolph1.c:179: if(c->highest_chunk_heard < c->chunk) {
      000733 E5 81            [12] 2406 	mov	a,sp
      000735 24 EF            [12] 2407 	add	a,#0xef
      000737 F8               [12] 2408 	mov	r0,a
      000738 74 A9            [12] 2409 	mov	a,#0xA9
      00073A 26               [12] 2410 	add	a,@r0
      00073B FC               [12] 2411 	mov	r4,a
      00073C E4               [12] 2412 	clr	a
      00073D 08               [12] 2413 	inc	r0
      00073E 36               [12] 2414 	addc	a,@r0
      00073F FB               [12] 2415 	mov	r3,a
      000740 08               [12] 2416 	inc	r0
      000741 86 02            [24] 2417 	mov	ar2,@r0
      000743 8C 82            [24] 2418 	mov	dpl,r4
      000745 8B 83            [24] 2419 	mov	dph,r3
      000747 8A F0            [24] 2420 	mov	b,r2
      000749 12r00r00         [24] 2421 	lcall	__gptrget
      00074C FE               [12] 2422 	mov	r6,a
      00074D A3               [24] 2423 	inc	dptr
      00074E 12r00r00         [24] 2424 	lcall	__gptrget
      000751 FF               [12] 2425 	mov	r7,a
      000752 E5 81            [12] 2426 	mov	a,sp
      000754 24 EF            [12] 2427 	add	a,#0xef
      000756 F8               [12] 2428 	mov	r0,a
      000757 E5 81            [12] 2429 	mov	a,sp
      000759 24 FB            [12] 2430 	add	a,#0xfb
      00075B F9               [12] 2431 	mov	r1,a
      00075C 74 A7            [12] 2432 	mov	a,#0xA7
      00075E 26               [12] 2433 	add	a,@r0
      00075F F7               [12] 2434 	mov	@r1,a
      000760 E4               [12] 2435 	clr	a
      000761 08               [12] 2436 	inc	r0
      000762 36               [12] 2437 	addc	a,@r0
      000763 09               [12] 2438 	inc	r1
      000764 F7               [12] 2439 	mov	@r1,a
      000765 08               [12] 2440 	inc	r0
      000766 09               [12] 2441 	inc	r1
      000767 E6               [12] 2442 	mov	a,@r0
      000768 F7               [12] 2443 	mov	@r1,a
      000769 E5 81            [12] 2444 	mov	a,sp
      00076B 24 FB            [12] 2445 	add	a,#0xfb
      00076D F8               [12] 2446 	mov	r0,a
      00076E 86 82            [24] 2447 	mov	dpl,@r0
      000770 08               [12] 2448 	inc	r0
      000771 86 83            [24] 2449 	mov	dph,@r0
      000773 08               [12] 2450 	inc	r0
      000774 86 F0            [24] 2451 	mov	b,@r0
      000776 E5 81            [12] 2452 	mov	a,sp
      000778 24 F9            [12] 2453 	add	a,#0xf9
      00077A F9               [12] 2454 	mov	r1,a
      00077B 12r00r00         [24] 2455 	lcall	__gptrget
      00077E F7               [12] 2456 	mov	@r1,a
      00077F A3               [24] 2457 	inc	dptr
      000780 12r00r00         [24] 2458 	lcall	__gptrget
      000783 09               [12] 2459 	inc	r1
      000784 F7               [12] 2460 	mov	@r1,a
      000785 E5 81            [12] 2461 	mov	a,sp
      000787 24 F9            [12] 2462 	add	a,#0xf9
      000789 F8               [12] 2463 	mov	r0,a
      00078A C3               [12] 2464 	clr	c
      00078B EE               [12] 2465 	mov	a,r6
      00078C 96               [12] 2466 	subb	a,@r0
      00078D EF               [12] 2467 	mov	a,r7
      00078E 08               [12] 2468 	inc	r0
      00078F 96               [12] 2469 	subb	a,@r0
      000790 D0 07            [24] 2470 	pop	ar7
      000792 D0 06            [24] 2471 	pop	ar6
      000794 D0 05            [24] 2472 	pop	ar5
      000796 50 15            [24] 2473 	jnc	00105$
                                   2474 ;	/opt/contiki/core/net/rime/rudolph1.c:180: c->highest_chunk_heard = c->chunk;
      000798 8C 82            [24] 2475 	mov	dpl,r4
      00079A 8B 83            [24] 2476 	mov	dph,r3
      00079C 8A F0            [24] 2477 	mov	b,r2
      00079E E5 81            [12] 2478 	mov	a,sp
      0007A0 24 FC            [12] 2479 	add	a,#0xfc
      0007A2 F8               [12] 2480 	mov	r0,a
      0007A3 E6               [12] 2481 	mov	a,@r0
      0007A4 12r00r00         [24] 2482 	lcall	__gptrput
      0007A7 A3               [24] 2483 	inc	dptr
      0007A8 08               [12] 2484 	inc	r0
      0007A9 E6               [12] 2485 	mov	a,@r0
      0007AA 12r00r00         [24] 2486 	lcall	__gptrput
      0007AD                       2487 00105$:
                                   2488 ;	/opt/contiki/core/net/rime/rudolph1.c:182: c->chunk++;
      0007AD C0 05            [24] 2489 	push	ar5
      0007AF C0 06            [24] 2490 	push	ar6
      0007B1 C0 07            [24] 2491 	push	ar7
      0007B3 E5 81            [12] 2492 	mov	a,sp
      0007B5 24 FB            [12] 2493 	add	a,#0xfb
      0007B7 F8               [12] 2494 	mov	r0,a
      0007B8 86 82            [24] 2495 	mov	dpl,@r0
      0007BA 08               [12] 2496 	inc	r0
      0007BB 86 83            [24] 2497 	mov	dph,@r0
      0007BD 08               [12] 2498 	inc	r0
      0007BE 86 F0            [24] 2499 	mov	b,@r0
      0007C0 12r00r00         [24] 2500 	lcall	__gptrget
      0007C3 FA               [12] 2501 	mov	r2,a
      0007C4 A3               [24] 2502 	inc	dptr
      0007C5 12r00r00         [24] 2503 	lcall	__gptrget
      0007C8 FF               [12] 2504 	mov	r7,a
      0007C9 0A               [12] 2505 	inc	r2
      0007CA BA 00 01         [24] 2506 	cjne	r2,#0x00,00149$
      0007CD 0F               [12] 2507 	inc	r7
      0007CE                       2508 00149$:
      0007CE E5 81            [12] 2509 	mov	a,sp
      0007D0 24 FB            [12] 2510 	add	a,#0xfb
      0007D2 F8               [12] 2511 	mov	r0,a
      0007D3 86 82            [24] 2512 	mov	dpl,@r0
      0007D5 08               [12] 2513 	inc	r0
      0007D6 86 83            [24] 2514 	mov	dph,@r0
      0007D8 08               [12] 2515 	inc	r0
      0007D9 86 F0            [24] 2516 	mov	b,@r0
      0007DB EA               [12] 2517 	mov	a,r2
      0007DC 12r00r00         [24] 2518 	lcall	__gptrput
      0007DF A3               [24] 2519 	inc	dptr
      0007E0 EF               [12] 2520 	mov	a,r7
      0007E1 12r00r00         [24] 2521 	lcall	__gptrput
      0007E4 D0 07            [24] 2522 	pop	ar7
      0007E6 D0 06            [24] 2523 	pop	ar6
      0007E8 D0 05            [24] 2524 	pop	ar5
      0007EA 80 69            [24] 2525 	sjmp	00111$
      0007EC                       2526 00110$:
                                   2527 ;	/opt/contiki/core/net/rime/rudolph1.c:183: } else if(p->h.chunk > c->chunk) {
      0007EC E5 81            [12] 2528 	mov	a,sp
      0007EE 24 F9            [12] 2529 	add	a,#0xf9
      0007F0 F8               [12] 2530 	mov	r0,a
      0007F1 C3               [12] 2531 	clr	c
      0007F2 EB               [12] 2532 	mov	a,r3
      0007F3 96               [12] 2533 	subb	a,@r0
      0007F4 EC               [12] 2534 	mov	a,r4
      0007F5 08               [12] 2535 	inc	r0
      0007F6 96               [12] 2536 	subb	a,@r0
      0007F7 50 5C            [24] 2537 	jnc	00111$
                                   2538 ;	/opt/contiki/core/net/rime/rudolph1.c:187: send_nack(c);
      0007F9 E5 81            [12] 2539 	mov	a,sp
      0007FB 24 F2            [12] 2540 	add	a,#0xf2
      0007FD F8               [12] 2541 	mov	r0,a
      0007FE 86 82            [24] 2542 	mov	dpl,@r0
      000800 08               [12] 2543 	inc	r0
      000801 86 83            [24] 2544 	mov	dph,@r0
      000803 08               [12] 2545 	inc	r0
      000804 86 F0            [24] 2546 	mov	b,@r0
      000806 C0 07            [24] 2547 	push	ar7
      000808 C0 06            [24] 2548 	push	ar6
      00080A C0 05            [24] 2549 	push	ar5
      00080C 78r0E            [12] 2550 	mov	r0,#_send_nack
      00080E 79s04            [12] 2551 	mov	r1,#(_send_nack >> 8)
      000810 7As00            [12] 2552 	mov	r2,#(_send_nack >> 16)
      000812 12r00r00         [24] 2553 	lcall	__sdcc_banked_call
      000815 D0 05            [24] 2554 	pop	ar5
      000817 D0 06            [24] 2555 	pop	ar6
      000819 D0 07            [24] 2556 	pop	ar7
                                   2557 ;	/opt/contiki/core/net/rime/rudolph1.c:188: c->highest_chunk_heard = p->h.chunk;
      00081B E5 81            [12] 2558 	mov	a,sp
      00081D 24 F2            [12] 2559 	add	a,#0xf2
      00081F F8               [12] 2560 	mov	r0,a
      000820 A9 81            [24] 2561 	mov	r1,sp
      000822 19               [12] 2562 	dec	r1
      000823 19               [12] 2563 	dec	r1
      000824 74 A9            [12] 2564 	mov	a,#0xA9
      000826 26               [12] 2565 	add	a,@r0
      000827 F7               [12] 2566 	mov	@r1,a
      000828 E4               [12] 2567 	clr	a
      000829 08               [12] 2568 	inc	r0
      00082A 36               [12] 2569 	addc	a,@r0
      00082B 09               [12] 2570 	inc	r1
      00082C F7               [12] 2571 	mov	@r1,a
      00082D 08               [12] 2572 	inc	r0
      00082E 09               [12] 2573 	inc	r1
      00082F E6               [12] 2574 	mov	a,@r0
      000830 F7               [12] 2575 	mov	@r1,a
      000831 8D 82            [24] 2576 	mov	dpl,r5
      000833 8E 83            [24] 2577 	mov	dph,r6
      000835 8F F0            [24] 2578 	mov	b,r7
      000837 12r00r00         [24] 2579 	lcall	__gptrget
      00083A FB               [12] 2580 	mov	r3,a
      00083B A3               [24] 2581 	inc	dptr
      00083C 12r00r00         [24] 2582 	lcall	__gptrget
      00083F FC               [12] 2583 	mov	r4,a
      000840 A8 81            [24] 2584 	mov	r0,sp
      000842 18               [12] 2585 	dec	r0
      000843 18               [12] 2586 	dec	r0
      000844 86 82            [24] 2587 	mov	dpl,@r0
      000846 08               [12] 2588 	inc	r0
      000847 86 83            [24] 2589 	mov	dph,@r0
      000849 08               [12] 2590 	inc	r0
      00084A 86 F0            [24] 2591 	mov	b,@r0
      00084C EB               [12] 2592 	mov	a,r3
      00084D 12r00r00         [24] 2593 	lcall	__gptrput
      000850 A3               [24] 2594 	inc	dptr
      000851 EC               [12] 2595 	mov	a,r4
      000852 12r00r00         [24] 2596 	lcall	__gptrput
                                   2597 ;	/opt/contiki/core/net/rime/rudolph1.c:189: } else if(p->h.chunk < c->chunk) {
      000855                       2598 00111$:
                                   2599 ;	/opt/contiki/core/net/rime/rudolph1.c:196: if(c->highest_chunk_heard > p->h.chunk) {
      000855 E5 81            [12] 2600 	mov	a,sp
      000857 24 F2            [12] 2601 	add	a,#0xf2
      000859 F8               [12] 2602 	mov	r0,a
      00085A 74 A9            [12] 2603 	mov	a,#0xA9
      00085C 26               [12] 2604 	add	a,@r0
      00085D FA               [12] 2605 	mov	r2,a
      00085E E4               [12] 2606 	clr	a
      00085F 08               [12] 2607 	inc	r0
      000860 36               [12] 2608 	addc	a,@r0
      000861 FB               [12] 2609 	mov	r3,a
      000862 08               [12] 2610 	inc	r0
      000863 86 04            [24] 2611 	mov	ar4,@r0
      000865 8A 82            [24] 2612 	mov	dpl,r2
      000867 8B 83            [24] 2613 	mov	dph,r3
      000869 8C F0            [24] 2614 	mov	b,r4
      00086B 12r00r00         [24] 2615 	lcall	__gptrget
      00086E FA               [12] 2616 	mov	r2,a
      00086F A3               [24] 2617 	inc	dptr
      000870 12r00r00         [24] 2618 	lcall	__gptrget
      000873 FB               [12] 2619 	mov	r3,a
      000874 8D 82            [24] 2620 	mov	dpl,r5
      000876 8E 83            [24] 2621 	mov	dph,r6
      000878 8F F0            [24] 2622 	mov	b,r7
      00087A 12r00r00         [24] 2623 	lcall	__gptrget
      00087D FD               [12] 2624 	mov	r5,a
      00087E A3               [24] 2625 	inc	dptr
      00087F 12r00r00         [24] 2626 	lcall	__gptrget
      000882 FE               [12] 2627 	mov	r6,a
      000883 C3               [12] 2628 	clr	c
      000884 ED               [12] 2629 	mov	a,r5
      000885 9A               [12] 2630 	subb	a,r2
      000886 EE               [12] 2631 	mov	a,r6
      000887 9B               [12] 2632 	subb	a,r3
      000888 50 16            [24] 2633 	jnc	00119$
                                   2634 ;	/opt/contiki/core/net/rime/rudolph1.c:197: send_nack(c);
      00088A E5 81            [12] 2635 	mov	a,sp
      00088C 24 F2            [12] 2636 	add	a,#0xf2
      00088E F8               [12] 2637 	mov	r0,a
      00088F 86 82            [24] 2638 	mov	dpl,@r0
      000891 08               [12] 2639 	inc	r0
      000892 86 83            [24] 2640 	mov	dph,@r0
      000894 08               [12] 2641 	inc	r0
      000895 86 F0            [24] 2642 	mov	b,@r0
      000897 78r0E            [12] 2643 	mov	r0,#_send_nack
      000899 79s04            [12] 2644 	mov	r1,#(_send_nack >> 8)
      00089B 7As00            [12] 2645 	mov	r2,#(_send_nack >> 16)
      00089D 12r00r00         [24] 2646 	lcall	__sdcc_banked_call
      0008A0                       2647 00119$:
      0008A0 E5 81            [12] 2648 	mov	a,sp
      0008A2 24 F1            [12] 2649 	add	a,#0xF1
      0008A4 F5 81            [12] 2650 	mov	sp,a
      0008A6 02r00r00         [24] 2651 	ljmp	__sdcc_banked_ret
                                   2652 ;------------------------------------------------------------
                                   2653 ;Allocation info for local variables in function 'recv_trickle'
                                   2654 ;------------------------------------------------------------
                                   2655 ;trickle                   Allocated to registers r5 r6 r7 
                                   2656 ;c                         Allocated to registers r5 r6 r7 
                                   2657 ;p                         Allocated to registers r2 r3 r4 
                                   2658 ;------------------------------------------------------------
                                   2659 ;	/opt/contiki/core/net/rime/rudolph1.c:206: recv_trickle(struct trickle_conn *trickle)
                                   2660 ;	-----------------------------------------
                                   2661 ;	 function recv_trickle
                                   2662 ;	-----------------------------------------
      0008A9                       2663 _recv_trickle:
      0008A9 AD 82            [24] 2664 	mov	r5,dpl
      0008AB AE 83            [24] 2665 	mov	r6,dph
      0008AD AF F0            [24] 2666 	mov	r7,b
                                   2667 ;	/opt/contiki/core/net/rime/rudolph1.c:208: struct rudolph1_conn *c = (struct rudolph1_conn *)trickle;
                                   2668 ;	/opt/contiki/core/net/rime/rudolph1.c:209: struct rudolph1_datapacket *p = packetbuf_dataptr();
      0008AF C0 07            [24] 2669 	push	ar7
      0008B1 C0 06            [24] 2670 	push	ar6
      0008B3 C0 05            [24] 2671 	push	ar5
      0008B5 78r00            [12] 2672 	mov	r0,#_packetbuf_dataptr
      0008B7 79s00            [12] 2673 	mov	r1,#(_packetbuf_dataptr >> 8)
      0008B9 7As00            [12] 2674 	mov	r2,#(_packetbuf_dataptr >> 16)
      0008BB 12r00r00         [24] 2675 	lcall	__sdcc_banked_call
      0008BE AA 82            [24] 2676 	mov	r2,dpl
      0008C0 AB 83            [24] 2677 	mov	r3,dph
      0008C2 AC F0            [24] 2678 	mov	r4,b
      0008C4 D0 05            [24] 2679 	pop	ar5
      0008C6 D0 06            [24] 2680 	pop	ar6
      0008C8 D0 07            [24] 2681 	pop	ar7
                                   2682 ;	/opt/contiki/core/net/rime/rudolph1.c:211: if(p->h.type == TYPE_DATA) {
      0008CA 8A 82            [24] 2683 	mov	dpl,r2
      0008CC 8B 83            [24] 2684 	mov	dph,r3
      0008CE 8C F0            [24] 2685 	mov	b,r4
      0008D0 12r00r00         [24] 2686 	lcall	__gptrget
      0008D3 70 1B            [24] 2687 	jnz	00103$
                                   2688 ;	/opt/contiki/core/net/rime/rudolph1.c:215: handle_data(c, p);
      0008D5 C0 02            [24] 2689 	push	ar2
      0008D7 C0 03            [24] 2690 	push	ar3
      0008D9 C0 04            [24] 2691 	push	ar4
      0008DB 8D 82            [24] 2692 	mov	dpl,r5
      0008DD 8E 83            [24] 2693 	mov	dph,r6
      0008DF 8F F0            [24] 2694 	mov	b,r7
      0008E1 78r00            [12] 2695 	mov	r0,#_handle_data
      0008E3 79s05            [12] 2696 	mov	r1,#(_handle_data >> 8)
      0008E5 7As00            [12] 2697 	mov	r2,#(_handle_data >> 16)
      0008E7 12r00r00         [24] 2698 	lcall	__sdcc_banked_call
      0008EA 15 81            [12] 2699 	dec	sp
      0008EC 15 81            [12] 2700 	dec	sp
      0008EE 15 81            [12] 2701 	dec	sp
      0008F0                       2702 00103$:
      0008F0 02r00r00         [24] 2703 	ljmp	__sdcc_banked_ret
                                   2704 ;------------------------------------------------------------
                                   2705 ;Allocation info for local variables in function 'sent_ipolite'
                                   2706 ;------------------------------------------------------------
                                   2707 ;ipolite                   Allocated to registers 
                                   2708 ;------------------------------------------------------------
                                   2709 ;	/opt/contiki/core/net/rime/rudolph1.c:220: sent_ipolite(struct ipolite_conn *ipolite)
                                   2710 ;	-----------------------------------------
                                   2711 ;	 function sent_ipolite
                                   2712 ;	-----------------------------------------
      0008F3                       2713 _sent_ipolite:
                                   2714 ;	/opt/contiki/core/net/rime/rudolph1.c:224: }
      0008F3 02r00r00         [24] 2715 	ljmp	__sdcc_banked_ret
                                   2716 ;------------------------------------------------------------
                                   2717 ;Allocation info for local variables in function 'dropped_ipolite'
                                   2718 ;------------------------------------------------------------
                                   2719 ;ipolite                   Allocated to registers 
                                   2720 ;------------------------------------------------------------
                                   2721 ;	/opt/contiki/core/net/rime/rudolph1.c:227: dropped_ipolite(struct ipolite_conn *ipolite)
                                   2722 ;	-----------------------------------------
                                   2723 ;	 function dropped_ipolite
                                   2724 ;	-----------------------------------------
      0008F6                       2725 _dropped_ipolite:
                                   2726 ;	/opt/contiki/core/net/rime/rudolph1.c:231: }
      0008F6 02r00r00         [24] 2727 	ljmp	__sdcc_banked_ret
                                   2728 ;------------------------------------------------------------
                                   2729 ;Allocation info for local variables in function 'recv_ipolite'
                                   2730 ;------------------------------------------------------------
                                   2731 ;from                      Allocated to stack - sp -11
                                   2732 ;ipolite                   Allocated to registers r5 r6 r7 
                                   2733 ;c                         Allocated to stack - sp -5
                                   2734 ;p                         Allocated to stack - sp -2
                                   2735 ;sloc0                     Allocated to stack - sp +4
                                   2736 ;------------------------------------------------------------
                                   2737 ;	/opt/contiki/core/net/rime/rudolph1.c:234: recv_ipolite(struct ipolite_conn *ipolite, const linkaddr_t *from)
                                   2738 ;	-----------------------------------------
                                   2739 ;	 function recv_ipolite
                                   2740 ;	-----------------------------------------
      0008F9                       2741 _recv_ipolite:
      0008F9 E5 81            [12] 2742 	mov	a,sp
      0008FB 24 06            [12] 2743 	add	a,#0x06
      0008FD F5 81            [12] 2744 	mov	sp,a
      0008FF AD 82            [24] 2745 	mov	r5,dpl
      000901 AE 83            [24] 2746 	mov	r6,dph
      000903 AF F0            [24] 2747 	mov	r7,b
                                   2748 ;	/opt/contiki/core/net/rime/rudolph1.c:236: struct rudolph1_conn *c = (struct rudolph1_conn *)
      000905 ED               [12] 2749 	mov	a,r5
      000906 24 A2            [12] 2750 	add	a,#0xA2
      000908 FD               [12] 2751 	mov	r5,a
      000909 EE               [12] 2752 	mov	a,r6
      00090A 34 FF            [12] 2753 	addc	a,#0xFF
      00090C FE               [12] 2754 	mov	r6,a
      00090D E5 81            [12] 2755 	mov	a,sp
      00090F 24 FB            [12] 2756 	add	a,#0xfb
      000911 F8               [12] 2757 	mov	r0,a
      000912 A6 05            [24] 2758 	mov	@r0,ar5
      000914 08               [12] 2759 	inc	r0
      000915 A6 06            [24] 2760 	mov	@r0,ar6
      000917 08               [12] 2761 	inc	r0
      000918 A6 07            [24] 2762 	mov	@r0,ar7
                                   2763 ;	/opt/contiki/core/net/rime/rudolph1.c:238: struct rudolph1_datapacket *p = packetbuf_dataptr();
      00091A 78r00            [12] 2764 	mov	r0,#_packetbuf_dataptr
      00091C 79s00            [12] 2765 	mov	r1,#(_packetbuf_dataptr >> 8)
      00091E 7As00            [12] 2766 	mov	r2,#(_packetbuf_dataptr >> 16)
      000920 12r00r00         [24] 2767 	lcall	__sdcc_banked_call
      000923 AA 82            [24] 2768 	mov	r2,dpl
      000925 AB 83            [24] 2769 	mov	r3,dph
      000927 AC F0            [24] 2770 	mov	r4,b
      000929 A8 81            [24] 2771 	mov	r0,sp
      00092B 18               [12] 2772 	dec	r0
      00092C 18               [12] 2773 	dec	r0
      00092D A6 02            [24] 2774 	mov	@r0,ar2
      00092F 08               [12] 2775 	inc	r0
      000930 A6 03            [24] 2776 	mov	@r0,ar3
      000932 08               [12] 2777 	inc	r0
      000933 A6 04            [24] 2778 	mov	@r0,ar4
                                   2779 ;	/opt/contiki/core/net/rime/rudolph1.c:244: c->nacks++;
      000935 E5 81            [12] 2780 	mov	a,sp
      000937 24 FB            [12] 2781 	add	a,#0xfb
      000939 F8               [12] 2782 	mov	r0,a
      00093A 74 AC            [12] 2783 	mov	a,#0xAC
      00093C 26               [12] 2784 	add	a,@r0
      00093D FD               [12] 2785 	mov	r5,a
      00093E E4               [12] 2786 	clr	a
      00093F 08               [12] 2787 	inc	r0
      000940 36               [12] 2788 	addc	a,@r0
      000941 FE               [12] 2789 	mov	r6,a
      000942 08               [12] 2790 	inc	r0
      000943 86 07            [24] 2791 	mov	ar7,@r0
      000945 8D 82            [24] 2792 	mov	dpl,r5
      000947 8E 83            [24] 2793 	mov	dph,r6
      000949 8F F0            [24] 2794 	mov	b,r7
      00094B 12r00r00         [24] 2795 	lcall	__gptrget
      00094E FC               [12] 2796 	mov	r4,a
      00094F 0C               [12] 2797 	inc	r4
      000950 8D 82            [24] 2798 	mov	dpl,r5
      000952 8E 83            [24] 2799 	mov	dph,r6
      000954 8F F0            [24] 2800 	mov	b,r7
      000956 EC               [12] 2801 	mov	a,r4
      000957 12r00r00         [24] 2802 	lcall	__gptrput
                                   2803 ;	/opt/contiki/core/net/rime/rudolph1.c:246: if(p->h.type == TYPE_NACK) {
      00095A A8 81            [24] 2804 	mov	r0,sp
      00095C 18               [12] 2805 	dec	r0
      00095D 18               [12] 2806 	dec	r0
      00095E 86 82            [24] 2807 	mov	dpl,@r0
      000960 08               [12] 2808 	inc	r0
      000961 86 83            [24] 2809 	mov	dph,@r0
      000963 08               [12] 2810 	inc	r0
      000964 86 F0            [24] 2811 	mov	b,@r0
      000966 12r00r00         [24] 2812 	lcall	__gptrget
      000969 FF               [12] 2813 	mov	r7,a
      00096A BF 01 02         [24] 2814 	cjne	r7,#0x01,00130$
      00096D 80 03            [24] 2815 	sjmp	00131$
      00096F                       2816 00130$:
      00096F 02r0ArC2         [24] 2817 	ljmp	00111$
      000972                       2818 00131$:
                                   2819 ;	/opt/contiki/core/net/rime/rudolph1.c:251: if(p->h.version == c->version) {
      000972 A8 81            [24] 2820 	mov	r0,sp
      000974 18               [12] 2821 	dec	r0
      000975 18               [12] 2822 	dec	r0
      000976 74 01            [12] 2823 	mov	a,#0x01
      000978 26               [12] 2824 	add	a,@r0
      000979 FC               [12] 2825 	mov	r4,a
      00097A E4               [12] 2826 	clr	a
      00097B 08               [12] 2827 	inc	r0
      00097C 36               [12] 2828 	addc	a,@r0
      00097D FD               [12] 2829 	mov	r5,a
      00097E 08               [12] 2830 	inc	r0
      00097F 86 06            [24] 2831 	mov	ar6,@r0
      000981 8C 82            [24] 2832 	mov	dpl,r4
      000983 8D 83            [24] 2833 	mov	dph,r5
      000985 8E F0            [24] 2834 	mov	b,r6
      000987 12r00r00         [24] 2835 	lcall	__gptrget
      00098A FE               [12] 2836 	mov	r6,a
      00098B E5 81            [12] 2837 	mov	a,sp
      00098D 24 FB            [12] 2838 	add	a,#0xfb
      00098F F8               [12] 2839 	mov	r0,a
      000990 74 AB            [12] 2840 	mov	a,#0xAB
      000992 26               [12] 2841 	add	a,@r0
      000993 FB               [12] 2842 	mov	r3,a
      000994 E4               [12] 2843 	clr	a
      000995 08               [12] 2844 	inc	r0
      000996 36               [12] 2845 	addc	a,@r0
      000997 FC               [12] 2846 	mov	r4,a
      000998 08               [12] 2847 	inc	r0
      000999 86 05            [24] 2848 	mov	ar5,@r0
      00099B 8B 82            [24] 2849 	mov	dpl,r3
      00099D 8C 83            [24] 2850 	mov	dph,r4
      00099F 8D F0            [24] 2851 	mov	b,r5
      0009A1 12r00r00         [24] 2852 	lcall	__gptrget
      0009A4 FD               [12] 2853 	mov	r5,a
      0009A5 EE               [12] 2854 	mov	a,r6
      0009A6 B5 05 02         [24] 2855 	cjne	a,ar5,00132$
      0009A9 80 03            [24] 2856 	sjmp	00133$
      0009AB                       2857 00132$:
      0009AB 02r0Ar46         [24] 2858 	ljmp	00106$
      0009AE                       2859 00133$:
                                   2860 ;	/opt/contiki/core/net/rime/rudolph1.c:252: if(p->h.chunk < c->chunk) {
      0009AE A8 81            [24] 2861 	mov	r0,sp
      0009B0 18               [12] 2862 	dec	r0
      0009B1 18               [12] 2863 	dec	r0
      0009B2 74 02            [12] 2864 	mov	a,#0x02
      0009B4 26               [12] 2865 	add	a,@r0
      0009B5 FA               [12] 2866 	mov	r2,a
      0009B6 E4               [12] 2867 	clr	a
      0009B7 08               [12] 2868 	inc	r0
      0009B8 36               [12] 2869 	addc	a,@r0
      0009B9 FB               [12] 2870 	mov	r3,a
      0009BA 08               [12] 2871 	inc	r0
      0009BB 86 04            [24] 2872 	mov	ar4,@r0
      0009BD 8A 82            [24] 2873 	mov	dpl,r2
      0009BF 8B 83            [24] 2874 	mov	dph,r3
      0009C1 8C F0            [24] 2875 	mov	b,r4
      0009C3 12r00r00         [24] 2876 	lcall	__gptrget
      0009C6 FF               [12] 2877 	mov	r7,a
      0009C7 A3               [24] 2878 	inc	dptr
      0009C8 12r00r00         [24] 2879 	lcall	__gptrget
      0009CB FE               [12] 2880 	mov	r6,a
      0009CC E5 81            [12] 2881 	mov	a,sp
      0009CE 24 FB            [12] 2882 	add	a,#0xfb
      0009D0 F8               [12] 2883 	mov	r0,a
      0009D1 74 A7            [12] 2884 	mov	a,#0xA7
      0009D3 26               [12] 2885 	add	a,@r0
      0009D4 FA               [12] 2886 	mov	r2,a
      0009D5 E4               [12] 2887 	clr	a
      0009D6 08               [12] 2888 	inc	r0
      0009D7 36               [12] 2889 	addc	a,@r0
      0009D8 FB               [12] 2890 	mov	r3,a
      0009D9 08               [12] 2891 	inc	r0
      0009DA 86 04            [24] 2892 	mov	ar4,@r0
      0009DC 8A 82            [24] 2893 	mov	dpl,r2
      0009DE 8B 83            [24] 2894 	mov	dph,r3
      0009E0 8C F0            [24] 2895 	mov	b,r4
      0009E2 12r00r00         [24] 2896 	lcall	__gptrget
      0009E5 FA               [12] 2897 	mov	r2,a
      0009E6 A3               [24] 2898 	inc	dptr
      0009E7 12r00r00         [24] 2899 	lcall	__gptrget
      0009EA FB               [12] 2900 	mov	r3,a
      0009EB C3               [12] 2901 	clr	c
      0009EC EF               [12] 2902 	mov	a,r7
      0009ED 9A               [12] 2903 	subb	a,r2
      0009EE EE               [12] 2904 	mov	a,r6
      0009EF 9B               [12] 2905 	subb	a,r3
      0009F0 40 03            [24] 2906 	jc	00134$
      0009F2 02r0ArF0         [24] 2907 	ljmp	00113$
      0009F5                       2908 00134$:
                                   2909 ;	/opt/contiki/core/net/rime/rudolph1.c:257: format_data(c, p->h.chunk);
      0009F5 C0 07            [24] 2910 	push	ar7
      0009F7 C0 06            [24] 2911 	push	ar6
      0009F9 E5 81            [12] 2912 	mov	a,sp
      0009FB 24 F9            [12] 2913 	add	a,#0xf9
      0009FD F8               [12] 2914 	mov	r0,a
      0009FE 86 82            [24] 2915 	mov	dpl,@r0
      000A00 08               [12] 2916 	inc	r0
      000A01 86 83            [24] 2917 	mov	dph,@r0
      000A03 08               [12] 2918 	inc	r0
      000A04 86 F0            [24] 2919 	mov	b,@r0
      000A06 78rD2            [12] 2920 	mov	r0,#_format_data
      000A08 79s00            [12] 2921 	mov	r1,#(_format_data >> 8)
      000A0A 7As00            [12] 2922 	mov	r2,#(_format_data >> 16)
      000A0C 12r00r00         [24] 2923 	lcall	__sdcc_banked_call
      000A0F 15 81            [12] 2924 	dec	sp
      000A11 15 81            [12] 2925 	dec	sp
                                   2926 ;	/opt/contiki/core/net/rime/rudolph1.c:258: ipolite_send(&c->ipolite, REPAIR_TIMEOUT, sizeof(struct rudolph1_hdr));
      000A13 E5 81            [12] 2927 	mov	a,sp
      000A15 24 FB            [12] 2928 	add	a,#0xfb
      000A17 F8               [12] 2929 	mov	r0,a
      000A18 74 5E            [12] 2930 	mov	a,#0x5E
      000A1A 26               [12] 2931 	add	a,@r0
      000A1B FA               [12] 2932 	mov	r2,a
      000A1C E4               [12] 2933 	clr	a
      000A1D 08               [12] 2934 	inc	r0
      000A1E 36               [12] 2935 	addc	a,@r0
      000A1F FB               [12] 2936 	mov	r3,a
      000A20 08               [12] 2937 	inc	r0
      000A21 86 04            [24] 2938 	mov	ar4,@r0
      000A23 74 04            [12] 2939 	mov	a,#0x04
      000A25 C0 E0            [24] 2940 	push	acc
      000A27 74 20            [12] 2941 	mov	a,#0x20
      000A29 C0 E0            [24] 2942 	push	acc
      000A2B E4               [12] 2943 	clr	a
      000A2C C0 E0            [24] 2944 	push	acc
      000A2E 8A 82            [24] 2945 	mov	dpl,r2
      000A30 8B 83            [24] 2946 	mov	dph,r3
      000A32 8C F0            [24] 2947 	mov	b,r4
      000A34 78r00            [12] 2948 	mov	r0,#_ipolite_send
      000A36 79s00            [12] 2949 	mov	r1,#(_ipolite_send >> 8)
      000A38 7As00            [12] 2950 	mov	r2,#(_ipolite_send >> 16)
      000A3A 12r00r00         [24] 2951 	lcall	__sdcc_banked_call
      000A3D 15 81            [12] 2952 	dec	sp
      000A3F 15 81            [12] 2953 	dec	sp
      000A41 15 81            [12] 2954 	dec	sp
      000A43 02r0ArF0         [24] 2955 	ljmp	00113$
      000A46                       2956 00106$:
                                   2957 ;	/opt/contiki/core/net/rime/rudolph1.c:260: } else if(LT(p->h.version, c->version)) {
      000A46 EE               [12] 2958 	mov	a,r6
      000A47 C3               [12] 2959 	clr	c
      000A48 9D               [12] 2960 	subb	a,r5
      000A49 FE               [12] 2961 	mov	r6,a
      000A4A 20 E7 03         [24] 2962 	jb	acc.7,00135$
      000A4D 02r0ArF0         [24] 2963 	ljmp	00113$
      000A50                       2964 00135$:
                                   2965 ;	/opt/contiki/core/net/rime/rudolph1.c:261: format_data(c, 0);
      000A50 E4               [12] 2966 	clr	a
      000A51 C0 E0            [24] 2967 	push	acc
      000A53 C0 E0            [24] 2968 	push	acc
      000A55 E5 81            [12] 2969 	mov	a,sp
      000A57 24 F9            [12] 2970 	add	a,#0xf9
      000A59 F8               [12] 2971 	mov	r0,a
      000A5A 86 82            [24] 2972 	mov	dpl,@r0
      000A5C 08               [12] 2973 	inc	r0
      000A5D 86 83            [24] 2974 	mov	dph,@r0
      000A5F 08               [12] 2975 	inc	r0
      000A60 86 F0            [24] 2976 	mov	b,@r0
      000A62 78rD2            [12] 2977 	mov	r0,#_format_data
      000A64 79s00            [12] 2978 	mov	r1,#(_format_data >> 8)
      000A66 7As00            [12] 2979 	mov	r2,#(_format_data >> 16)
      000A68 12r00r00         [24] 2980 	lcall	__sdcc_banked_call
      000A6B 15 81            [12] 2981 	dec	sp
      000A6D 15 81            [12] 2982 	dec	sp
                                   2983 ;	/opt/contiki/core/net/rime/rudolph1.c:262: ipolite_send(&c->ipolite, c->send_interval / 2, sizeof(struct rudolph1_hdr));
      000A6F E5 81            [12] 2984 	mov	a,sp
      000A71 24 FB            [12] 2985 	add	a,#0xfb
      000A73 F8               [12] 2986 	mov	r0,a
      000A74 74 A5            [12] 2987 	mov	a,#0xA5
      000A76 26               [12] 2988 	add	a,@r0
      000A77 FC               [12] 2989 	mov	r4,a
      000A78 E4               [12] 2990 	clr	a
      000A79 08               [12] 2991 	inc	r0
      000A7A 36               [12] 2992 	addc	a,@r0
      000A7B FD               [12] 2993 	mov	r5,a
      000A7C 08               [12] 2994 	inc	r0
      000A7D 86 06            [24] 2995 	mov	ar6,@r0
      000A7F 8C 82            [24] 2996 	mov	dpl,r4
      000A81 8D 83            [24] 2997 	mov	dph,r5
      000A83 8E F0            [24] 2998 	mov	b,r6
      000A85 12r00r00         [24] 2999 	lcall	__gptrget
      000A88 FC               [12] 3000 	mov	r4,a
      000A89 A3               [24] 3001 	inc	dptr
      000A8A 12r00r00         [24] 3002 	lcall	__gptrget
      000A8D C3               [12] 3003 	clr	c
      000A8E 13               [12] 3004 	rrc	a
      000A8F CC               [12] 3005 	xch	a,r4
      000A90 13               [12] 3006 	rrc	a
      000A91 CC               [12] 3007 	xch	a,r4
      000A92 FD               [12] 3008 	mov	r5,a
      000A93 E5 81            [12] 3009 	mov	a,sp
      000A95 24 FB            [12] 3010 	add	a,#0xfb
      000A97 F8               [12] 3011 	mov	r0,a
      000A98 74 5E            [12] 3012 	mov	a,#0x5E
      000A9A 26               [12] 3013 	add	a,@r0
      000A9B FA               [12] 3014 	mov	r2,a
      000A9C E4               [12] 3015 	clr	a
      000A9D 08               [12] 3016 	inc	r0
      000A9E 36               [12] 3017 	addc	a,@r0
      000A9F FB               [12] 3018 	mov	r3,a
      000AA0 08               [12] 3019 	inc	r0
      000AA1 86 06            [24] 3020 	mov	ar6,@r0
      000AA3 74 04            [12] 3021 	mov	a,#0x04
      000AA5 C0 E0            [24] 3022 	push	acc
      000AA7 C0 04            [24] 3023 	push	ar4
      000AA9 C0 05            [24] 3024 	push	ar5
      000AAB 8A 82            [24] 3025 	mov	dpl,r2
      000AAD 8B 83            [24] 3026 	mov	dph,r3
      000AAF 8E F0            [24] 3027 	mov	b,r6
      000AB1 78r00            [12] 3028 	mov	r0,#_ipolite_send
      000AB3 79s00            [12] 3029 	mov	r1,#(_ipolite_send >> 8)
      000AB5 7As00            [12] 3030 	mov	r2,#(_ipolite_send >> 16)
      000AB7 12r00r00         [24] 3031 	lcall	__sdcc_banked_call
      000ABA 15 81            [12] 3032 	dec	sp
      000ABC 15 81            [12] 3033 	dec	sp
      000ABE 15 81            [12] 3034 	dec	sp
      000AC0 80 2E            [24] 3035 	sjmp	00113$
      000AC2                       3036 00111$:
                                   3037 ;	/opt/contiki/core/net/rime/rudolph1.c:264: } else if(p->h.type == TYPE_DATA) {
      000AC2 EF               [12] 3038 	mov	a,r7
      000AC3 70 2B            [24] 3039 	jnz	00113$
                                   3040 ;	/opt/contiki/core/net/rime/rudolph1.c:269: handle_data(c, p);
      000AC5 A8 81            [24] 3041 	mov	r0,sp
      000AC7 18               [12] 3042 	dec	r0
      000AC8 18               [12] 3043 	dec	r0
      000AC9 E6               [12] 3044 	mov	a,@r0
      000ACA C0 E0            [24] 3045 	push	acc
      000ACC 08               [12] 3046 	inc	r0
      000ACD E6               [12] 3047 	mov	a,@r0
      000ACE C0 E0            [24] 3048 	push	acc
      000AD0 08               [12] 3049 	inc	r0
      000AD1 E6               [12] 3050 	mov	a,@r0
      000AD2 C0 E0            [24] 3051 	push	acc
      000AD4 E5 81            [12] 3052 	mov	a,sp
      000AD6 24 F8            [12] 3053 	add	a,#0xf8
      000AD8 F8               [12] 3054 	mov	r0,a
      000AD9 86 82            [24] 3055 	mov	dpl,@r0
      000ADB 08               [12] 3056 	inc	r0
      000ADC 86 83            [24] 3057 	mov	dph,@r0
      000ADE 08               [12] 3058 	inc	r0
      000ADF 86 F0            [24] 3059 	mov	b,@r0
      000AE1 78r00            [12] 3060 	mov	r0,#_handle_data
      000AE3 79s05            [12] 3061 	mov	r1,#(_handle_data >> 8)
      000AE5 7As00            [12] 3062 	mov	r2,#(_handle_data >> 16)
      000AE7 12r00r00         [24] 3063 	lcall	__sdcc_banked_call
      000AEA 15 81            [12] 3064 	dec	sp
      000AEC 15 81            [12] 3065 	dec	sp
      000AEE 15 81            [12] 3066 	dec	sp
      000AF0                       3067 00113$:
      000AF0 E5 81            [12] 3068 	mov	a,sp
      000AF2 24 FA            [12] 3069 	add	a,#0xFA
      000AF4 F5 81            [12] 3070 	mov	sp,a
      000AF6 02r00r00         [24] 3071 	ljmp	__sdcc_banked_ret
                                   3072 ;------------------------------------------------------------
                                   3073 ;Allocation info for local variables in function 'send_next_packet'
                                   3074 ;------------------------------------------------------------
                                   3075 ;ptr                       Allocated to registers r5 r6 r7 
                                   3076 ;c                         Allocated to stack - sp -2
                                   3077 ;len                       Allocated to registers r3 r4 
                                   3078 ;sloc0                     Allocated to stack - sp -5
                                   3079 ;sloc1                     Allocated to stack - sp -7
                                   3080 ;------------------------------------------------------------
                                   3081 ;	/opt/contiki/core/net/rime/rudolph1.c:274: send_next_packet(void *ptr)
                                   3082 ;	-----------------------------------------
                                   3083 ;	 function send_next_packet
                                   3084 ;	-----------------------------------------
      000AF9                       3085 _send_next_packet:
      000AF9 E5 81            [12] 3086 	mov	a,sp
      000AFB 24 08            [12] 3087 	add	a,#0x08
      000AFD F5 81            [12] 3088 	mov	sp,a
      000AFF AD 82            [24] 3089 	mov	r5,dpl
      000B01 AE 83            [24] 3090 	mov	r6,dph
      000B03 AF F0            [24] 3091 	mov	r7,b
                                   3092 ;	/opt/contiki/core/net/rime/rudolph1.c:276: struct rudolph1_conn *c = ptr;
      000B05 A8 81            [24] 3093 	mov	r0,sp
      000B07 18               [12] 3094 	dec	r0
      000B08 18               [12] 3095 	dec	r0
      000B09 A6 05            [24] 3096 	mov	@r0,ar5
      000B0B 08               [12] 3097 	inc	r0
      000B0C A6 06            [24] 3098 	mov	@r0,ar6
      000B0E 08               [12] 3099 	inc	r0
      000B0F A6 07            [24] 3100 	mov	@r0,ar7
                                   3101 ;	/opt/contiki/core/net/rime/rudolph1.c:278: if(c->nacks == 0) {
      000B11 A8 81            [24] 3102 	mov	r0,sp
      000B13 18               [12] 3103 	dec	r0
      000B14 18               [12] 3104 	dec	r0
      000B15 74 AC            [12] 3105 	mov	a,#0xAC
      000B17 26               [12] 3106 	add	a,@r0
      000B18 FA               [12] 3107 	mov	r2,a
      000B19 E4               [12] 3108 	clr	a
      000B1A 08               [12] 3109 	inc	r0
      000B1B 36               [12] 3110 	addc	a,@r0
      000B1C FB               [12] 3111 	mov	r3,a
      000B1D 08               [12] 3112 	inc	r0
      000B1E 86 04            [24] 3113 	mov	ar4,@r0
      000B20 8A 82            [24] 3114 	mov	dpl,r2
      000B22 8B 83            [24] 3115 	mov	dph,r3
      000B24 8C F0            [24] 3116 	mov	b,r4
      000B26 12r00r00         [24] 3117 	lcall	__gptrget
      000B29 60 03            [24] 3118 	jz	00114$
      000B2B 02r0CrB6         [24] 3119 	ljmp	00104$
      000B2E                       3120 00114$:
                                   3121 ;	/opt/contiki/core/net/rime/rudolph1.c:279: len = format_data(c, c->chunk);
      000B2E C0 02            [24] 3122 	push	ar2
      000B30 C0 03            [24] 3123 	push	ar3
      000B32 C0 04            [24] 3124 	push	ar4
      000B34 E5 81            [12] 3125 	mov	a,sp
      000B36 24 FB            [12] 3126 	add	a,#0xfb
      000B38 F8               [12] 3127 	mov	r0,a
      000B39 E5 81            [12] 3128 	mov	a,sp
      000B3B 24 F8            [12] 3129 	add	a,#0xf8
      000B3D F9               [12] 3130 	mov	r1,a
      000B3E 74 A7            [12] 3131 	mov	a,#0xA7
      000B40 26               [12] 3132 	add	a,@r0
      000B41 F7               [12] 3133 	mov	@r1,a
      000B42 E4               [12] 3134 	clr	a
      000B43 08               [12] 3135 	inc	r0
      000B44 36               [12] 3136 	addc	a,@r0
      000B45 09               [12] 3137 	inc	r1
      000B46 F7               [12] 3138 	mov	@r1,a
      000B47 08               [12] 3139 	inc	r0
      000B48 09               [12] 3140 	inc	r1
      000B49 E6               [12] 3141 	mov	a,@r0
      000B4A F7               [12] 3142 	mov	@r1,a
      000B4B E5 81            [12] 3143 	mov	a,sp
      000B4D 24 F8            [12] 3144 	add	a,#0xf8
      000B4F F8               [12] 3145 	mov	r0,a
      000B50 86 82            [24] 3146 	mov	dpl,@r0
      000B52 08               [12] 3147 	inc	r0
      000B53 86 83            [24] 3148 	mov	dph,@r0
      000B55 08               [12] 3149 	inc	r0
      000B56 86 F0            [24] 3150 	mov	b,@r0
      000B58 12r00r00         [24] 3151 	lcall	__gptrget
      000B5B FB               [12] 3152 	mov	r3,a
      000B5C A3               [24] 3153 	inc	dptr
      000B5D 12r00r00         [24] 3154 	lcall	__gptrget
      000B60 FC               [12] 3155 	mov	r4,a
      000B61 C0 02            [24] 3156 	push	ar2
      000B63 C0 03            [24] 3157 	push	ar3
      000B65 C0 04            [24] 3158 	push	ar4
      000B67 E5 81            [12] 3159 	mov	a,sp
      000B69 24 F8            [12] 3160 	add	a,#0xf8
      000B6B F8               [12] 3161 	mov	r0,a
      000B6C 86 82            [24] 3162 	mov	dpl,@r0
      000B6E 08               [12] 3163 	inc	r0
      000B6F 86 83            [24] 3164 	mov	dph,@r0
      000B71 08               [12] 3165 	inc	r0
      000B72 86 F0            [24] 3166 	mov	b,@r0
      000B74 78rD2            [12] 3167 	mov	r0,#_format_data
      000B76 79s00            [12] 3168 	mov	r1,#(_format_data >> 8)
      000B78 7As00            [12] 3169 	mov	r2,#(_format_data >> 16)
      000B7A 12r00r00         [24] 3170 	lcall	__sdcc_banked_call
      000B7D AB 82            [24] 3171 	mov	r3,dpl
      000B7F AC 83            [24] 3172 	mov	r4,dph
      000B81 15 81            [12] 3173 	dec	sp
      000B83 15 81            [12] 3174 	dec	sp
      000B85 D0 02            [24] 3175 	pop	ar2
                                   3176 ;	/opt/contiki/core/net/rime/rudolph1.c:280: trickle_send(&c->trickle);
      000B87 E5 81            [12] 3177 	mov	a,sp
      000B89 24 FB            [12] 3178 	add	a,#0xfb
      000B8B F8               [12] 3179 	mov	r0,a
      000B8C 86 82            [24] 3180 	mov	dpl,@r0
      000B8E 08               [12] 3181 	inc	r0
      000B8F 86 83            [24] 3182 	mov	dph,@r0
      000B91 08               [12] 3183 	inc	r0
      000B92 86 F0            [24] 3184 	mov	b,@r0
      000B94 C0 04            [24] 3185 	push	ar4
      000B96 C0 03            [24] 3186 	push	ar3
      000B98 C0 02            [24] 3187 	push	ar2
      000B9A 78r00            [12] 3188 	mov	r0,#_trickle_send
      000B9C 79s00            [12] 3189 	mov	r1,#(_trickle_send >> 8)
      000B9E 7As00            [12] 3190 	mov	r2,#(_trickle_send >> 16)
      000BA0 12r00r00         [24] 3191 	lcall	__sdcc_banked_call
      000BA3 D0 02            [24] 3192 	pop	ar2
      000BA5 D0 03            [24] 3193 	pop	ar3
      000BA7 D0 04            [24] 3194 	pop	ar4
                                   3195 ;	/opt/contiki/core/net/rime/rudolph1.c:281: if(len == RUDOLPH1_DATASIZE) {
      000BA9 BB 40 05         [24] 3196 	cjne	r3,#0x40,00115$
      000BAC BC 00 02         [24] 3197 	cjne	r4,#0x00,00115$
      000BAF 80 09            [24] 3198 	sjmp	00116$
      000BB1                       3199 00115$:
      000BB1 D0 04            [24] 3200 	pop	ar4
      000BB3 D0 03            [24] 3201 	pop	ar3
      000BB5 D0 02            [24] 3202 	pop	ar2
      000BB7 02r0Cr41         [24] 3203 	ljmp	00102$
      000BBA                       3204 00116$:
                                   3205 ;	/opt/contiki/core/net/rime/rudolph1.c:282: ctimer_set(&c->t, c->send_interval, send_next_packet, c);
      000BBA E5 81            [12] 3206 	mov	a,sp
      000BBC 24 FB            [12] 3207 	add	a,#0xfb
      000BBE F8               [12] 3208 	mov	r0,a
      000BBF 86 02            [24] 3209 	mov	ar2,@r0
      000BC1 08               [12] 3210 	inc	r0
      000BC2 86 03            [24] 3211 	mov	ar3,@r0
      000BC4 08               [12] 3212 	inc	r0
      000BC5 86 04            [24] 3213 	mov	ar4,@r0
      000BC7 E5 81            [12] 3214 	mov	a,sp
      000BC9 24 FB            [12] 3215 	add	a,#0xfb
      000BCB F8               [12] 3216 	mov	r0,a
      000BCC 74 A5            [12] 3217 	mov	a,#0xA5
      000BCE 26               [12] 3218 	add	a,@r0
      000BCF FD               [12] 3219 	mov	r5,a
      000BD0 E4               [12] 3220 	clr	a
      000BD1 08               [12] 3221 	inc	r0
      000BD2 36               [12] 3222 	addc	a,@r0
      000BD3 FE               [12] 3223 	mov	r6,a
      000BD4 08               [12] 3224 	inc	r0
      000BD5 86 07            [24] 3225 	mov	ar7,@r0
      000BD7 8D 82            [24] 3226 	mov	dpl,r5
      000BD9 8E 83            [24] 3227 	mov	dph,r6
      000BDB 8F F0            [24] 3228 	mov	b,r7
      000BDD E5 81            [12] 3229 	mov	a,sp
      000BDF 24 F6            [12] 3230 	add	a,#0xf6
      000BE1 F8               [12] 3231 	mov	r0,a
      000BE2 12r00r00         [24] 3232 	lcall	__gptrget
      000BE5 F6               [12] 3233 	mov	@r0,a
      000BE6 A3               [24] 3234 	inc	dptr
      000BE7 12r00r00         [24] 3235 	lcall	__gptrget
      000BEA 08               [12] 3236 	inc	r0
      000BEB F6               [12] 3237 	mov	@r0,a
      000BEC E5 81            [12] 3238 	mov	a,sp
      000BEE 24 FB            [12] 3239 	add	a,#0xfb
      000BF0 F8               [12] 3240 	mov	r0,a
      000BF1 74 8F            [12] 3241 	mov	a,#0x8F
      000BF3 26               [12] 3242 	add	a,@r0
      000BF4 FD               [12] 3243 	mov	r5,a
      000BF5 E4               [12] 3244 	clr	a
      000BF6 08               [12] 3245 	inc	r0
      000BF7 36               [12] 3246 	addc	a,@r0
      000BF8 FE               [12] 3247 	mov	r6,a
      000BF9 08               [12] 3248 	inc	r0
      000BFA 86 07            [24] 3249 	mov	ar7,@r0
      000BFC C0 04            [24] 3250 	push	ar4
      000BFE C0 03            [24] 3251 	push	ar3
      000C00 C0 02            [24] 3252 	push	ar2
      000C02 C0 02            [24] 3253 	push	ar2
      000C04 C0 03            [24] 3254 	push	ar3
      000C06 C0 04            [24] 3255 	push	ar4
      000C08 74rF9            [12] 3256 	mov	a,#_send_next_packet
      000C0A C0 E0            [24] 3257 	push	acc
      000C0C 74s0A            [12] 3258 	mov	a,#(_send_next_packet >> 8)
      000C0E C0 E0            [24] 3259 	push	acc
      000C10 74s00            [12] 3260 	mov	a,#(_send_next_packet >> 16)
      000C12 C0 E0            [24] 3261 	push	acc
      000C14 E5 81            [12] 3262 	mov	a,sp
      000C16 24 ED            [12] 3263 	add	a,#0xed
      000C18 F8               [12] 3264 	mov	r0,a
      000C19 E6               [12] 3265 	mov	a,@r0
      000C1A C0 E0            [24] 3266 	push	acc
      000C1C 08               [12] 3267 	inc	r0
      000C1D E6               [12] 3268 	mov	a,@r0
      000C1E C0 E0            [24] 3269 	push	acc
      000C20 8D 82            [24] 3270 	mov	dpl,r5
      000C22 8E 83            [24] 3271 	mov	dph,r6
      000C24 8F F0            [24] 3272 	mov	b,r7
      000C26 78r00            [12] 3273 	mov	r0,#_ctimer_set
      000C28 79s00            [12] 3274 	mov	r1,#(_ctimer_set >> 8)
      000C2A 7As00            [12] 3275 	mov	r2,#(_ctimer_set >> 16)
      000C2C 12r00r00         [24] 3276 	lcall	__sdcc_banked_call
      000C2F E5 81            [12] 3277 	mov	a,sp
      000C31 24 F8            [12] 3278 	add	a,#0xf8
      000C33 F5 81            [12] 3279 	mov	sp,a
      000C35 D0 02            [24] 3280 	pop	ar2
      000C37 D0 03            [24] 3281 	pop	ar3
      000C39 D0 04            [24] 3282 	pop	ar4
                                   3283 ;	/opt/contiki/core/net/rime/rudolph1.c:294: c->nacks = 0;
      000C3B D0 04            [24] 3284 	pop	ar4
      000C3D D0 03            [24] 3285 	pop	ar3
      000C3F D0 02            [24] 3286 	pop	ar2
                                   3287 ;	/opt/contiki/core/net/rime/rudolph1.c:282: ctimer_set(&c->t, c->send_interval, send_next_packet, c);
      000C41                       3288 00102$:
                                   3289 ;	/opt/contiki/core/net/rime/rudolph1.c:288: c->highest_chunk_heard = c->chunk;
      000C41 C0 02            [24] 3290 	push	ar2
      000C43 C0 03            [24] 3291 	push	ar3
      000C45 C0 04            [24] 3292 	push	ar4
      000C47 E5 81            [12] 3293 	mov	a,sp
      000C49 24 FB            [12] 3294 	add	a,#0xfb
      000C4B F8               [12] 3295 	mov	r0,a
      000C4C 74 A9            [12] 3296 	mov	a,#0xA9
      000C4E 26               [12] 3297 	add	a,@r0
      000C4F FD               [12] 3298 	mov	r5,a
      000C50 E4               [12] 3299 	clr	a
      000C51 08               [12] 3300 	inc	r0
      000C52 36               [12] 3301 	addc	a,@r0
      000C53 FE               [12] 3302 	mov	r6,a
      000C54 08               [12] 3303 	inc	r0
      000C55 86 07            [24] 3304 	mov	ar7,@r0
      000C57 E5 81            [12] 3305 	mov	a,sp
      000C59 24 F8            [12] 3306 	add	a,#0xf8
      000C5B F8               [12] 3307 	mov	r0,a
      000C5C 86 82            [24] 3308 	mov	dpl,@r0
      000C5E 08               [12] 3309 	inc	r0
      000C5F 86 83            [24] 3310 	mov	dph,@r0
      000C61 08               [12] 3311 	inc	r0
      000C62 86 F0            [24] 3312 	mov	b,@r0
      000C64 12r00r00         [24] 3313 	lcall	__gptrget
      000C67 FB               [12] 3314 	mov	r3,a
      000C68 A3               [24] 3315 	inc	dptr
      000C69 12r00r00         [24] 3316 	lcall	__gptrget
      000C6C FC               [12] 3317 	mov	r4,a
      000C6D 8D 82            [24] 3318 	mov	dpl,r5
      000C6F 8E 83            [24] 3319 	mov	dph,r6
      000C71 8F F0            [24] 3320 	mov	b,r7
      000C73 EB               [12] 3321 	mov	a,r3
      000C74 12r00r00         [24] 3322 	lcall	__gptrput
      000C77 A3               [24] 3323 	inc	dptr
      000C78 EC               [12] 3324 	mov	a,r4
      000C79 12r00r00         [24] 3325 	lcall	__gptrput
                                   3326 ;	/opt/contiki/core/net/rime/rudolph1.c:289: c->chunk++;
      000C7C E5 81            [12] 3327 	mov	a,sp
      000C7E 24 F8            [12] 3328 	add	a,#0xf8
      000C80 F8               [12] 3329 	mov	r0,a
      000C81 86 82            [24] 3330 	mov	dpl,@r0
      000C83 08               [12] 3331 	inc	r0
      000C84 86 83            [24] 3332 	mov	dph,@r0
      000C86 08               [12] 3333 	inc	r0
      000C87 86 F0            [24] 3334 	mov	b,@r0
      000C89 12r00r00         [24] 3335 	lcall	__gptrget
      000C8C FE               [12] 3336 	mov	r6,a
      000C8D A3               [24] 3337 	inc	dptr
      000C8E 12r00r00         [24] 3338 	lcall	__gptrget
      000C91 FF               [12] 3339 	mov	r7,a
      000C92 0E               [12] 3340 	inc	r6
      000C93 BE 00 01         [24] 3341 	cjne	r6,#0x00,00117$
      000C96 0F               [12] 3342 	inc	r7
      000C97                       3343 00117$:
      000C97 E5 81            [12] 3344 	mov	a,sp
      000C99 24 F8            [12] 3345 	add	a,#0xf8
      000C9B F8               [12] 3346 	mov	r0,a
      000C9C 86 82            [24] 3347 	mov	dpl,@r0
      000C9E 08               [12] 3348 	inc	r0
      000C9F 86 83            [24] 3349 	mov	dph,@r0
      000CA1 08               [12] 3350 	inc	r0
      000CA2 86 F0            [24] 3351 	mov	b,@r0
      000CA4 EE               [12] 3352 	mov	a,r6
      000CA5 12r00r00         [24] 3353 	lcall	__gptrput
      000CA8 A3               [24] 3354 	inc	dptr
      000CA9 EF               [12] 3355 	mov	a,r7
      000CAA 12r00r00         [24] 3356 	lcall	__gptrput
      000CAD D0 04            [24] 3357 	pop	ar4
      000CAF D0 03            [24] 3358 	pop	ar3
      000CB1 D0 02            [24] 3359 	pop	ar2
      000CB3 02r0Dr43         [24] 3360 	ljmp	00105$
      000CB6                       3361 00104$:
                                   3362 ;	/opt/contiki/core/net/rime/rudolph1.c:292: ctimer_set(&c->t, c->send_interval, send_next_packet, c);
      000CB6 C0 02            [24] 3363 	push	ar2
      000CB8 C0 03            [24] 3364 	push	ar3
      000CBA C0 04            [24] 3365 	push	ar4
      000CBC E5 81            [12] 3366 	mov	a,sp
      000CBE 24 FB            [12] 3367 	add	a,#0xfb
      000CC0 F8               [12] 3368 	mov	r0,a
      000CC1 86 05            [24] 3369 	mov	ar5,@r0
      000CC3 08               [12] 3370 	inc	r0
      000CC4 86 06            [24] 3371 	mov	ar6,@r0
      000CC6 08               [12] 3372 	inc	r0
      000CC7 86 07            [24] 3373 	mov	ar7,@r0
      000CC9 E5 81            [12] 3374 	mov	a,sp
      000CCB 24 FB            [12] 3375 	add	a,#0xfb
      000CCD F8               [12] 3376 	mov	r0,a
      000CCE 74 A5            [12] 3377 	mov	a,#0xA5
      000CD0 26               [12] 3378 	add	a,@r0
      000CD1 FA               [12] 3379 	mov	r2,a
      000CD2 E4               [12] 3380 	clr	a
      000CD3 08               [12] 3381 	inc	r0
      000CD4 36               [12] 3382 	addc	a,@r0
      000CD5 FB               [12] 3383 	mov	r3,a
      000CD6 08               [12] 3384 	inc	r0
      000CD7 86 04            [24] 3385 	mov	ar4,@r0
      000CD9 8A 82            [24] 3386 	mov	dpl,r2
      000CDB 8B 83            [24] 3387 	mov	dph,r3
      000CDD 8C F0            [24] 3388 	mov	b,r4
      000CDF E5 81            [12] 3389 	mov	a,sp
      000CE1 24 F6            [12] 3390 	add	a,#0xf6
      000CE3 F8               [12] 3391 	mov	r0,a
      000CE4 12r00r00         [24] 3392 	lcall	__gptrget
      000CE7 F6               [12] 3393 	mov	@r0,a
      000CE8 A3               [24] 3394 	inc	dptr
      000CE9 12r00r00         [24] 3395 	lcall	__gptrget
      000CEC 08               [12] 3396 	inc	r0
      000CED F6               [12] 3397 	mov	@r0,a
      000CEE E5 81            [12] 3398 	mov	a,sp
      000CF0 24 FB            [12] 3399 	add	a,#0xfb
      000CF2 F8               [12] 3400 	mov	r0,a
      000CF3 74 8F            [12] 3401 	mov	a,#0x8F
      000CF5 26               [12] 3402 	add	a,@r0
      000CF6 FA               [12] 3403 	mov	r2,a
      000CF7 E4               [12] 3404 	clr	a
      000CF8 08               [12] 3405 	inc	r0
      000CF9 36               [12] 3406 	addc	a,@r0
      000CFA FB               [12] 3407 	mov	r3,a
      000CFB 08               [12] 3408 	inc	r0
      000CFC 86 04            [24] 3409 	mov	ar4,@r0
      000CFE C0 04            [24] 3410 	push	ar4
      000D00 C0 03            [24] 3411 	push	ar3
      000D02 C0 02            [24] 3412 	push	ar2
      000D04 C0 05            [24] 3413 	push	ar5
      000D06 C0 06            [24] 3414 	push	ar6
      000D08 C0 07            [24] 3415 	push	ar7
      000D0A 74rF9            [12] 3416 	mov	a,#_send_next_packet
      000D0C C0 E0            [24] 3417 	push	acc
      000D0E 74s0A            [12] 3418 	mov	a,#(_send_next_packet >> 8)
      000D10 C0 E0            [24] 3419 	push	acc
      000D12 74s00            [12] 3420 	mov	a,#(_send_next_packet >> 16)
      000D14 C0 E0            [24] 3421 	push	acc
      000D16 E5 81            [12] 3422 	mov	a,sp
      000D18 24 ED            [12] 3423 	add	a,#0xed
      000D1A F8               [12] 3424 	mov	r0,a
      000D1B E6               [12] 3425 	mov	a,@r0
      000D1C C0 E0            [24] 3426 	push	acc
      000D1E 08               [12] 3427 	inc	r0
      000D1F E6               [12] 3428 	mov	a,@r0
      000D20 C0 E0            [24] 3429 	push	acc
      000D22 8A 82            [24] 3430 	mov	dpl,r2
      000D24 8B 83            [24] 3431 	mov	dph,r3
      000D26 8C F0            [24] 3432 	mov	b,r4
      000D28 78r00            [12] 3433 	mov	r0,#_ctimer_set
      000D2A 79s00            [12] 3434 	mov	r1,#(_ctimer_set >> 8)
      000D2C 7As00            [12] 3435 	mov	r2,#(_ctimer_set >> 16)
      000D2E 12r00r00         [24] 3436 	lcall	__sdcc_banked_call
      000D31 E5 81            [12] 3437 	mov	a,sp
      000D33 24 F8            [12] 3438 	add	a,#0xf8
      000D35 F5 81            [12] 3439 	mov	sp,a
      000D37 D0 02            [24] 3440 	pop	ar2
      000D39 D0 03            [24] 3441 	pop	ar3
      000D3B D0 04            [24] 3442 	pop	ar4
                                   3443 ;	/opt/contiki/core/net/rime/rudolph1.c:294: c->nacks = 0;
      000D3D D0 04            [24] 3444 	pop	ar4
      000D3F D0 03            [24] 3445 	pop	ar3
      000D41 D0 02            [24] 3446 	pop	ar2
                                   3447 ;	/opt/contiki/core/net/rime/rudolph1.c:292: ctimer_set(&c->t, c->send_interval, send_next_packet, c);
      000D43                       3448 00105$:
                                   3449 ;	/opt/contiki/core/net/rime/rudolph1.c:294: c->nacks = 0;
      000D43 8A 82            [24] 3450 	mov	dpl,r2
      000D45 8B 83            [24] 3451 	mov	dph,r3
      000D47 8C F0            [24] 3452 	mov	b,r4
      000D49 E4               [12] 3453 	clr	a
      000D4A 12r00r00         [24] 3454 	lcall	__gptrput
      000D4D E5 81            [12] 3455 	mov	a,sp
      000D4F 24 F8            [12] 3456 	add	a,#0xF8
      000D51 F5 81            [12] 3457 	mov	sp,a
      000D53 02r00r00         [24] 3458 	ljmp	__sdcc_banked_ret
                                   3459 ;------------------------------------------------------------
                                   3460 ;Allocation info for local variables in function 'rudolph1_open'
                                   3461 ;------------------------------------------------------------
                                   3462 ;channel                   Allocated to stack - sp -7
                                   3463 ;cb                        Allocated to stack - sp -10
                                   3464 ;c                         Allocated to stack - sp -2
                                   3465 ;------------------------------------------------------------
                                   3466 ;	/opt/contiki/core/net/rime/rudolph1.c:302: rudolph1_open(struct rudolph1_conn *c, uint16_t channel,
                                   3467 ;	-----------------------------------------
                                   3468 ;	 function rudolph1_open
                                   3469 ;	-----------------------------------------
      000D56                       3470 _rudolph1_open:
      000D56 C0 82            [24] 3471 	push	dpl
      000D58 C0 83            [24] 3472 	push	dph
      000D5A C0 F0            [24] 3473 	push	b
                                   3474 ;	/opt/contiki/core/net/rime/rudolph1.c:305: trickle_open(&c->trickle, TRICKLE_INTERVAL, channel, &trickle);
      000D5C 74r09            [12] 3475 	mov	a,#_trickle
      000D5E C0 E0            [24] 3476 	push	acc
      000D60 74s00            [12] 3477 	mov	a,#(_trickle >> 8)
      000D62 C0 E0            [24] 3478 	push	acc
      000D64 74 80            [12] 3479 	mov	a,#0x80
      000D66 C0 E0            [24] 3480 	push	acc
      000D68 E5 81            [12] 3481 	mov	a,sp
      000D6A 24 F6            [12] 3482 	add	a,#0xf6
      000D6C F8               [12] 3483 	mov	r0,a
      000D6D E6               [12] 3484 	mov	a,@r0
      000D6E C0 E0            [24] 3485 	push	acc
      000D70 08               [12] 3486 	inc	r0
      000D71 E6               [12] 3487 	mov	a,@r0
      000D72 C0 E0            [24] 3488 	push	acc
      000D74 74 40            [12] 3489 	mov	a,#0x40
      000D76 C0 E0            [24] 3490 	push	acc
      000D78 E4               [12] 3491 	clr	a
      000D79 C0 E0            [24] 3492 	push	acc
      000D7B E5 81            [12] 3493 	mov	a,sp
      000D7D 24 F7            [12] 3494 	add	a,#0xf7
      000D7F F8               [12] 3495 	mov	r0,a
      000D80 86 82            [24] 3496 	mov	dpl,@r0
      000D82 08               [12] 3497 	inc	r0
      000D83 86 83            [24] 3498 	mov	dph,@r0
      000D85 08               [12] 3499 	inc	r0
      000D86 86 F0            [24] 3500 	mov	b,@r0
      000D88 78r00            [12] 3501 	mov	r0,#_trickle_open
      000D8A 79s00            [12] 3502 	mov	r1,#(_trickle_open >> 8)
      000D8C 7As00            [12] 3503 	mov	r2,#(_trickle_open >> 16)
      000D8E 12r00r00         [24] 3504 	lcall	__sdcc_banked_call
      000D91 E5 81            [12] 3505 	mov	a,sp
      000D93 24 F9            [12] 3506 	add	a,#0xf9
                                   3507 ;	/opt/contiki/core/net/rime/rudolph1.c:306: ipolite_open(&c->ipolite, channel + 1, 1, &ipolite);
      000D95 F5 81            [12] 3508 	mov	sp,a
      000D97 24 F9            [12] 3509 	add	a,#0xf9
      000D99 F8               [12] 3510 	mov	r0,a
      000D9A 74 01            [12] 3511 	mov	a,#0x01
      000D9C 26               [12] 3512 	add	a,@r0
      000D9D FB               [12] 3513 	mov	r3,a
      000D9E E4               [12] 3514 	clr	a
      000D9F 08               [12] 3515 	inc	r0
      000DA0 36               [12] 3516 	addc	a,@r0
      000DA1 FC               [12] 3517 	mov	r4,a
      000DA2 A8 81            [24] 3518 	mov	r0,sp
      000DA4 18               [12] 3519 	dec	r0
      000DA5 18               [12] 3520 	dec	r0
      000DA6 74 5E            [12] 3521 	mov	a,#0x5E
      000DA8 26               [12] 3522 	add	a,@r0
      000DA9 FA               [12] 3523 	mov	r2,a
      000DAA E4               [12] 3524 	clr	a
      000DAB 08               [12] 3525 	inc	r0
      000DAC 36               [12] 3526 	addc	a,@r0
      000DAD FE               [12] 3527 	mov	r6,a
      000DAE 08               [12] 3528 	inc	r0
      000DAF 86 07            [24] 3529 	mov	ar7,@r0
      000DB1 74r00            [12] 3530 	mov	a,#_ipolite
      000DB3 C0 E0            [24] 3531 	push	acc
      000DB5 74s00            [12] 3532 	mov	a,#(_ipolite >> 8)
      000DB7 C0 E0            [24] 3533 	push	acc
      000DB9 74 80            [12] 3534 	mov	a,#0x80
      000DBB C0 E0            [24] 3535 	push	acc
      000DBD 23               [12] 3536 	rl	a
      000DBE C0 E0            [24] 3537 	push	acc
      000DC0 C0 03            [24] 3538 	push	ar3
      000DC2 C0 04            [24] 3539 	push	ar4
      000DC4 8A 82            [24] 3540 	mov	dpl,r2
      000DC6 8E 83            [24] 3541 	mov	dph,r6
      000DC8 8F F0            [24] 3542 	mov	b,r7
      000DCA 78r00            [12] 3543 	mov	r0,#_ipolite_open
      000DCC 79s00            [12] 3544 	mov	r1,#(_ipolite_open >> 8)
      000DCE 7As00            [12] 3545 	mov	r2,#(_ipolite_open >> 16)
      000DD0 12r00r00         [24] 3546 	lcall	__sdcc_banked_call
      000DD3 E5 81            [12] 3547 	mov	a,sp
      000DD5 24 FA            [12] 3548 	add	a,#0xfa
      000DD7 F5 81            [12] 3549 	mov	sp,a
                                   3550 ;	/opt/contiki/core/net/rime/rudolph1.c:307: c->cb = cb;
      000DD9 A8 81            [24] 3551 	mov	r0,sp
      000DDB 18               [12] 3552 	dec	r0
      000DDC 18               [12] 3553 	dec	r0
      000DDD 74 8C            [12] 3554 	mov	a,#0x8C
      000DDF 26               [12] 3555 	add	a,@r0
      000DE0 FD               [12] 3556 	mov	r5,a
      000DE1 E4               [12] 3557 	clr	a
      000DE2 08               [12] 3558 	inc	r0
      000DE3 36               [12] 3559 	addc	a,@r0
      000DE4 FE               [12] 3560 	mov	r6,a
      000DE5 08               [12] 3561 	inc	r0
      000DE6 86 07            [24] 3562 	mov	ar7,@r0
      000DE8 8D 82            [24] 3563 	mov	dpl,r5
      000DEA 8E 83            [24] 3564 	mov	dph,r6
      000DEC 8F F0            [24] 3565 	mov	b,r7
      000DEE E5 81            [12] 3566 	mov	a,sp
      000DF0 24 F6            [12] 3567 	add	a,#0xf6
      000DF2 F8               [12] 3568 	mov	r0,a
      000DF3 E6               [12] 3569 	mov	a,@r0
      000DF4 12r00r00         [24] 3570 	lcall	__gptrput
      000DF7 A3               [24] 3571 	inc	dptr
      000DF8 08               [12] 3572 	inc	r0
      000DF9 E6               [12] 3573 	mov	a,@r0
      000DFA 12r00r00         [24] 3574 	lcall	__gptrput
      000DFD A3               [24] 3575 	inc	dptr
      000DFE 08               [12] 3576 	inc	r0
      000DFF E6               [12] 3577 	mov	a,@r0
      000E00 12r00r00         [24] 3578 	lcall	__gptrput
                                   3579 ;	/opt/contiki/core/net/rime/rudolph1.c:308: c->version = 0;
      000E03 A8 81            [24] 3580 	mov	r0,sp
      000E05 18               [12] 3581 	dec	r0
      000E06 18               [12] 3582 	dec	r0
      000E07 74 AB            [12] 3583 	mov	a,#0xAB
      000E09 26               [12] 3584 	add	a,@r0
      000E0A FD               [12] 3585 	mov	r5,a
      000E0B E4               [12] 3586 	clr	a
      000E0C 08               [12] 3587 	inc	r0
      000E0D 36               [12] 3588 	addc	a,@r0
      000E0E FE               [12] 3589 	mov	r6,a
      000E0F 08               [12] 3590 	inc	r0
      000E10 86 07            [24] 3591 	mov	ar7,@r0
      000E12 8D 82            [24] 3592 	mov	dpl,r5
      000E14 8E 83            [24] 3593 	mov	dph,r6
      000E16 8F F0            [24] 3594 	mov	b,r7
      000E18 E4               [12] 3595 	clr	a
      000E19 12r00r00         [24] 3596 	lcall	__gptrput
                                   3597 ;	/opt/contiki/core/net/rime/rudolph1.c:309: c->send_interval = DEFAULT_SEND_INTERVAL;
      000E1C A8 81            [24] 3598 	mov	r0,sp
      000E1E 18               [12] 3599 	dec	r0
      000E1F 18               [12] 3600 	dec	r0
      000E20 74 A5            [12] 3601 	mov	a,#0xA5
      000E22 26               [12] 3602 	add	a,@r0
      000E23 FD               [12] 3603 	mov	r5,a
      000E24 E4               [12] 3604 	clr	a
      000E25 08               [12] 3605 	inc	r0
      000E26 36               [12] 3606 	addc	a,@r0
      000E27 FE               [12] 3607 	mov	r6,a
      000E28 08               [12] 3608 	inc	r0
      000E29 86 07            [24] 3609 	mov	ar7,@r0
      000E2B 8D 82            [24] 3610 	mov	dpl,r5
      000E2D 8E 83            [24] 3611 	mov	dph,r6
      000E2F 8F F0            [24] 3612 	mov	b,r7
      000E31 E4               [12] 3613 	clr	a
      000E32 12r00r00         [24] 3614 	lcall	__gptrput
      000E35 A3               [24] 3615 	inc	dptr
      000E36 04               [12] 3616 	inc	a
      000E37 12r00r00         [24] 3617 	lcall	__gptrput
      000E3A 15 81            [12] 3618 	dec	sp
      000E3C 15 81            [12] 3619 	dec	sp
      000E3E 15 81            [12] 3620 	dec	sp
      000E40 02r00r00         [24] 3621 	ljmp	__sdcc_banked_ret
                                   3622 ;------------------------------------------------------------
                                   3623 ;Allocation info for local variables in function 'rudolph1_close'
                                   3624 ;------------------------------------------------------------
                                   3625 ;c                         Allocated to registers r5 r6 r7 
                                   3626 ;------------------------------------------------------------
                                   3627 ;	/opt/contiki/core/net/rime/rudolph1.c:313: rudolph1_close(struct rudolph1_conn *c)
                                   3628 ;	-----------------------------------------
                                   3629 ;	 function rudolph1_close
                                   3630 ;	-----------------------------------------
      000E43                       3631 _rudolph1_close:
                                   3632 ;	/opt/contiki/core/net/rime/rudolph1.c:315: trickle_close(&c->trickle);
      000E43 AD 82            [24] 3633 	mov	r5,dpl
      000E45 AE 83            [24] 3634 	mov	r6,dph
      000E47 AF F0            [24] 3635 	mov	r7,b
      000E49 C0 07            [24] 3636 	push	ar7
      000E4B C0 06            [24] 3637 	push	ar6
      000E4D C0 05            [24] 3638 	push	ar5
      000E4F 78r00            [12] 3639 	mov	r0,#_trickle_close
      000E51 79s00            [12] 3640 	mov	r1,#(_trickle_close >> 8)
      000E53 7As00            [12] 3641 	mov	r2,#(_trickle_close >> 16)
      000E55 12r00r00         [24] 3642 	lcall	__sdcc_banked_call
      000E58 D0 05            [24] 3643 	pop	ar5
      000E5A D0 06            [24] 3644 	pop	ar6
      000E5C D0 07            [24] 3645 	pop	ar7
                                   3646 ;	/opt/contiki/core/net/rime/rudolph1.c:316: ipolite_close(&c->ipolite);
      000E5E 74 5E            [12] 3647 	mov	a,#0x5E
      000E60 2D               [12] 3648 	add	a,r5
      000E61 FD               [12] 3649 	mov	r5,a
      000E62 E4               [12] 3650 	clr	a
      000E63 3E               [12] 3651 	addc	a,r6
      000E64 FE               [12] 3652 	mov	r6,a
      000E65 8D 82            [24] 3653 	mov	dpl,r5
      000E67 8E 83            [24] 3654 	mov	dph,r6
      000E69 8F F0            [24] 3655 	mov	b,r7
      000E6B 78r00            [12] 3656 	mov	r0,#_ipolite_close
      000E6D 79s00            [12] 3657 	mov	r1,#(_ipolite_close >> 8)
      000E6F 7As00            [12] 3658 	mov	r2,#(_ipolite_close >> 16)
      000E71 12r00r00         [24] 3659 	lcall	__sdcc_banked_call
      000E74 02r00r00         [24] 3660 	ljmp	__sdcc_banked_ret
                                   3661 ;------------------------------------------------------------
                                   3662 ;Allocation info for local variables in function 'rudolph1_send'
                                   3663 ;------------------------------------------------------------
                                   3664 ;send_interval             Allocated to stack - sp -7
                                   3665 ;c                         Allocated to stack - sp -2
                                   3666 ;------------------------------------------------------------
                                   3667 ;	/opt/contiki/core/net/rime/rudolph1.c:320: rudolph1_send(struct rudolph1_conn *c, clock_time_t send_interval)
                                   3668 ;	-----------------------------------------
                                   3669 ;	 function rudolph1_send
                                   3670 ;	-----------------------------------------
      000E77                       3671 _rudolph1_send:
      000E77 C0 82            [24] 3672 	push	dpl
      000E79 C0 83            [24] 3673 	push	dph
      000E7B C0 F0            [24] 3674 	push	b
                                   3675 ;	/opt/contiki/core/net/rime/rudolph1.c:322: c->version++;
      000E7D A8 81            [24] 3676 	mov	r0,sp
      000E7F 18               [12] 3677 	dec	r0
      000E80 18               [12] 3678 	dec	r0
      000E81 74 AB            [12] 3679 	mov	a,#0xAB
      000E83 26               [12] 3680 	add	a,@r0
      000E84 FA               [12] 3681 	mov	r2,a
      000E85 E4               [12] 3682 	clr	a
      000E86 08               [12] 3683 	inc	r0
      000E87 36               [12] 3684 	addc	a,@r0
      000E88 FB               [12] 3685 	mov	r3,a
      000E89 08               [12] 3686 	inc	r0
      000E8A 86 04            [24] 3687 	mov	ar4,@r0
      000E8C 8A 82            [24] 3688 	mov	dpl,r2
      000E8E 8B 83            [24] 3689 	mov	dph,r3
      000E90 8C F0            [24] 3690 	mov	b,r4
      000E92 12r00r00         [24] 3691 	lcall	__gptrget
      000E95 FF               [12] 3692 	mov	r7,a
      000E96 0F               [12] 3693 	inc	r7
      000E97 8A 82            [24] 3694 	mov	dpl,r2
      000E99 8B 83            [24] 3695 	mov	dph,r3
      000E9B 8C F0            [24] 3696 	mov	b,r4
      000E9D EF               [12] 3697 	mov	a,r7
      000E9E 12r00r00         [24] 3698 	lcall	__gptrput
                                   3699 ;	/opt/contiki/core/net/rime/rudolph1.c:323: c->chunk = c->highest_chunk_heard = 0;
      000EA1 A8 81            [24] 3700 	mov	r0,sp
      000EA3 18               [12] 3701 	dec	r0
      000EA4 18               [12] 3702 	dec	r0
      000EA5 74 A7            [12] 3703 	mov	a,#0xA7
      000EA7 26               [12] 3704 	add	a,@r0
      000EA8 FD               [12] 3705 	mov	r5,a
      000EA9 E4               [12] 3706 	clr	a
      000EAA 08               [12] 3707 	inc	r0
      000EAB 36               [12] 3708 	addc	a,@r0
      000EAC FE               [12] 3709 	mov	r6,a
      000EAD 08               [12] 3710 	inc	r0
      000EAE 86 07            [24] 3711 	mov	ar7,@r0
      000EB0 A8 81            [24] 3712 	mov	r0,sp
      000EB2 18               [12] 3713 	dec	r0
      000EB3 18               [12] 3714 	dec	r0
      000EB4 74 A9            [12] 3715 	mov	a,#0xA9
      000EB6 26               [12] 3716 	add	a,@r0
      000EB7 FA               [12] 3717 	mov	r2,a
      000EB8 E4               [12] 3718 	clr	a
      000EB9 08               [12] 3719 	inc	r0
      000EBA 36               [12] 3720 	addc	a,@r0
      000EBB FB               [12] 3721 	mov	r3,a
      000EBC 08               [12] 3722 	inc	r0
      000EBD 86 04            [24] 3723 	mov	ar4,@r0
      000EBF 8A 82            [24] 3724 	mov	dpl,r2
      000EC1 8B 83            [24] 3725 	mov	dph,r3
      000EC3 8C F0            [24] 3726 	mov	b,r4
      000EC5 E4               [12] 3727 	clr	a
      000EC6 12r00r00         [24] 3728 	lcall	__gptrput
      000EC9 A3               [24] 3729 	inc	dptr
      000ECA 12r00r00         [24] 3730 	lcall	__gptrput
      000ECD 8D 82            [24] 3731 	mov	dpl,r5
      000ECF 8E 83            [24] 3732 	mov	dph,r6
      000ED1 8F F0            [24] 3733 	mov	b,r7
      000ED3 12r00r00         [24] 3734 	lcall	__gptrput
      000ED6 A3               [24] 3735 	inc	dptr
      000ED7 12r00r00         [24] 3736 	lcall	__gptrput
                                   3737 ;	/opt/contiki/core/net/rime/rudolph1.c:325: format_data(c, 0);
      000EDA C0 E0            [24] 3738 	push	acc
      000EDC C0 E0            [24] 3739 	push	acc
      000EDE E5 81            [12] 3740 	mov	a,sp
      000EE0 24 FC            [12] 3741 	add	a,#0xfc
      000EE2 F8               [12] 3742 	mov	r0,a
      000EE3 86 82            [24] 3743 	mov	dpl,@r0
      000EE5 08               [12] 3744 	inc	r0
      000EE6 86 83            [24] 3745 	mov	dph,@r0
      000EE8 08               [12] 3746 	inc	r0
      000EE9 86 F0            [24] 3747 	mov	b,@r0
      000EEB 78rD2            [12] 3748 	mov	r0,#_format_data
      000EED 79s00            [12] 3749 	mov	r1,#(_format_data >> 8)
      000EEF 7As00            [12] 3750 	mov	r2,#(_format_data >> 16)
      000EF1 12r00r00         [24] 3751 	lcall	__sdcc_banked_call
      000EF4 15 81            [12] 3752 	dec	sp
      000EF6 15 81            [12] 3753 	dec	sp
                                   3754 ;	/opt/contiki/core/net/rime/rudolph1.c:326: trickle_send(&c->trickle);
      000EF8 A8 81            [24] 3755 	mov	r0,sp
      000EFA 18               [12] 3756 	dec	r0
      000EFB 18               [12] 3757 	dec	r0
      000EFC 86 82            [24] 3758 	mov	dpl,@r0
      000EFE 08               [12] 3759 	inc	r0
      000EFF 86 83            [24] 3760 	mov	dph,@r0
      000F01 08               [12] 3761 	inc	r0
      000F02 86 F0            [24] 3762 	mov	b,@r0
      000F04 78r00            [12] 3763 	mov	r0,#_trickle_send
      000F06 79s00            [12] 3764 	mov	r1,#(_trickle_send >> 8)
      000F08 7As00            [12] 3765 	mov	r2,#(_trickle_send >> 16)
      000F0A 12r00r00         [24] 3766 	lcall	__sdcc_banked_call
                                   3767 ;	/opt/contiki/core/net/rime/rudolph1.c:327: c->chunk++;
      000F0D A8 81            [24] 3768 	mov	r0,sp
      000F0F 18               [12] 3769 	dec	r0
      000F10 18               [12] 3770 	dec	r0
      000F11 74 A7            [12] 3771 	mov	a,#0xA7
      000F13 26               [12] 3772 	add	a,@r0
      000F14 FD               [12] 3773 	mov	r5,a
      000F15 E4               [12] 3774 	clr	a
      000F16 08               [12] 3775 	inc	r0
      000F17 36               [12] 3776 	addc	a,@r0
      000F18 FE               [12] 3777 	mov	r6,a
      000F19 08               [12] 3778 	inc	r0
      000F1A 86 07            [24] 3779 	mov	ar7,@r0
      000F1C 8D 82            [24] 3780 	mov	dpl,r5
      000F1E 8E 83            [24] 3781 	mov	dph,r6
      000F20 8F F0            [24] 3782 	mov	b,r7
      000F22 12r00r00         [24] 3783 	lcall	__gptrget
      000F25 FB               [12] 3784 	mov	r3,a
      000F26 A3               [24] 3785 	inc	dptr
      000F27 12r00r00         [24] 3786 	lcall	__gptrget
      000F2A FC               [12] 3787 	mov	r4,a
      000F2B 0B               [12] 3788 	inc	r3
      000F2C BB 00 01         [24] 3789 	cjne	r3,#0x00,00103$
      000F2F 0C               [12] 3790 	inc	r4
      000F30                       3791 00103$:
      000F30 8D 82            [24] 3792 	mov	dpl,r5
      000F32 8E 83            [24] 3793 	mov	dph,r6
      000F34 8F F0            [24] 3794 	mov	b,r7
      000F36 EB               [12] 3795 	mov	a,r3
      000F37 12r00r00         [24] 3796 	lcall	__gptrput
      000F3A A3               [24] 3797 	inc	dptr
      000F3B EC               [12] 3798 	mov	a,r4
      000F3C 12r00r00         [24] 3799 	lcall	__gptrput
                                   3800 ;	/opt/contiki/core/net/rime/rudolph1.c:328: c->send_interval = send_interval;
      000F3F A8 81            [24] 3801 	mov	r0,sp
      000F41 18               [12] 3802 	dec	r0
      000F42 18               [12] 3803 	dec	r0
      000F43 74 A5            [12] 3804 	mov	a,#0xA5
      000F45 26               [12] 3805 	add	a,@r0
      000F46 FD               [12] 3806 	mov	r5,a
      000F47 E4               [12] 3807 	clr	a
      000F48 08               [12] 3808 	inc	r0
      000F49 36               [12] 3809 	addc	a,@r0
      000F4A FE               [12] 3810 	mov	r6,a
      000F4B 08               [12] 3811 	inc	r0
      000F4C 86 07            [24] 3812 	mov	ar7,@r0
      000F4E 8D 82            [24] 3813 	mov	dpl,r5
      000F50 8E 83            [24] 3814 	mov	dph,r6
      000F52 8F F0            [24] 3815 	mov	b,r7
      000F54 E5 81            [12] 3816 	mov	a,sp
      000F56 24 F9            [12] 3817 	add	a,#0xf9
      000F58 F8               [12] 3818 	mov	r0,a
      000F59 E6               [12] 3819 	mov	a,@r0
      000F5A 12r00r00         [24] 3820 	lcall	__gptrput
      000F5D A3               [24] 3821 	inc	dptr
      000F5E 08               [12] 3822 	inc	r0
      000F5F E6               [12] 3823 	mov	a,@r0
      000F60 12r00r00         [24] 3824 	lcall	__gptrput
                                   3825 ;	/opt/contiki/core/net/rime/rudolph1.c:329: ctimer_set(&c->t, send_interval, send_next_packet, c);
      000F63 A8 81            [24] 3826 	mov	r0,sp
      000F65 18               [12] 3827 	dec	r0
      000F66 18               [12] 3828 	dec	r0
      000F67 86 05            [24] 3829 	mov	ar5,@r0
      000F69 08               [12] 3830 	inc	r0
      000F6A 86 06            [24] 3831 	mov	ar6,@r0
      000F6C 08               [12] 3832 	inc	r0
      000F6D 86 07            [24] 3833 	mov	ar7,@r0
      000F6F A8 81            [24] 3834 	mov	r0,sp
      000F71 18               [12] 3835 	dec	r0
      000F72 18               [12] 3836 	dec	r0
      000F73 74 8F            [12] 3837 	mov	a,#0x8F
      000F75 26               [12] 3838 	add	a,@r0
      000F76 FA               [12] 3839 	mov	r2,a
      000F77 E4               [12] 3840 	clr	a
      000F78 08               [12] 3841 	inc	r0
      000F79 36               [12] 3842 	addc	a,@r0
      000F7A FB               [12] 3843 	mov	r3,a
      000F7B 08               [12] 3844 	inc	r0
      000F7C 86 04            [24] 3845 	mov	ar4,@r0
      000F7E C0 05            [24] 3846 	push	ar5
      000F80 C0 06            [24] 3847 	push	ar6
      000F82 C0 07            [24] 3848 	push	ar7
      000F84 74rF9            [12] 3849 	mov	a,#_send_next_packet
      000F86 C0 E0            [24] 3850 	push	acc
      000F88 74s0A            [12] 3851 	mov	a,#(_send_next_packet >> 8)
      000F8A C0 E0            [24] 3852 	push	acc
      000F8C 74s00            [12] 3853 	mov	a,#(_send_next_packet >> 16)
      000F8E C0 E0            [24] 3854 	push	acc
      000F90 E5 81            [12] 3855 	mov	a,sp
      000F92 24 F3            [12] 3856 	add	a,#0xf3
      000F94 F8               [12] 3857 	mov	r0,a
      000F95 E6               [12] 3858 	mov	a,@r0
      000F96 C0 E0            [24] 3859 	push	acc
      000F98 08               [12] 3860 	inc	r0
      000F99 E6               [12] 3861 	mov	a,@r0
      000F9A C0 E0            [24] 3862 	push	acc
      000F9C 8A 82            [24] 3863 	mov	dpl,r2
      000F9E 8B 83            [24] 3864 	mov	dph,r3
      000FA0 8C F0            [24] 3865 	mov	b,r4
      000FA2 78r00            [12] 3866 	mov	r0,#_ctimer_set
      000FA4 79s00            [12] 3867 	mov	r1,#(_ctimer_set >> 8)
      000FA6 7As00            [12] 3868 	mov	r2,#(_ctimer_set >> 16)
      000FA8 12r00r00         [24] 3869 	lcall	__sdcc_banked_call
      000FAB E5 81            [12] 3870 	mov	a,sp
      000FAD 24 F8            [12] 3871 	add	a,#0xf8
      000FAF F5 81            [12] 3872 	mov	sp,a
      000FB1 15 81            [12] 3873 	dec	sp
      000FB3 15 81            [12] 3874 	dec	sp
      000FB5 15 81            [12] 3875 	dec	sp
      000FB7 02r00r00         [24] 3876 	ljmp	__sdcc_banked_ret
                                   3877 ;------------------------------------------------------------
                                   3878 ;Allocation info for local variables in function 'rudolph1_stop'
                                   3879 ;------------------------------------------------------------
                                   3880 ;c                         Allocated to registers r5 r6 r7 
                                   3881 ;------------------------------------------------------------
                                   3882 ;	/opt/contiki/core/net/rime/rudolph1.c:333: rudolph1_stop(struct rudolph1_conn *c)
                                   3883 ;	-----------------------------------------
                                   3884 ;	 function rudolph1_stop
                                   3885 ;	-----------------------------------------
      000FBA                       3886 _rudolph1_stop:
      000FBA AD 82            [24] 3887 	mov	r5,dpl
      000FBC AE 83            [24] 3888 	mov	r6,dph
      000FBE AF F0            [24] 3889 	mov	r7,b
                                   3890 ;	/opt/contiki/core/net/rime/rudolph1.c:335: ctimer_stop(&c->t);
      000FC0 74 8F            [12] 3891 	mov	a,#0x8F
      000FC2 2D               [12] 3892 	add	a,r5
      000FC3 FD               [12] 3893 	mov	r5,a
      000FC4 E4               [12] 3894 	clr	a
      000FC5 3E               [12] 3895 	addc	a,r6
      000FC6 FE               [12] 3896 	mov	r6,a
      000FC7 8D 82            [24] 3897 	mov	dpl,r5
      000FC9 8E 83            [24] 3898 	mov	dph,r6
      000FCB 8F F0            [24] 3899 	mov	b,r7
      000FCD 78r00            [12] 3900 	mov	r0,#_ctimer_stop
      000FCF 79s00            [12] 3901 	mov	r1,#(_ctimer_stop >> 8)
      000FD1 7As00            [12] 3902 	mov	r2,#(_ctimer_stop >> 16)
      000FD3 12r00r00         [24] 3903 	lcall	__sdcc_banked_call
      000FD6 02r00r00         [24] 3904 	ljmp	__sdcc_banked_ret
                                   3905 	.area CSEG    (CODE)
                                   3906 	.area CONST   (CODE)
      000000                       3907 _ipolite:
      000000rF9s08s00              3908 	.byte _recv_ipolite, (_recv_ipolite >> 8), (_recv_ipolite >> 16)
      000003rF3s08s00              3909 	.byte _sent_ipolite, (_sent_ipolite >> 8), (_sent_ipolite >> 16)
      000006rF6s08s00              3910 	.byte _dropped_ipolite, (_dropped_ipolite >> 8), (_dropped_ipolite >> 16)
      000009                       3911 _trickle:
      000009rA9s08s00              3912 	.byte _recv_trickle, (_recv_trickle >> 8), (_recv_trickle >> 16)
                                   3913 	.area XINIT   (CODE)
                                   3914 	.area CABS    (ABS,CODE)
