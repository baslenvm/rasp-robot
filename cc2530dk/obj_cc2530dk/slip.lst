                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.5 #9380 (Linux)
                                      4 ; This file was generated Tue Nov 17 16:52:49 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module slip
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _slip_arch_writeb
                                     13 	.globl _uip_ipchksum
                                     14 	.globl _uip_htons
                                     15 	.globl _tcpip_input
                                     16 	.globl _process_poll
                                     17 	.globl _memset
                                     18 	.globl _strncmp
                                     19 	.globl _memcmp
                                     20 	.globl _memcpy
                                     21 	.globl _ACTIVE
                                     22 	.globl _TX_BYTE
                                     23 	.globl _RX_BYTE
                                     24 	.globl _ERR
                                     25 	.globl _FE
                                     26 	.globl _SLAVE
                                     27 	.globl _RE
                                     28 	.globl _MODE
                                     29 	.globl _T3OVFIF
                                     30 	.globl _T3CH0IF
                                     31 	.globl _T3CH1IF
                                     32 	.globl _T4OVFIF
                                     33 	.globl _T4CH0IF
                                     34 	.globl _T4CH1IF
                                     35 	.globl _OVFIM
                                     36 	.globl _B_0
                                     37 	.globl _B_1
                                     38 	.globl _B_2
                                     39 	.globl _B_3
                                     40 	.globl _B_4
                                     41 	.globl _B_5
                                     42 	.globl _B_6
                                     43 	.globl _B_7
                                     44 	.globl _P2IF
                                     45 	.globl _UTX0IF
                                     46 	.globl _UTX1IF
                                     47 	.globl _P1IF
                                     48 	.globl _WDTIF
                                     49 	.globl _ACC_0
                                     50 	.globl _ACC_1
                                     51 	.globl _ACC_2
                                     52 	.globl _ACC_3
                                     53 	.globl _ACC_4
                                     54 	.globl _ACC_5
                                     55 	.globl _ACC_6
                                     56 	.globl _ACC_7
                                     57 	.globl _P
                                     58 	.globl _F1
                                     59 	.globl _OV
                                     60 	.globl _RS0
                                     61 	.globl _RS1
                                     62 	.globl _F0
                                     63 	.globl _AC
                                     64 	.globl _CY
                                     65 	.globl _DMAIF
                                     66 	.globl _T1IF
                                     67 	.globl _T2IF
                                     68 	.globl _T3IF
                                     69 	.globl _T4IF
                                     70 	.globl _P0IF
                                     71 	.globl _STIF
                                     72 	.globl _DMAIE
                                     73 	.globl _T1IE
                                     74 	.globl _T2IE
                                     75 	.globl _T3IE
                                     76 	.globl _T4IE
                                     77 	.globl _P0IE
                                     78 	.globl _RFERRIE
                                     79 	.globl _ADCIE
                                     80 	.globl _URX0IE
                                     81 	.globl _URX1IE
                                     82 	.globl _ENCIE
                                     83 	.globl _STIE
                                     84 	.globl _EA
                                     85 	.globl _P2_0
                                     86 	.globl _P2_1
                                     87 	.globl _P2_2
                                     88 	.globl _P2_3
                                     89 	.globl _P2_4
                                     90 	.globl _P2_5
                                     91 	.globl _P2_6
                                     92 	.globl _P2_7
                                     93 	.globl _ENCIF_0
                                     94 	.globl _ENCIF_1
                                     95 	.globl _P1_0
                                     96 	.globl _P1_1
                                     97 	.globl _P1_2
                                     98 	.globl _P1_3
                                     99 	.globl _P1_4
                                    100 	.globl _P1_5
                                    101 	.globl _P1_6
                                    102 	.globl _P1_7
                                    103 	.globl _IT0
                                    104 	.globl _RFERRIF
                                    105 	.globl _IT1
                                    106 	.globl _URX0IF
                                    107 	.globl _ADCIF
                                    108 	.globl _URX1IF
                                    109 	.globl _P0_0
                                    110 	.globl _P0_1
                                    111 	.globl _P0_2
                                    112 	.globl _P0_3
                                    113 	.globl _P0_4
                                    114 	.globl _P0_5
                                    115 	.globl _P0_6
                                    116 	.globl _P0_7
                                    117 	.globl _WDCTL
                                    118 	.globl _U1GCR
                                    119 	.globl _U1UCR
                                    120 	.globl _U1BAUD
                                    121 	.globl _U1DBUF
                                    122 	.globl _U1CSR
                                    123 	.globl _U0GCR
                                    124 	.globl _U0UCR
                                    125 	.globl _U0BAUD
                                    126 	.globl _U0DBUF
                                    127 	.globl _U0CSR
                                    128 	.globl _TIMIF
                                    129 	.globl _T4CC1
                                    130 	.globl _T4CCTL1
                                    131 	.globl _T4CC0
                                    132 	.globl _T4CCTL0
                                    133 	.globl _T4CTL
                                    134 	.globl _T4CNT
                                    135 	.globl _T3CC1
                                    136 	.globl _T3CCTL1
                                    137 	.globl _T3CC0
                                    138 	.globl _T3CCTL0
                                    139 	.globl _T3CTL
                                    140 	.globl _T3CNT
                                    141 	.globl _T2MSEL
                                    142 	.globl _T2IRQM
                                    143 	.globl _T2MOVF2
                                    144 	.globl _T2MOVF1
                                    145 	.globl _T2MOVF0
                                    146 	.globl _T2M1
                                    147 	.globl _T2M0
                                    148 	.globl _T2IRQF
                                    149 	.globl _T2EVTCFG
                                    150 	.globl _T2CTRL
                                    151 	.globl _T1STAT
                                    152 	.globl _T1CCTL2
                                    153 	.globl _T1CCTL1
                                    154 	.globl _T1CCTL0
                                    155 	.globl _T1CTL
                                    156 	.globl _T1CNTH
                                    157 	.globl _T1CNTL
                                    158 	.globl _T1CC2H
                                    159 	.globl _T1CC2L
                                    160 	.globl _T1CC1H
                                    161 	.globl _T1CC1L
                                    162 	.globl _T1CC0H
                                    163 	.globl _T1CC0L
                                    164 	.globl _CLKCONSTA
                                    165 	.globl _CLKCONCMD
                                    166 	.globl _SLEEPSTA
                                    167 	.globl _SLEEPCMD
                                    168 	.globl _STLOAD
                                    169 	.globl _ST2
                                    170 	.globl _ST1
                                    171 	.globl _ST0
                                    172 	.globl _RFERRF
                                    173 	.globl _RFIRQF0
                                    174 	.globl _RFST
                                    175 	.globl _RFD
                                    176 	.globl _RFIRQF1
                                    177 	.globl _PSBANK
                                    178 	.globl _FMAP
                                    179 	.globl _MEMCTR
                                    180 	.globl __XPAGE
                                    181 	.globl _MPAGE
                                    182 	.globl _PMUX
                                    183 	.globl _P2DIR
                                    184 	.globl _P1DIR
                                    185 	.globl _P0DIR
                                    186 	.globl _P2INP
                                    187 	.globl _P1INP
                                    188 	.globl _P2SEL
                                    189 	.globl _P1SEL
                                    190 	.globl _P0SEL
                                    191 	.globl _APCFG
                                    192 	.globl _PERCFG
                                    193 	.globl _P0INP
                                    194 	.globl _P2IEN
                                    195 	.globl _P1IEN
                                    196 	.globl _P0IEN
                                    197 	.globl _PICTL
                                    198 	.globl _P2IFG
                                    199 	.globl _P1IFG
                                    200 	.globl _P0IFG
                                    201 	.globl _DMAREQ
                                    202 	.globl _DMAARM
                                    203 	.globl _DMA0CFGH
                                    204 	.globl _DMA0CFGL
                                    205 	.globl _DMA1CFGH
                                    206 	.globl _DMA1CFGL
                                    207 	.globl _DMAIRQ
                                    208 	.globl _ENCCS
                                    209 	.globl _ENCDO
                                    210 	.globl _ENCDI
                                    211 	.globl _RNDH
                                    212 	.globl _RNDL
                                    213 	.globl _ADCH
                                    214 	.globl _ADCL
                                    215 	.globl _ADCCON3
                                    216 	.globl _ADCCON2
                                    217 	.globl _ADCCON1
                                    218 	.globl _B
                                    219 	.globl _IRCON2
                                    220 	.globl _ACC
                                    221 	.globl _PSW
                                    222 	.globl _IRCON
                                    223 	.globl _IP1
                                    224 	.globl _IEN1
                                    225 	.globl _IP0
                                    226 	.globl _IEN0
                                    227 	.globl _P2
                                    228 	.globl _S1CON
                                    229 	.globl _IEN2
                                    230 	.globl _S0CON
                                    231 	.globl _DPS
                                    232 	.globl _P1
                                    233 	.globl _TCON
                                    234 	.globl _PCON
                                    235 	.globl _DPH1
                                    236 	.globl _DPL1
                                    237 	.globl _DPH0
                                    238 	.globl _DPL0
                                    239 	.globl _SP
                                    240 	.globl _P0
                                    241 	.globl _slip_process
                                    242 	.globl _slip_active
                                    243 	.globl _X_IEEE_ADDR
                                    244 	.globl _X_INFOPAGE
                                    245 	.globl _X_P2DIR
                                    246 	.globl _X_P1DIR
                                    247 	.globl _X_P0DIR
                                    248 	.globl _X_U1GCR
                                    249 	.globl _X_U1UCR
                                    250 	.globl _X_U1BAUD
                                    251 	.globl _X_U1DBUF
                                    252 	.globl _X_U1CSR
                                    253 	.globl _X_P2INP
                                    254 	.globl _X_P1INP
                                    255 	.globl _X_P2SEL
                                    256 	.globl _X_P1SEL
                                    257 	.globl _X_P0SEL
                                    258 	.globl _X_APCFG
                                    259 	.globl _X_PERCFG
                                    260 	.globl _X_T4CC1
                                    261 	.globl _X_T4CCTL1
                                    262 	.globl _X_T4CC0
                                    263 	.globl _X_T4CCTL0
                                    264 	.globl _X_T4CTL
                                    265 	.globl _X_T4CNT
                                    266 	.globl _X_RFIRQF0
                                    267 	.globl _X_T1CCTL2
                                    268 	.globl _X_T1CCTL1
                                    269 	.globl _X_T1CCTL0
                                    270 	.globl _X_T1CTL
                                    271 	.globl _X_T1CNTH
                                    272 	.globl _X_T1CNTL
                                    273 	.globl _X_RFST
                                    274 	.globl _X_T1CC2H
                                    275 	.globl _X_T1CC2L
                                    276 	.globl _X_T1CC1H
                                    277 	.globl _X_T1CC1L
                                    278 	.globl _X_T1CC0H
                                    279 	.globl _X_T1CC0L
                                    280 	.globl _X_RFD
                                    281 	.globl _X_TIMIF
                                    282 	.globl _X_DMAREQ
                                    283 	.globl _X_DMAARM
                                    284 	.globl _X_DMA0CFGH
                                    285 	.globl _X_DMA0CFGL
                                    286 	.globl _X_DMA1CFGH
                                    287 	.globl _X_DMA1CFGL
                                    288 	.globl _X_DMAIRQ
                                    289 	.globl _X_T3CC1
                                    290 	.globl _X_T3CCTL1
                                    291 	.globl _X_T3CC0
                                    292 	.globl _X_T3CCTL0
                                    293 	.globl _X_T3CTL
                                    294 	.globl _X_T3CNT
                                    295 	.globl _X_WDCTL
                                    296 	.globl _X_MEMCTR
                                    297 	.globl _X_CLKCONCMD
                                    298 	.globl _X_U0GCR
                                    299 	.globl _X_U0UCR
                                    300 	.globl _X_T2MSEL
                                    301 	.globl _X_U0BAUD
                                    302 	.globl _X_U0DBUF
                                    303 	.globl _X_RFERRF
                                    304 	.globl _X_SLEEPCMD
                                    305 	.globl _X_RNDH
                                    306 	.globl _X_RNDL
                                    307 	.globl _X_ADCH
                                    308 	.globl _X_ADCL
                                    309 	.globl _X_ADCCON3
                                    310 	.globl _X_ADCCON2
                                    311 	.globl _X_ADCCON1
                                    312 	.globl _X_ENCCS
                                    313 	.globl _X_ENCDO
                                    314 	.globl _X_ENCDI
                                    315 	.globl _X_T1STAT
                                    316 	.globl _X_PMUX
                                    317 	.globl _X_STLOAD
                                    318 	.globl _X_P2IEN
                                    319 	.globl _X_P0IEN
                                    320 	.globl _X_T2IRQM
                                    321 	.globl _X_T2MOVF2
                                    322 	.globl _X_T2MOVF1
                                    323 	.globl _X_T2MOVF0
                                    324 	.globl _X_T2M1
                                    325 	.globl _X_T2M0
                                    326 	.globl _X_T2IRQF
                                    327 	.globl _X_P2
                                    328 	.globl _X_PSBANK
                                    329 	.globl _X_FMAP
                                    330 	.globl _X_CLKCONSTA
                                    331 	.globl _X_SLEEPSTA
                                    332 	.globl _X_T2EVTCFG
                                    333 	.globl _X_ST2
                                    334 	.globl _X_ST1
                                    335 	.globl _X_ST0
                                    336 	.globl _X_T2CTRL
                                    337 	.globl _X__XPAGE
                                    338 	.globl _X_MPAGE
                                    339 	.globl _X_RFIRQF1
                                    340 	.globl _X_P1
                                    341 	.globl _X_P0INP
                                    342 	.globl _X_P1IEN
                                    343 	.globl _X_PICTL
                                    344 	.globl _X_P2IFG
                                    345 	.globl _X_P1IFG
                                    346 	.globl _X_P0IFG
                                    347 	.globl _X_U0CSR
                                    348 	.globl _X_P0
                                    349 	.globl _USBF5
                                    350 	.globl _USBF4
                                    351 	.globl _USBF3
                                    352 	.globl _USBF2
                                    353 	.globl _USBF1
                                    354 	.globl _USBF0
                                    355 	.globl _USBCNTH
                                    356 	.globl _USBCNTL
                                    357 	.globl _USBCNT0
                                    358 	.globl _USBCSOH
                                    359 	.globl _USBCSOL
                                    360 	.globl _USBMAXO
                                    361 	.globl _USBCSIH
                                    362 	.globl _USBCSIL
                                    363 	.globl _USBCS0
                                    364 	.globl _USBMAXI
                                    365 	.globl _USBCTRL
                                    366 	.globl _USBINDEX
                                    367 	.globl _USBFRMH
                                    368 	.globl _USBFRML
                                    369 	.globl _USBCIE
                                    370 	.globl _USBOIE
                                    371 	.globl _USBIIE
                                    372 	.globl _USBCIF
                                    373 	.globl _USBOIF
                                    374 	.globl _USBIIF
                                    375 	.globl _USBPOW
                                    376 	.globl _USBADDR
                                    377 	.globl _CSPT
                                    378 	.globl _CSPZ
                                    379 	.globl _CSPY
                                    380 	.globl _CSPX
                                    381 	.globl _CSPSTAT
                                    382 	.globl _CSPCTRL
                                    383 	.globl _CSPPROG23
                                    384 	.globl _CSPPROG22
                                    385 	.globl _CSPPROG21
                                    386 	.globl _CSPPROG20
                                    387 	.globl _CSPPROG19
                                    388 	.globl _CSPPROG18
                                    389 	.globl _CSPPROG17
                                    390 	.globl _CSPPROG16
                                    391 	.globl _CSPPROG15
                                    392 	.globl _CSPPROG14
                                    393 	.globl _CSPPROG13
                                    394 	.globl _CSPPROG12
                                    395 	.globl _CSPPROG11
                                    396 	.globl _CSPPROG10
                                    397 	.globl _CSPPROG9
                                    398 	.globl _CSPPROG8
                                    399 	.globl _CSPPROG7
                                    400 	.globl _CSPPROG6
                                    401 	.globl _CSPPROG5
                                    402 	.globl _CSPPROG4
                                    403 	.globl _CSPPROG3
                                    404 	.globl _CSPPROG2
                                    405 	.globl _CSPPROG1
                                    406 	.globl _CSPPROG0
                                    407 	.globl _RFC_OBS_CTRL2
                                    408 	.globl _RFC_OBS_CTRL1
                                    409 	.globl _RFC_OBS_CTRL0
                                    410 	.globl _TXFILTCFG
                                    411 	.globl _PTEST1
                                    412 	.globl _PTEST0
                                    413 	.globl _ATEST
                                    414 	.globl _DACTEST2
                                    415 	.globl _DACTEST1
                                    416 	.globl _DACTEST0
                                    417 	.globl _MDMTEST1
                                    418 	.globl _MDMTEST0
                                    419 	.globl _ADCTEST2
                                    420 	.globl _ADCTEST1
                                    421 	.globl _ADCTEST0
                                    422 	.globl _AGCCTRL3
                                    423 	.globl _AGCCTRL2
                                    424 	.globl _AGCCTRL1
                                    425 	.globl _AGCCTRL0
                                    426 	.globl _FSCAL3
                                    427 	.globl _FSCAL2
                                    428 	.globl _FSCAL1
                                    429 	.globl _FSCAL0
                                    430 	.globl _FSCTRL
                                    431 	.globl _RXCTRL
                                    432 	.globl _FREQEST
                                    433 	.globl _MDMCTRL1
                                    434 	.globl _MDMCTRL0
                                    435 	.globl _RFRND
                                    436 	.globl _RFERRM
                                    437 	.globl _RFIRQM1
                                    438 	.globl _RFIRQM0
                                    439 	.globl _TXLAST_PTR
                                    440 	.globl _TXFIRST_PTR
                                    441 	.globl _RXP1_PTR
                                    442 	.globl _RXLAST_PTR
                                    443 	.globl _RXFIRST_PTR
                                    444 	.globl _TXFIFOCNT
                                    445 	.globl _RXFIFOCNT
                                    446 	.globl _RXFIRST
                                    447 	.globl _RSSISTAT
                                    448 	.globl _RSSI
                                    449 	.globl _CCACTRL1
                                    450 	.globl _CCACTRL0
                                    451 	.globl _FSMCTRL
                                    452 	.globl _FIFOPCTRL
                                    453 	.globl _FSMSTAT1
                                    454 	.globl _FSMSTAT0
                                    455 	.globl _TXCTRL
                                    456 	.globl _TXPOWER
                                    457 	.globl _FREQCTRL
                                    458 	.globl _FREQTUNE
                                    459 	.globl _RXMASKCLR
                                    460 	.globl _RXMASKSET
                                    461 	.globl _RXENABLE
                                    462 	.globl _FRMCTRL1
                                    463 	.globl _FRMCTRL0
                                    464 	.globl _SRCEXTEN2
                                    465 	.globl _SRCEXTEN1
                                    466 	.globl _SRCEXTEN0
                                    467 	.globl _SRCSHORTEN2
                                    468 	.globl _SRCSHORTEN1
                                    469 	.globl _SRCSHORTEN0
                                    470 	.globl _SRCMATCH
                                    471 	.globl _FRMFILT1
                                    472 	.globl _FRMFILT0
                                    473 	.globl _SHORT_ADDR1
                                    474 	.globl _SHORT_ADDR0
                                    475 	.globl _PAN_ID1
                                    476 	.globl _PAN_ID0
                                    477 	.globl _EXT_ADDR7
                                    478 	.globl _EXT_ADDR6
                                    479 	.globl _EXT_ADDR5
                                    480 	.globl _EXT_ADDR4
                                    481 	.globl _EXT_ADDR3
                                    482 	.globl _EXT_ADDR2
                                    483 	.globl _EXT_ADDR1
                                    484 	.globl _EXT_ADDR0
                                    485 	.globl _SRCSHORTPENDEN2
                                    486 	.globl _SRCSHORTPENDEN1
                                    487 	.globl _SRCSHORTPENDEN0
                                    488 	.globl _SRCEXTPENDEN2
                                    489 	.globl _SRCEXTPENDEN1
                                    490 	.globl _SRCEXTPENDEN0
                                    491 	.globl _SRCRESINDEX
                                    492 	.globl _SRCRESMASK2
                                    493 	.globl _SRCRESMASK1
                                    494 	.globl _SRCRESMASK0
                                    495 	.globl _SRC_ADDR_TABLE
                                    496 	.globl _TXFIFO
                                    497 	.globl _RXFIFO
                                    498 	.globl _RFCORE_RAM
                                    499 	.globl _CMPCTL
                                    500 	.globl _OPAMPS
                                    501 	.globl _OPAMPC
                                    502 	.globl _STCV2
                                    503 	.globl _STCV1
                                    504 	.globl _STCV0
                                    505 	.globl _STCS
                                    506 	.globl _STCC
                                    507 	.globl _T1CC4H
                                    508 	.globl _T1CC4L
                                    509 	.globl _T1CC3H
                                    510 	.globl _T1CC3L
                                    511 	.globl _XX_T1CC2H
                                    512 	.globl _XX_T1CC2L
                                    513 	.globl _XX_T1CC1H
                                    514 	.globl _XX_T1CC1L
                                    515 	.globl _XX_T1CC0H
                                    516 	.globl _XX_T1CC0L
                                    517 	.globl _T1CCTL4
                                    518 	.globl _T1CCTL3
                                    519 	.globl _XX_T1CCTL2
                                    520 	.globl _XX_T1CCTL1
                                    521 	.globl _XX_T1CCTL0
                                    522 	.globl _CLD
                                    523 	.globl _IRCTL
                                    524 	.globl _CHIPINFO1
                                    525 	.globl _CHIPINFO0
                                    526 	.globl _FWDATA
                                    527 	.globl _FADDRH
                                    528 	.globl _FADDRL
                                    529 	.globl _FCTL
                                    530 	.globl _IVCTRL
                                    531 	.globl _BATTMON
                                    532 	.globl _SRCRC
                                    533 	.globl _DBGDATA
                                    534 	.globl _TESTREG0
                                    535 	.globl _CHIPID
                                    536 	.globl _CHVER
                                    537 	.globl _OBSSEL5
                                    538 	.globl _OBSSEL4
                                    539 	.globl _OBSSEL3
                                    540 	.globl _OBSSEL2
                                    541 	.globl _OBSSEL1
                                    542 	.globl _OBSSEL0
                                    543 	.globl _I2CIO
                                    544 	.globl _I2CWC
                                    545 	.globl _I2CADDR
                                    546 	.globl _I2CDATA
                                    547 	.globl _I2CSTAT
                                    548 	.globl _I2CCFG
                                    549 	.globl _OPAMPMC
                                    550 	.globl _MONMUX
                                    551 	.globl _slip_set_input_callback
                                    552 	.globl _slip_send
                                    553 	.globl _slip_write
                                    554 	.globl _slip_input_byte
                                    555 ;--------------------------------------------------------
                                    556 ; special function registers
                                    557 ;--------------------------------------------------------
                                    558 	.area RSEG    (ABS,DATA)
      000000                        559 	.org 0x0000
                           000080   560 _P0	=	0x0080
                           000081   561 _SP	=	0x0081
                           000082   562 _DPL0	=	0x0082
                           000083   563 _DPH0	=	0x0083
                           000084   564 _DPL1	=	0x0084
                           000085   565 _DPH1	=	0x0085
                           000087   566 _PCON	=	0x0087
                           000088   567 _TCON	=	0x0088
                           000090   568 _P1	=	0x0090
                           000092   569 _DPS	=	0x0092
                           000098   570 _S0CON	=	0x0098
                           00009A   571 _IEN2	=	0x009a
                           00009B   572 _S1CON	=	0x009b
                           0000A0   573 _P2	=	0x00a0
                           0000A8   574 _IEN0	=	0x00a8
                           0000A9   575 _IP0	=	0x00a9
                           0000B8   576 _IEN1	=	0x00b8
                           0000B9   577 _IP1	=	0x00b9
                           0000C0   578 _IRCON	=	0x00c0
                           0000D0   579 _PSW	=	0x00d0
                           0000E0   580 _ACC	=	0x00e0
                           0000E8   581 _IRCON2	=	0x00e8
                           0000F0   582 _B	=	0x00f0
                           0000B4   583 _ADCCON1	=	0x00b4
                           0000B5   584 _ADCCON2	=	0x00b5
                           0000B6   585 _ADCCON3	=	0x00b6
                           0000BA   586 _ADCL	=	0x00ba
                           0000BB   587 _ADCH	=	0x00bb
                           0000BC   588 _RNDL	=	0x00bc
                           0000BD   589 _RNDH	=	0x00bd
                           0000B1   590 _ENCDI	=	0x00b1
                           0000B2   591 _ENCDO	=	0x00b2
                           0000B3   592 _ENCCS	=	0x00b3
                           0000D1   593 _DMAIRQ	=	0x00d1
                           0000D2   594 _DMA1CFGL	=	0x00d2
                           0000D3   595 _DMA1CFGH	=	0x00d3
                           0000D4   596 _DMA0CFGL	=	0x00d4
                           0000D5   597 _DMA0CFGH	=	0x00d5
                           0000D6   598 _DMAARM	=	0x00d6
                           0000D7   599 _DMAREQ	=	0x00d7
                           000089   600 _P0IFG	=	0x0089
                           00008A   601 _P1IFG	=	0x008a
                           00008B   602 _P2IFG	=	0x008b
                           00008C   603 _PICTL	=	0x008c
                           0000AB   604 _P0IEN	=	0x00ab
                           00008D   605 _P1IEN	=	0x008d
                           0000AC   606 _P2IEN	=	0x00ac
                           00008F   607 _P0INP	=	0x008f
                           0000F1   608 _PERCFG	=	0x00f1
                           0000F2   609 _APCFG	=	0x00f2
                           0000F3   610 _P0SEL	=	0x00f3
                           0000F4   611 _P1SEL	=	0x00f4
                           0000F5   612 _P2SEL	=	0x00f5
                           0000F6   613 _P1INP	=	0x00f6
                           0000F7   614 _P2INP	=	0x00f7
                           0000FD   615 _P0DIR	=	0x00fd
                           0000FE   616 _P1DIR	=	0x00fe
                           0000FF   617 _P2DIR	=	0x00ff
                           0000AE   618 _PMUX	=	0x00ae
                           000093   619 _MPAGE	=	0x0093
                           000093   620 __XPAGE	=	0x0093
                           0000C7   621 _MEMCTR	=	0x00c7
                           00009F   622 _FMAP	=	0x009f
                           00009F   623 _PSBANK	=	0x009f
                           000091   624 _RFIRQF1	=	0x0091
                           0000D9   625 _RFD	=	0x00d9
                           0000E1   626 _RFST	=	0x00e1
                           0000E9   627 _RFIRQF0	=	0x00e9
                           0000BF   628 _RFERRF	=	0x00bf
                           000095   629 _ST0	=	0x0095
                           000096   630 _ST1	=	0x0096
                           000097   631 _ST2	=	0x0097
                           0000AD   632 _STLOAD	=	0x00ad
                           0000BE   633 _SLEEPCMD	=	0x00be
                           00009D   634 _SLEEPSTA	=	0x009d
                           0000C6   635 _CLKCONCMD	=	0x00c6
                           00009E   636 _CLKCONSTA	=	0x009e
                           0000DA   637 _T1CC0L	=	0x00da
                           0000DB   638 _T1CC0H	=	0x00db
                           0000DC   639 _T1CC1L	=	0x00dc
                           0000DD   640 _T1CC1H	=	0x00dd
                           0000DE   641 _T1CC2L	=	0x00de
                           0000DF   642 _T1CC2H	=	0x00df
                           0000E2   643 _T1CNTL	=	0x00e2
                           0000E3   644 _T1CNTH	=	0x00e3
                           0000E4   645 _T1CTL	=	0x00e4
                           0000E5   646 _T1CCTL0	=	0x00e5
                           0000E6   647 _T1CCTL1	=	0x00e6
                           0000E7   648 _T1CCTL2	=	0x00e7
                           0000AF   649 _T1STAT	=	0x00af
                           000094   650 _T2CTRL	=	0x0094
                           00009C   651 _T2EVTCFG	=	0x009c
                           0000A1   652 _T2IRQF	=	0x00a1
                           0000A2   653 _T2M0	=	0x00a2
                           0000A3   654 _T2M1	=	0x00a3
                           0000A4   655 _T2MOVF0	=	0x00a4
                           0000A5   656 _T2MOVF1	=	0x00a5
                           0000A6   657 _T2MOVF2	=	0x00a6
                           0000A7   658 _T2IRQM	=	0x00a7
                           0000C3   659 _T2MSEL	=	0x00c3
                           0000CA   660 _T3CNT	=	0x00ca
                           0000CB   661 _T3CTL	=	0x00cb
                           0000CC   662 _T3CCTL0	=	0x00cc
                           0000CD   663 _T3CC0	=	0x00cd
                           0000CE   664 _T3CCTL1	=	0x00ce
                           0000CF   665 _T3CC1	=	0x00cf
                           0000EA   666 _T4CNT	=	0x00ea
                           0000EB   667 _T4CTL	=	0x00eb
                           0000EC   668 _T4CCTL0	=	0x00ec
                           0000ED   669 _T4CC0	=	0x00ed
                           0000EE   670 _T4CCTL1	=	0x00ee
                           0000EF   671 _T4CC1	=	0x00ef
                           0000D8   672 _TIMIF	=	0x00d8
                           000086   673 _U0CSR	=	0x0086
                           0000C1   674 _U0DBUF	=	0x00c1
                           0000C2   675 _U0BAUD	=	0x00c2
                           0000C4   676 _U0UCR	=	0x00c4
                           0000C5   677 _U0GCR	=	0x00c5
                           0000F8   678 _U1CSR	=	0x00f8
                           0000F9   679 _U1DBUF	=	0x00f9
                           0000FA   680 _U1BAUD	=	0x00fa
                           0000FB   681 _U1UCR	=	0x00fb
                           0000FC   682 _U1GCR	=	0x00fc
                           0000C9   683 _WDCTL	=	0x00c9
                                    684 ;--------------------------------------------------------
                                    685 ; special function bits
                                    686 ;--------------------------------------------------------
                                    687 	.area RSEG    (ABS,DATA)
      000000                        688 	.org 0x0000
                           000087   689 _P0_7	=	0x0087
                           000086   690 _P0_6	=	0x0086
                           000085   691 _P0_5	=	0x0085
                           000084   692 _P0_4	=	0x0084
                           000083   693 _P0_3	=	0x0083
                           000082   694 _P0_2	=	0x0082
                           000081   695 _P0_1	=	0x0081
                           000080   696 _P0_0	=	0x0080
                           00008F   697 _URX1IF	=	0x008f
                           00008D   698 _ADCIF	=	0x008d
                           00008B   699 _URX0IF	=	0x008b
                           00008A   700 _IT1	=	0x008a
                           000089   701 _RFERRIF	=	0x0089
                           000088   702 _IT0	=	0x0088
                           000097   703 _P1_7	=	0x0097
                           000096   704 _P1_6	=	0x0096
                           000095   705 _P1_5	=	0x0095
                           000094   706 _P1_4	=	0x0094
                           000093   707 _P1_3	=	0x0093
                           000092   708 _P1_2	=	0x0092
                           000091   709 _P1_1	=	0x0091
                           000090   710 _P1_0	=	0x0090
                           000099   711 _ENCIF_1	=	0x0099
                           000098   712 _ENCIF_0	=	0x0098
                           0000A7   713 _P2_7	=	0x00a7
                           0000A6   714 _P2_6	=	0x00a6
                           0000A5   715 _P2_5	=	0x00a5
                           0000A4   716 _P2_4	=	0x00a4
                           0000A3   717 _P2_3	=	0x00a3
                           0000A2   718 _P2_2	=	0x00a2
                           0000A1   719 _P2_1	=	0x00a1
                           0000A0   720 _P2_0	=	0x00a0
                           0000AF   721 _EA	=	0x00af
                           0000AD   722 _STIE	=	0x00ad
                           0000AC   723 _ENCIE	=	0x00ac
                           0000AB   724 _URX1IE	=	0x00ab
                           0000AA   725 _URX0IE	=	0x00aa
                           0000A9   726 _ADCIE	=	0x00a9
                           0000A8   727 _RFERRIE	=	0x00a8
                           0000BD   728 _P0IE	=	0x00bd
                           0000BC   729 _T4IE	=	0x00bc
                           0000BB   730 _T3IE	=	0x00bb
                           0000BA   731 _T2IE	=	0x00ba
                           0000B9   732 _T1IE	=	0x00b9
                           0000B8   733 _DMAIE	=	0x00b8
                           0000C7   734 _STIF	=	0x00c7
                           0000C5   735 _P0IF	=	0x00c5
                           0000C4   736 _T4IF	=	0x00c4
                           0000C3   737 _T3IF	=	0x00c3
                           0000C2   738 _T2IF	=	0x00c2
                           0000C1   739 _T1IF	=	0x00c1
                           0000C0   740 _DMAIF	=	0x00c0
                           0000D7   741 _CY	=	0x00d7
                           0000D6   742 _AC	=	0x00d6
                           0000D5   743 _F0	=	0x00d5
                           0000D4   744 _RS1	=	0x00d4
                           0000D3   745 _RS0	=	0x00d3
                           0000D2   746 _OV	=	0x00d2
                           0000D1   747 _F1	=	0x00d1
                           0000D0   748 _P	=	0x00d0
                           0000E7   749 _ACC_7	=	0x00e7
                           0000E6   750 _ACC_6	=	0x00e6
                           0000E5   751 _ACC_5	=	0x00e5
                           0000E4   752 _ACC_4	=	0x00e4
                           0000E3   753 _ACC_3	=	0x00e3
                           0000E2   754 _ACC_2	=	0x00e2
                           0000E1   755 _ACC_1	=	0x00e1
                           0000E0   756 _ACC_0	=	0x00e0
                           0000EC   757 _WDTIF	=	0x00ec
                           0000EB   758 _P1IF	=	0x00eb
                           0000EA   759 _UTX1IF	=	0x00ea
                           0000E9   760 _UTX0IF	=	0x00e9
                           0000E8   761 _P2IF	=	0x00e8
                           0000F7   762 _B_7	=	0x00f7
                           0000F6   763 _B_6	=	0x00f6
                           0000F5   764 _B_5	=	0x00f5
                           0000F4   765 _B_4	=	0x00f4
                           0000F3   766 _B_3	=	0x00f3
                           0000F2   767 _B_2	=	0x00f2
                           0000F1   768 _B_1	=	0x00f1
                           0000F0   769 _B_0	=	0x00f0
                           0000DE   770 _OVFIM	=	0x00de
                           0000DD   771 _T4CH1IF	=	0x00dd
                           0000DC   772 _T4CH0IF	=	0x00dc
                           0000DB   773 _T4OVFIF	=	0x00db
                           0000DA   774 _T3CH1IF	=	0x00da
                           0000D9   775 _T3CH0IF	=	0x00d9
                           0000D8   776 _T3OVFIF	=	0x00d8
                           0000FF   777 _MODE	=	0x00ff
                           0000FE   778 _RE	=	0x00fe
                           0000FD   779 _SLAVE	=	0x00fd
                           0000FC   780 _FE	=	0x00fc
                           0000FB   781 _ERR	=	0x00fb
                           0000FA   782 _RX_BYTE	=	0x00fa
                           0000F9   783 _TX_BYTE	=	0x00f9
                           0000F8   784 _ACTIVE	=	0x00f8
                                    785 ;--------------------------------------------------------
                                    786 ; overlayable register banks
                                    787 ;--------------------------------------------------------
                                    788 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        789 	.ds 8
                                    790 ;--------------------------------------------------------
                                    791 ; internal ram data
                                    792 ;--------------------------------------------------------
                                    793 	.area DSEG    (DATA)
                                    794 ;--------------------------------------------------------
                                    795 ; overlayable items in internal ram 
                                    796 ;--------------------------------------------------------
                                    797 ;--------------------------------------------------------
                                    798 ; indirectly addressable internal ram data
                                    799 ;--------------------------------------------------------
                                    800 	.area ISEG    (DATA)
                                    801 ;--------------------------------------------------------
                                    802 ; absolute internal ram data
                                    803 ;--------------------------------------------------------
                                    804 	.area IABS    (ABS,DATA)
                                    805 	.area IABS    (ABS,DATA)
                                    806 ;--------------------------------------------------------
                                    807 ; bit data
                                    808 ;--------------------------------------------------------
                                    809 	.area BSEG    (BIT)
                                    810 ;--------------------------------------------------------
                                    811 ; paged external ram data
                                    812 ;--------------------------------------------------------
                                    813 	.area PSEG    (PAG,XDATA)
                                    814 ;--------------------------------------------------------
                                    815 ; external ram data
                                    816 ;--------------------------------------------------------
                                    817 	.area XSEG    (XDATA)
                           0061A6   818 _MONMUX	=	0x61a6
                           0061A6   819 _OPAMPMC	=	0x61a6
                           006230   820 _I2CCFG	=	0x6230
                           006231   821 _I2CSTAT	=	0x6231
                           006232   822 _I2CDATA	=	0x6232
                           006233   823 _I2CADDR	=	0x6233
                           006234   824 _I2CWC	=	0x6234
                           006235   825 _I2CIO	=	0x6235
                           006243   826 _OBSSEL0	=	0x6243
                           006244   827 _OBSSEL1	=	0x6244
                           006245   828 _OBSSEL2	=	0x6245
                           006246   829 _OBSSEL3	=	0x6246
                           006247   830 _OBSSEL4	=	0x6247
                           006248   831 _OBSSEL5	=	0x6248
                           006249   832 _CHVER	=	0x6249
                           00624A   833 _CHIPID	=	0x624a
                           00624B   834 _TESTREG0	=	0x624b
                           006260   835 _DBGDATA	=	0x6260
                           006262   836 _SRCRC	=	0x6262
                           006264   837 _BATTMON	=	0x6264
                           006265   838 _IVCTRL	=	0x6265
                           006270   839 _FCTL	=	0x6270
                           006271   840 _FADDRL	=	0x6271
                           006272   841 _FADDRH	=	0x6272
                           006273   842 _FWDATA	=	0x6273
                           006276   843 _CHIPINFO0	=	0x6276
                           006277   844 _CHIPINFO1	=	0x6277
                           006281   845 _IRCTL	=	0x6281
                           006290   846 _CLD	=	0x6290
                           0062A0   847 _XX_T1CCTL0	=	0x62a0
                           0062A1   848 _XX_T1CCTL1	=	0x62a1
                           0062A2   849 _XX_T1CCTL2	=	0x62a2
                           0062A3   850 _T1CCTL3	=	0x62a3
                           0062A4   851 _T1CCTL4	=	0x62a4
                           0062A6   852 _XX_T1CC0L	=	0x62a6
                           0062A7   853 _XX_T1CC0H	=	0x62a7
                           0062A8   854 _XX_T1CC1L	=	0x62a8
                           0062A9   855 _XX_T1CC1H	=	0x62a9
                           0062AA   856 _XX_T1CC2L	=	0x62aa
                           0062AB   857 _XX_T1CC2H	=	0x62ab
                           0062AC   858 _T1CC3L	=	0x62ac
                           0062AD   859 _T1CC3H	=	0x62ad
                           0062AE   860 _T1CC4L	=	0x62ae
                           0062AF   861 _T1CC4H	=	0x62af
                           0062B0   862 _STCC	=	0x62b0
                           0062B1   863 _STCS	=	0x62b1
                           0062B2   864 _STCV0	=	0x62b2
                           0062B3   865 _STCV1	=	0x62b3
                           0062B4   866 _STCV2	=	0x62b4
                           0062C0   867 _OPAMPC	=	0x62c0
                           0062C1   868 _OPAMPS	=	0x62c1
                           0062D0   869 _CMPCTL	=	0x62d0
                           006000   870 _RFCORE_RAM	=	0x6000
                           006000   871 _RXFIFO	=	0x6000
                           006080   872 _TXFIFO	=	0x6080
                           006100   873 _SRC_ADDR_TABLE	=	0x6100
                           006160   874 _SRCRESMASK0	=	0x6160
                           006161   875 _SRCRESMASK1	=	0x6161
                           006162   876 _SRCRESMASK2	=	0x6162
                           006163   877 _SRCRESINDEX	=	0x6163
                           006164   878 _SRCEXTPENDEN0	=	0x6164
                           006165   879 _SRCEXTPENDEN1	=	0x6165
                           006166   880 _SRCEXTPENDEN2	=	0x6166
                           006167   881 _SRCSHORTPENDEN0	=	0x6167
                           006168   882 _SRCSHORTPENDEN1	=	0x6168
                           006169   883 _SRCSHORTPENDEN2	=	0x6169
                           00616A   884 _EXT_ADDR0	=	0x616a
                           00616B   885 _EXT_ADDR1	=	0x616b
                           00616C   886 _EXT_ADDR2	=	0x616c
                           00616D   887 _EXT_ADDR3	=	0x616d
                           00616E   888 _EXT_ADDR4	=	0x616e
                           00616F   889 _EXT_ADDR5	=	0x616f
                           006170   890 _EXT_ADDR6	=	0x6170
                           006171   891 _EXT_ADDR7	=	0x6171
                           006172   892 _PAN_ID0	=	0x6172
                           006173   893 _PAN_ID1	=	0x6173
                           006174   894 _SHORT_ADDR0	=	0x6174
                           006175   895 _SHORT_ADDR1	=	0x6175
                           006180   896 _FRMFILT0	=	0x6180
                           006181   897 _FRMFILT1	=	0x6181
                           006182   898 _SRCMATCH	=	0x6182
                           006183   899 _SRCSHORTEN0	=	0x6183
                           006184   900 _SRCSHORTEN1	=	0x6184
                           006185   901 _SRCSHORTEN2	=	0x6185
                           006186   902 _SRCEXTEN0	=	0x6186
                           006187   903 _SRCEXTEN1	=	0x6187
                           006188   904 _SRCEXTEN2	=	0x6188
                           006189   905 _FRMCTRL0	=	0x6189
                           00618A   906 _FRMCTRL1	=	0x618a
                           00618B   907 _RXENABLE	=	0x618b
                           00618C   908 _RXMASKSET	=	0x618c
                           00618D   909 _RXMASKCLR	=	0x618d
                           00618E   910 _FREQTUNE	=	0x618e
                           00618F   911 _FREQCTRL	=	0x618f
                           006190   912 _TXPOWER	=	0x6190
                           006191   913 _TXCTRL	=	0x6191
                           006192   914 _FSMSTAT0	=	0x6192
                           006193   915 _FSMSTAT1	=	0x6193
                           006194   916 _FIFOPCTRL	=	0x6194
                           006195   917 _FSMCTRL	=	0x6195
                           006196   918 _CCACTRL0	=	0x6196
                           006197   919 _CCACTRL1	=	0x6197
                           006198   920 _RSSI	=	0x6198
                           006199   921 _RSSISTAT	=	0x6199
                           00619A   922 _RXFIRST	=	0x619a
                           00619B   923 _RXFIFOCNT	=	0x619b
                           00619C   924 _TXFIFOCNT	=	0x619c
                           00619D   925 _RXFIRST_PTR	=	0x619d
                           00619E   926 _RXLAST_PTR	=	0x619e
                           00619F   927 _RXP1_PTR	=	0x619f
                           0061A1   928 _TXFIRST_PTR	=	0x61a1
                           0061A2   929 _TXLAST_PTR	=	0x61a2
                           0061A3   930 _RFIRQM0	=	0x61a3
                           0061A4   931 _RFIRQM1	=	0x61a4
                           0061A5   932 _RFERRM	=	0x61a5
                           0061A7   933 _RFRND	=	0x61a7
                           0061A8   934 _MDMCTRL0	=	0x61a8
                           0061A9   935 _MDMCTRL1	=	0x61a9
                           0061AA   936 _FREQEST	=	0x61aa
                           0061AB   937 _RXCTRL	=	0x61ab
                           0061AC   938 _FSCTRL	=	0x61ac
                           0061AD   939 _FSCAL0	=	0x61ad
                           0061AE   940 _FSCAL1	=	0x61ae
                           0061AF   941 _FSCAL2	=	0x61af
                           0061B0   942 _FSCAL3	=	0x61b0
                           0061B1   943 _AGCCTRL0	=	0x61b1
                           0061B2   944 _AGCCTRL1	=	0x61b2
                           0061B3   945 _AGCCTRL2	=	0x61b3
                           0061B4   946 _AGCCTRL3	=	0x61b4
                           0061B5   947 _ADCTEST0	=	0x61b5
                           0061B6   948 _ADCTEST1	=	0x61b6
                           0061B7   949 _ADCTEST2	=	0x61b7
                           0061B8   950 _MDMTEST0	=	0x61b8
                           0061B9   951 _MDMTEST1	=	0x61b9
                           0061BA   952 _DACTEST0	=	0x61ba
                           0061BB   953 _DACTEST1	=	0x61bb
                           0061BC   954 _DACTEST2	=	0x61bc
                           0061BD   955 _ATEST	=	0x61bd
                           0061BE   956 _PTEST0	=	0x61be
                           0061BF   957 _PTEST1	=	0x61bf
                           0061FA   958 _TXFILTCFG	=	0x61fa
                           0061EB   959 _RFC_OBS_CTRL0	=	0x61eb
                           0061EC   960 _RFC_OBS_CTRL1	=	0x61ec
                           0061ED   961 _RFC_OBS_CTRL2	=	0x61ed
                           0061C0   962 _CSPPROG0	=	0x61c0
                           0061C1   963 _CSPPROG1	=	0x61c1
                           0061C2   964 _CSPPROG2	=	0x61c2
                           0061C3   965 _CSPPROG3	=	0x61c3
                           0061C4   966 _CSPPROG4	=	0x61c4
                           0061C5   967 _CSPPROG5	=	0x61c5
                           0061C6   968 _CSPPROG6	=	0x61c6
                           0061C7   969 _CSPPROG7	=	0x61c7
                           0061C8   970 _CSPPROG8	=	0x61c8
                           0061C9   971 _CSPPROG9	=	0x61c9
                           0061CA   972 _CSPPROG10	=	0x61ca
                           0061CB   973 _CSPPROG11	=	0x61cb
                           0061CC   974 _CSPPROG12	=	0x61cc
                           0061CD   975 _CSPPROG13	=	0x61cd
                           0061CE   976 _CSPPROG14	=	0x61ce
                           0061CF   977 _CSPPROG15	=	0x61cf
                           0061D0   978 _CSPPROG16	=	0x61d0
                           0061D1   979 _CSPPROG17	=	0x61d1
                           0061D2   980 _CSPPROG18	=	0x61d2
                           0061D3   981 _CSPPROG19	=	0x61d3
                           0061D4   982 _CSPPROG20	=	0x61d4
                           0061D5   983 _CSPPROG21	=	0x61d5
                           0061D6   984 _CSPPROG22	=	0x61d6
                           0061D7   985 _CSPPROG23	=	0x61d7
                           0061E0   986 _CSPCTRL	=	0x61e0
                           0061E1   987 _CSPSTAT	=	0x61e1
                           0061E2   988 _CSPX	=	0x61e2
                           0061E3   989 _CSPY	=	0x61e3
                           0061E4   990 _CSPZ	=	0x61e4
                           0061E5   991 _CSPT	=	0x61e5
                           006200   992 _USBADDR	=	0x6200
                           006201   993 _USBPOW	=	0x6201
                           006202   994 _USBIIF	=	0x6202
                           006204   995 _USBOIF	=	0x6204
                           006206   996 _USBCIF	=	0x6206
                           006207   997 _USBIIE	=	0x6207
                           006209   998 _USBOIE	=	0x6209
                           00620B   999 _USBCIE	=	0x620b
                           00620C  1000 _USBFRML	=	0x620c
                           00620D  1001 _USBFRMH	=	0x620d
                           00620E  1002 _USBINDEX	=	0x620e
                           00620F  1003 _USBCTRL	=	0x620f
                           006210  1004 _USBMAXI	=	0x6210
                           006211  1005 _USBCS0	=	0x6211
                           006211  1006 _USBCSIL	=	0x6211
                           006212  1007 _USBCSIH	=	0x6212
                           006213  1008 _USBMAXO	=	0x6213
                           006214  1009 _USBCSOL	=	0x6214
                           006215  1010 _USBCSOH	=	0x6215
                           006216  1011 _USBCNT0	=	0x6216
                           006216  1012 _USBCNTL	=	0x6216
                           006217  1013 _USBCNTH	=	0x6217
                           006220  1014 _USBF0	=	0x6220
                           006222  1015 _USBF1	=	0x6222
                           006224  1016 _USBF2	=	0x6224
                           006226  1017 _USBF3	=	0x6226
                           006228  1018 _USBF4	=	0x6228
                           00622A  1019 _USBF5	=	0x622a
                           007080  1020 _X_P0	=	0x7080
                           007086  1021 _X_U0CSR	=	0x7086
                           007089  1022 _X_P0IFG	=	0x7089
                           00708A  1023 _X_P1IFG	=	0x708a
                           00708B  1024 _X_P2IFG	=	0x708b
                           00708C  1025 _X_PICTL	=	0x708c
                           00708D  1026 _X_P1IEN	=	0x708d
                           00708F  1027 _X_P0INP	=	0x708f
                           007090  1028 _X_P1	=	0x7090
                           007091  1029 _X_RFIRQF1	=	0x7091
                           007093  1030 _X_MPAGE	=	0x7093
                           007093  1031 _X__XPAGE	=	0x7093
                           007094  1032 _X_T2CTRL	=	0x7094
                           007095  1033 _X_ST0	=	0x7095
                           007096  1034 _X_ST1	=	0x7096
                           007097  1035 _X_ST2	=	0x7097
                           00709C  1036 _X_T2EVTCFG	=	0x709c
                           00709D  1037 _X_SLEEPSTA	=	0x709d
                           00709E  1038 _X_CLKCONSTA	=	0x709e
                           00709F  1039 _X_FMAP	=	0x709f
                           00709F  1040 _X_PSBANK	=	0x709f
                           0070A0  1041 _X_P2	=	0x70a0
                           0070A1  1042 _X_T2IRQF	=	0x70a1
                           0070A2  1043 _X_T2M0	=	0x70a2
                           0070A3  1044 _X_T2M1	=	0x70a3
                           0070A4  1045 _X_T2MOVF0	=	0x70a4
                           0070A5  1046 _X_T2MOVF1	=	0x70a5
                           0070A6  1047 _X_T2MOVF2	=	0x70a6
                           0070A7  1048 _X_T2IRQM	=	0x70a7
                           0070AB  1049 _X_P0IEN	=	0x70ab
                           0070AC  1050 _X_P2IEN	=	0x70ac
                           0070AD  1051 _X_STLOAD	=	0x70ad
                           0070AE  1052 _X_PMUX	=	0x70ae
                           0070AF  1053 _X_T1STAT	=	0x70af
                           0070B1  1054 _X_ENCDI	=	0x70b1
                           0070B2  1055 _X_ENCDO	=	0x70b2
                           0070B3  1056 _X_ENCCS	=	0x70b3
                           0070B4  1057 _X_ADCCON1	=	0x70b4
                           0070B5  1058 _X_ADCCON2	=	0x70b5
                           0070B6  1059 _X_ADCCON3	=	0x70b6
                           0070BA  1060 _X_ADCL	=	0x70ba
                           0070BB  1061 _X_ADCH	=	0x70bb
                           0070BC  1062 _X_RNDL	=	0x70bc
                           0070BD  1063 _X_RNDH	=	0x70bd
                           0070BE  1064 _X_SLEEPCMD	=	0x70be
                           0070BF  1065 _X_RFERRF	=	0x70bf
                           0070C1  1066 _X_U0DBUF	=	0x70c1
                           0070C2  1067 _X_U0BAUD	=	0x70c2
                           0070C3  1068 _X_T2MSEL	=	0x70c3
                           0070C4  1069 _X_U0UCR	=	0x70c4
                           0070C5  1070 _X_U0GCR	=	0x70c5
                           0070C6  1071 _X_CLKCONCMD	=	0x70c6
                           0070C7  1072 _X_MEMCTR	=	0x70c7
                           0070C9  1073 _X_WDCTL	=	0x70c9
                           0070CA  1074 _X_T3CNT	=	0x70ca
                           0070CB  1075 _X_T3CTL	=	0x70cb
                           0070CC  1076 _X_T3CCTL0	=	0x70cc
                           0070CD  1077 _X_T3CC0	=	0x70cd
                           0070CE  1078 _X_T3CCTL1	=	0x70ce
                           0070CF  1079 _X_T3CC1	=	0x70cf
                           0070D1  1080 _X_DMAIRQ	=	0x70d1
                           0070D2  1081 _X_DMA1CFGL	=	0x70d2
                           0070D3  1082 _X_DMA1CFGH	=	0x70d3
                           0070D4  1083 _X_DMA0CFGL	=	0x70d4
                           0070D5  1084 _X_DMA0CFGH	=	0x70d5
                           0070D6  1085 _X_DMAARM	=	0x70d6
                           0070D7  1086 _X_DMAREQ	=	0x70d7
                           0070D8  1087 _X_TIMIF	=	0x70d8
                           0070D9  1088 _X_RFD	=	0x70d9
                           0070DA  1089 _X_T1CC0L	=	0x70da
                           0070DB  1090 _X_T1CC0H	=	0x70db
                           0070DC  1091 _X_T1CC1L	=	0x70dc
                           0070DD  1092 _X_T1CC1H	=	0x70dd
                           0070DE  1093 _X_T1CC2L	=	0x70de
                           0070DF  1094 _X_T1CC2H	=	0x70df
                           0070E1  1095 _X_RFST	=	0x70e1
                           0070E2  1096 _X_T1CNTL	=	0x70e2
                           0070E3  1097 _X_T1CNTH	=	0x70e3
                           0070E4  1098 _X_T1CTL	=	0x70e4
                           0070E5  1099 _X_T1CCTL0	=	0x70e5
                           0070E6  1100 _X_T1CCTL1	=	0x70e6
                           0070E7  1101 _X_T1CCTL2	=	0x70e7
                           0070E9  1102 _X_RFIRQF0	=	0x70e9
                           0070EA  1103 _X_T4CNT	=	0x70ea
                           0070EB  1104 _X_T4CTL	=	0x70eb
                           0070EC  1105 _X_T4CCTL0	=	0x70ec
                           0070ED  1106 _X_T4CC0	=	0x70ed
                           0070EE  1107 _X_T4CCTL1	=	0x70ee
                           0070EF  1108 _X_T4CC1	=	0x70ef
                           0070F1  1109 _X_PERCFG	=	0x70f1
                           0070F2  1110 _X_APCFG	=	0x70f2
                           0070F3  1111 _X_P0SEL	=	0x70f3
                           0070F4  1112 _X_P1SEL	=	0x70f4
                           0070F5  1113 _X_P2SEL	=	0x70f5
                           0070F6  1114 _X_P1INP	=	0x70f6
                           0070F7  1115 _X_P2INP	=	0x70f7
                           0070F8  1116 _X_U1CSR	=	0x70f8
                           0070F9  1117 _X_U1DBUF	=	0x70f9
                           0070FA  1118 _X_U1BAUD	=	0x70fa
                           0070FB  1119 _X_U1UCR	=	0x70fb
                           0070FC  1120 _X_U1GCR	=	0x70fc
                           0070FD  1121 _X_P0DIR	=	0x70fd
                           0070FE  1122 _X_P1DIR	=	0x70fe
                           0070FF  1123 _X_P2DIR	=	0x70ff
                           007800  1124 _X_INFOPAGE	=	0x7800
                           00780C  1125 _X_IEEE_ADDR	=	0x780c
      000000                       1126 _slip_active::
      000000                       1127 	.ds 1
      000001                       1128 _begin:
      000001                       1129 	.ds 2
      000003                       1130 _end:
      000003                       1131 	.ds 2
      000005                       1132 _rxbuf:
      000005                       1133 	.ds 124
      000081                       1134 _pkt_end:
      000081                       1135 	.ds 2
      000083                       1136 _process_thread_slip_process_ip_id_6_187:
      000083                       1137 	.ds 2
                                   1138 ;--------------------------------------------------------
                                   1139 ; absolute external ram data
                                   1140 ;--------------------------------------------------------
                                   1141 	.area XABS    (ABS,XDATA)
                                   1142 ;--------------------------------------------------------
                                   1143 ; external initialized ram data
                                   1144 ;--------------------------------------------------------
                                   1145 	.area XISEG   (XDATA)
      000000                       1146 _slip_process::
      000000                       1147 	.ds 9
      000009                       1148 _state:
      000009                       1149 	.ds 1
      00000A                       1150 _input_callback:
      00000A                       1151 	.ds 2
                                   1152 	.area HOME    (CODE)
                                   1153 	.area GSINIT0 (CODE)
                                   1154 	.area GSINIT1 (CODE)
                                   1155 	.area GSINIT2 (CODE)
                                   1156 	.area GSINIT3 (CODE)
                                   1157 	.area GSINIT4 (CODE)
                                   1158 	.area GSINIT5 (CODE)
                                   1159 	.area GSINIT  (CODE)
                                   1160 	.area GSFINAL (CODE)
                                   1161 	.area CSEG    (CODE)
                                   1162 ;--------------------------------------------------------
                                   1163 ; global & static initialisations
                                   1164 ;--------------------------------------------------------
                                   1165 	.area HOME    (CODE)
                                   1166 	.area GSINIT  (CODE)
                                   1167 	.area GSFINAL (CODE)
                                   1168 	.area GSINIT  (CODE)
                                   1169 ;--------------------------------------------------------
                                   1170 ; Home
                                   1171 ;--------------------------------------------------------
                                   1172 	.area HOME    (CODE)
                                   1173 	.area HOME    (CODE)
                                   1174 ;--------------------------------------------------------
                                   1175 ; code
                                   1176 ;--------------------------------------------------------
                                   1177 	.area CSEG    (CODE)
                                   1178 ;------------------------------------------------------------
                                   1179 ;Allocation info for local variables in function 'slip_set_input_callback'
                                   1180 ;------------------------------------------------------------
                                   1181 ;c                         Allocated to registers 
                                   1182 ;------------------------------------------------------------
                                   1183 ;	/opt/contiki/core/dev/slip.c:91: slip_set_input_callback(void (*c)(void))
                                   1184 ;	-----------------------------------------
                                   1185 ;	 function slip_set_input_callback
                                   1186 ;	-----------------------------------------
      000000                       1187 _slip_set_input_callback:
                           000007  1188 	ar7 = 0x07
                           000006  1189 	ar6 = 0x06
                           000005  1190 	ar5 = 0x05
                           000004  1191 	ar4 = 0x04
                           000003  1192 	ar3 = 0x03
                           000002  1193 	ar2 = 0x02
                           000001  1194 	ar1 = 0x01
                           000000  1195 	ar0 = 0x00
      000000 AF 83            [24] 1196 	mov	r7,dph
      000002 E5 82            [12] 1197 	mov	a,dpl
      000004 90r00r0A         [24] 1198 	mov	dptr,#_input_callback
      000007 F0               [24] 1199 	movx	@dptr,a
      000008 EF               [12] 1200 	mov	a,r7
      000009 A3               [24] 1201 	inc	dptr
      00000A F0               [24] 1202 	movx	@dptr,a
                                   1203 ;	/opt/contiki/core/dev/slip.c:93: input_callback = c;
      00000B 22               [24] 1204 	ret
                                   1205 ;------------------------------------------------------------
                                   1206 ;Allocation info for local variables in function 'slip_send'
                                   1207 ;------------------------------------------------------------
                                   1208 ;i                         Allocated to stack - sp -1
                                   1209 ;ptr                       Allocated to registers r5 r6 r7 
                                   1210 ;c                         Allocated to registers r4 
                                   1211 ;------------------------------------------------------------
                                   1212 ;	/opt/contiki/core/dev/slip.c:100: slip_send(void)
                                   1213 ;	-----------------------------------------
                                   1214 ;	 function slip_send
                                   1215 ;	-----------------------------------------
      00000C                       1216 _slip_send:
      00000C 05 81            [12] 1217 	inc	sp
      00000E 05 81            [12] 1218 	inc	sp
                                   1219 ;	/opt/contiki/core/dev/slip.c:106: slip_arch_writeb(SLIP_END);
      000010 75 82 C0         [24] 1220 	mov	dpl,#0xC0
      000013 12r00r00         [24] 1221 	lcall	_slip_arch_writeb
                                   1222 ;	/opt/contiki/core/dev/slip.c:108: ptr = &uip_buf[UIP_LLH_LEN];
      000016 7Dr00            [12] 1223 	mov	r5,#_uip_aligned_buf
      000018 7Es00            [12] 1224 	mov	r6,#(_uip_aligned_buf >> 8)
      00001A 7F 00            [12] 1225 	mov	r7,#0x00
                                   1226 ;	/opt/contiki/core/dev/slip.c:109: for(i = 0; i < uip_len; ++i) {
      00001C A8 81            [24] 1227 	mov	r0,sp
      00001E 18               [12] 1228 	dec	r0
      00001F E4               [12] 1229 	clr	a
      000020 F6               [12] 1230 	mov	@r0,a
      000021 08               [12] 1231 	inc	r0
      000022 F6               [12] 1232 	mov	@r0,a
      000023                       1233 00110$:
      000023 C0 05            [24] 1234 	push	ar5
      000025 C0 06            [24] 1235 	push	ar6
      000027 C0 07            [24] 1236 	push	ar7
      000029 90r00r00         [24] 1237 	mov	dptr,#_uip_len
      00002C E0               [24] 1238 	movx	a,@dptr
      00002D FA               [12] 1239 	mov	r2,a
      00002E A3               [24] 1240 	inc	dptr
      00002F E0               [24] 1241 	movx	a,@dptr
      000030 FF               [12] 1242 	mov	r7,a
      000031 E5 81            [12] 1243 	mov	a,sp
      000033 24 FC            [12] 1244 	add	a,#0xfc
      000035 F8               [12] 1245 	mov	r0,a
      000036 C3               [12] 1246 	clr	c
      000037 E6               [12] 1247 	mov	a,@r0
      000038 9A               [12] 1248 	subb	a,r2
      000039 08               [12] 1249 	inc	r0
      00003A E6               [12] 1250 	mov	a,@r0
      00003B 9F               [12] 1251 	subb	a,r7
      00003C D0 07            [24] 1252 	pop	ar7
      00003E D0 06            [24] 1253 	pop	ar6
      000040 D0 05            [24] 1254 	pop	ar5
      000042 40 03            [24] 1255 	jc	00130$
      000044 02r00rBE         [24] 1256 	ljmp	00108$
      000047                       1257 00130$:
                                   1258 ;	/opt/contiki/core/dev/slip.c:110: if(i == UIP_TCPIP_HLEN) {
      000047 A8 81            [24] 1259 	mov	r0,sp
      000049 18               [12] 1260 	dec	r0
      00004A B6 28 15         [24] 1261 	cjne	@r0,#0x28,00102$
      00004D 08               [12] 1262 	inc	r0
      00004E B6 00 11         [24] 1263 	cjne	@r0,#0x00,00102$
                                   1264 ;	/opt/contiki/core/dev/slip.c:111: ptr = (uint8_t *)uip_appdata;
      000051 90r00r00         [24] 1265 	mov	dptr,#_uip_appdata
      000054 E0               [24] 1266 	movx	a,@dptr
      000055 FA               [12] 1267 	mov	r2,a
      000056 A3               [24] 1268 	inc	dptr
      000057 E0               [24] 1269 	movx	a,@dptr
      000058 FB               [12] 1270 	mov	r3,a
      000059 A3               [24] 1271 	inc	dptr
      00005A E0               [24] 1272 	movx	a,@dptr
      00005B FC               [12] 1273 	mov	r4,a
      00005C 8A 05            [24] 1274 	mov	ar5,r2
      00005E 8B 06            [24] 1275 	mov	ar6,r3
      000060 8C 07            [24] 1276 	mov	ar7,r4
      000062                       1277 00102$:
                                   1278 ;	/opt/contiki/core/dev/slip.c:113: c = *ptr++;
      000062 8D 82            [24] 1279 	mov	dpl,r5
      000064 8E 83            [24] 1280 	mov	dph,r6
      000066 8F F0            [24] 1281 	mov	b,r7
      000068 12r00r00         [24] 1282 	lcall	__gptrget
      00006B FC               [12] 1283 	mov	r4,a
      00006C A3               [24] 1284 	inc	dptr
      00006D AD 82            [24] 1285 	mov	r5,dpl
      00006F AE 83            [24] 1286 	mov	r6,dph
                                   1287 ;	/opt/contiki/core/dev/slip.c:114: if(c == SLIP_END) {
      000071 BC C0 16         [24] 1288 	cjne	r4,#0xC0,00106$
                                   1289 ;	/opt/contiki/core/dev/slip.c:115: slip_arch_writeb(SLIP_ESC);
      000074 75 82 DB         [24] 1290 	mov	dpl,#0xDB
      000077 C0 07            [24] 1291 	push	ar7
      000079 C0 06            [24] 1292 	push	ar6
      00007B C0 05            [24] 1293 	push	ar5
      00007D 12r00r00         [24] 1294 	lcall	_slip_arch_writeb
      000080 D0 05            [24] 1295 	pop	ar5
      000082 D0 06            [24] 1296 	pop	ar6
      000084 D0 07            [24] 1297 	pop	ar7
                                   1298 ;	/opt/contiki/core/dev/slip.c:116: c = SLIP_ESC_END;
      000086 7C DC            [12] 1299 	mov	r4,#0xDC
      000088 80 17            [24] 1300 	sjmp	00107$
      00008A                       1301 00106$:
                                   1302 ;	/opt/contiki/core/dev/slip.c:117: } else if(c == SLIP_ESC) {
      00008A BC DB 14         [24] 1303 	cjne	r4,#0xDB,00107$
                                   1304 ;	/opt/contiki/core/dev/slip.c:118: slip_arch_writeb(SLIP_ESC);
      00008D 75 82 DB         [24] 1305 	mov	dpl,#0xDB
      000090 C0 07            [24] 1306 	push	ar7
      000092 C0 06            [24] 1307 	push	ar6
      000094 C0 05            [24] 1308 	push	ar5
      000096 12r00r00         [24] 1309 	lcall	_slip_arch_writeb
      000099 D0 05            [24] 1310 	pop	ar5
      00009B D0 06            [24] 1311 	pop	ar6
      00009D D0 07            [24] 1312 	pop	ar7
                                   1313 ;	/opt/contiki/core/dev/slip.c:119: c = SLIP_ESC_ESC;
      00009F 7C DD            [12] 1314 	mov	r4,#0xDD
      0000A1                       1315 00107$:
                                   1316 ;	/opt/contiki/core/dev/slip.c:121: slip_arch_writeb(c);
      0000A1 8C 82            [24] 1317 	mov	dpl,r4
      0000A3 C0 07            [24] 1318 	push	ar7
      0000A5 C0 06            [24] 1319 	push	ar6
      0000A7 C0 05            [24] 1320 	push	ar5
      0000A9 12r00r00         [24] 1321 	lcall	_slip_arch_writeb
      0000AC D0 05            [24] 1322 	pop	ar5
      0000AE D0 06            [24] 1323 	pop	ar6
      0000B0 D0 07            [24] 1324 	pop	ar7
                                   1325 ;	/opt/contiki/core/dev/slip.c:109: for(i = 0; i < uip_len; ++i) {
      0000B2 A8 81            [24] 1326 	mov	r0,sp
      0000B4 18               [12] 1327 	dec	r0
      0000B5 06               [12] 1328 	inc	@r0
      0000B6 B6 00 02         [24] 1329 	cjne	@r0,#0x00,00137$
      0000B9 08               [12] 1330 	inc	r0
      0000BA 06               [12] 1331 	inc	@r0
      0000BB                       1332 00137$:
      0000BB 02r00r23         [24] 1333 	ljmp	00110$
      0000BE                       1334 00108$:
                                   1335 ;	/opt/contiki/core/dev/slip.c:123: slip_arch_writeb(SLIP_END);
      0000BE 75 82 C0         [24] 1336 	mov	dpl,#0xC0
      0000C1 12r00r00         [24] 1337 	lcall	_slip_arch_writeb
                                   1338 ;	/opt/contiki/core/dev/slip.c:125: return UIP_FW_OK;
      0000C4 75 82 00         [24] 1339 	mov	dpl,#0x00
      0000C7 15 81            [12] 1340 	dec	sp
      0000C9 15 81            [12] 1341 	dec	sp
      0000CB 22               [24] 1342 	ret
                                   1343 ;------------------------------------------------------------
                                   1344 ;Allocation info for local variables in function 'slip_write'
                                   1345 ;------------------------------------------------------------
                                   1346 ;len                       Allocated to stack - sp -3
                                   1347 ;_ptr                      Allocated to registers r5 r6 r7 
                                   1348 ;ptr                       Allocated to registers r5 r6 r7 
                                   1349 ;i                         Allocated to registers r3 r4 
                                   1350 ;c                         Allocated to registers r2 
                                   1351 ;------------------------------------------------------------
                                   1352 ;	/opt/contiki/core/dev/slip.c:129: slip_write(const void *_ptr, int len)
                                   1353 ;	-----------------------------------------
                                   1354 ;	 function slip_write
                                   1355 ;	-----------------------------------------
      0000CC                       1356 _slip_write:
      0000CC AD 82            [24] 1357 	mov	r5,dpl
      0000CE AE 83            [24] 1358 	mov	r6,dph
      0000D0 AF F0            [24] 1359 	mov	r7,b
                                   1360 ;	/opt/contiki/core/dev/slip.c:131: const uint8_t *ptr = _ptr;
                                   1361 ;	/opt/contiki/core/dev/slip.c:135: slip_arch_writeb(SLIP_END);
      0000D2 75 82 C0         [24] 1362 	mov	dpl,#0xC0
      0000D5 C0 07            [24] 1363 	push	ar7
      0000D7 C0 06            [24] 1364 	push	ar6
      0000D9 C0 05            [24] 1365 	push	ar5
      0000DB 12r00r00         [24] 1366 	lcall	_slip_arch_writeb
      0000DE D0 05            [24] 1367 	pop	ar5
      0000E0 D0 06            [24] 1368 	pop	ar6
      0000E2 D0 07            [24] 1369 	pop	ar7
                                   1370 ;	/opt/contiki/core/dev/slip.c:137: for(i = 0; i < len; ++i) {
      0000E4 7B 00            [12] 1371 	mov	r3,#0x00
      0000E6 7C 00            [12] 1372 	mov	r4,#0x00
      0000E8                       1373 00108$:
      0000E8 C0 05            [24] 1374 	push	ar5
      0000EA C0 06            [24] 1375 	push	ar6
      0000EC C0 07            [24] 1376 	push	ar7
      0000EE E5 81            [12] 1377 	mov	a,sp
      0000F0 24 FA            [12] 1378 	add	a,#0xfa
      0000F2 F8               [12] 1379 	mov	r0,a
      0000F3 86 02            [24] 1380 	mov	ar2,@r0
      0000F5 08               [12] 1381 	inc	r0
      0000F6 86 07            [24] 1382 	mov	ar7,@r0
      0000F8 C3               [12] 1383 	clr	c
      0000F9 EB               [12] 1384 	mov	a,r3
      0000FA 9A               [12] 1385 	subb	a,r2
      0000FB EC               [12] 1386 	mov	a,r4
      0000FC 9F               [12] 1387 	subb	a,r7
      0000FD D0 07            [24] 1388 	pop	ar7
      0000FF D0 06            [24] 1389 	pop	ar6
      000101 D0 05            [24] 1390 	pop	ar5
      000103 50 70            [24] 1391 	jnc	00106$
                                   1392 ;	/opt/contiki/core/dev/slip.c:138: c = *ptr++;
      000105 8D 82            [24] 1393 	mov	dpl,r5
      000107 8E 83            [24] 1394 	mov	dph,r6
      000109 8F F0            [24] 1395 	mov	b,r7
      00010B 12r00r00         [24] 1396 	lcall	__gptrget
      00010E FA               [12] 1397 	mov	r2,a
      00010F A3               [24] 1398 	inc	dptr
      000110 AD 82            [24] 1399 	mov	r5,dpl
      000112 AE 83            [24] 1400 	mov	r6,dph
                                   1401 ;	/opt/contiki/core/dev/slip.c:139: if(c == SLIP_END) {
      000114 BA C0 1E         [24] 1402 	cjne	r2,#0xC0,00104$
                                   1403 ;	/opt/contiki/core/dev/slip.c:140: slip_arch_writeb(SLIP_ESC);
      000117 75 82 DB         [24] 1404 	mov	dpl,#0xDB
      00011A C0 07            [24] 1405 	push	ar7
      00011C C0 06            [24] 1406 	push	ar6
      00011E C0 05            [24] 1407 	push	ar5
      000120 C0 04            [24] 1408 	push	ar4
      000122 C0 03            [24] 1409 	push	ar3
      000124 12r00r00         [24] 1410 	lcall	_slip_arch_writeb
      000127 D0 03            [24] 1411 	pop	ar3
      000129 D0 04            [24] 1412 	pop	ar4
      00012B D0 05            [24] 1413 	pop	ar5
      00012D D0 06            [24] 1414 	pop	ar6
      00012F D0 07            [24] 1415 	pop	ar7
                                   1416 ;	/opt/contiki/core/dev/slip.c:141: c = SLIP_ESC_END;
      000131 7A DC            [12] 1417 	mov	r2,#0xDC
      000133 80 1F            [24] 1418 	sjmp	00105$
      000135                       1419 00104$:
                                   1420 ;	/opt/contiki/core/dev/slip.c:142: } else if(c == SLIP_ESC) {
      000135 BA DB 1C         [24] 1421 	cjne	r2,#0xDB,00105$
                                   1422 ;	/opt/contiki/core/dev/slip.c:143: slip_arch_writeb(SLIP_ESC);
      000138 75 82 DB         [24] 1423 	mov	dpl,#0xDB
      00013B C0 07            [24] 1424 	push	ar7
      00013D C0 06            [24] 1425 	push	ar6
      00013F C0 05            [24] 1426 	push	ar5
      000141 C0 04            [24] 1427 	push	ar4
      000143 C0 03            [24] 1428 	push	ar3
      000145 12r00r00         [24] 1429 	lcall	_slip_arch_writeb
      000148 D0 03            [24] 1430 	pop	ar3
      00014A D0 04            [24] 1431 	pop	ar4
      00014C D0 05            [24] 1432 	pop	ar5
      00014E D0 06            [24] 1433 	pop	ar6
      000150 D0 07            [24] 1434 	pop	ar7
                                   1435 ;	/opt/contiki/core/dev/slip.c:144: c = SLIP_ESC_ESC;
      000152 7A DD            [12] 1436 	mov	r2,#0xDD
      000154                       1437 00105$:
                                   1438 ;	/opt/contiki/core/dev/slip.c:146: slip_arch_writeb(c);
      000154 8A 82            [24] 1439 	mov	dpl,r2
      000156 C0 07            [24] 1440 	push	ar7
      000158 C0 06            [24] 1441 	push	ar6
      00015A C0 05            [24] 1442 	push	ar5
      00015C C0 04            [24] 1443 	push	ar4
      00015E C0 03            [24] 1444 	push	ar3
      000160 12r00r00         [24] 1445 	lcall	_slip_arch_writeb
      000163 D0 03            [24] 1446 	pop	ar3
      000165 D0 04            [24] 1447 	pop	ar4
      000167 D0 05            [24] 1448 	pop	ar5
      000169 D0 06            [24] 1449 	pop	ar6
      00016B D0 07            [24] 1450 	pop	ar7
                                   1451 ;	/opt/contiki/core/dev/slip.c:137: for(i = 0; i < len; ++i) {
      00016D 0B               [12] 1452 	inc	r3
      00016E BB 00 01         [24] 1453 	cjne	r3,#0x00,00130$
      000171 0C               [12] 1454 	inc	r4
      000172                       1455 00130$:
      000172 02r00rE8         [24] 1456 	ljmp	00108$
      000175                       1457 00106$:
                                   1458 ;	/opt/contiki/core/dev/slip.c:148: slip_arch_writeb(SLIP_END);
      000175 75 82 C0         [24] 1459 	mov	dpl,#0xC0
      000178 12r00r00         [24] 1460 	lcall	_slip_arch_writeb
                                   1461 ;	/opt/contiki/core/dev/slip.c:150: return len;
      00017B E5 81            [12] 1462 	mov	a,sp
      00017D 24 FD            [12] 1463 	add	a,#0xfd
      00017F F8               [12] 1464 	mov	r0,a
      000180 86 07            [24] 1465 	mov	ar7,@r0
      000182 8F 82            [24] 1466 	mov	dpl,r7
      000184 22               [24] 1467 	ret
                                   1468 ;------------------------------------------------------------
                                   1469 ;Allocation info for local variables in function 'rxbuf_init'
                                   1470 ;------------------------------------------------------------
                                   1471 ;	/opt/contiki/core/dev/slip.c:154: rxbuf_init(void)
                                   1472 ;	-----------------------------------------
                                   1473 ;	 function rxbuf_init
                                   1474 ;	-----------------------------------------
      000185                       1475 _rxbuf_init:
                                   1476 ;	/opt/contiki/core/dev/slip.c:156: begin = end = pkt_end = 0;
      000185 90r00r81         [24] 1477 	mov	dptr,#_pkt_end
      000188 E4               [12] 1478 	clr	a
      000189 F0               [24] 1479 	movx	@dptr,a
      00018A A3               [24] 1480 	inc	dptr
      00018B F0               [24] 1481 	movx	@dptr,a
      00018C 90r00r03         [24] 1482 	mov	dptr,#_end
      00018F F0               [24] 1483 	movx	@dptr,a
      000190 A3               [24] 1484 	inc	dptr
      000191 F0               [24] 1485 	movx	@dptr,a
      000192 90r00r01         [24] 1486 	mov	dptr,#_begin
      000195 F0               [24] 1487 	movx	@dptr,a
      000196 A3               [24] 1488 	inc	dptr
      000197 F0               [24] 1489 	movx	@dptr,a
                                   1490 ;	/opt/contiki/core/dev/slip.c:157: state = STATE_OK;
      000198 90r00r09         [24] 1491 	mov	dptr,#_state
      00019B 04               [12] 1492 	inc	a
      00019C F0               [24] 1493 	movx	@dptr,a
      00019D 22               [24] 1494 	ret
                                   1495 ;------------------------------------------------------------
                                   1496 ;Allocation info for local variables in function 'slip_poll_handler'
                                   1497 ;------------------------------------------------------------
                                   1498 ;blen                      Allocated to stack - sp -10
                                   1499 ;outbuf                    Allocated to stack - sp -6
                                   1500 ;i                         Allocated to registers r6 r7 
                                   1501 ;len                       Allocated to stack - sp -1
                                   1502 ;i                         Allocated to registers 
                                   1503 ;sloc0                     Allocated to stack - sp -3
                                   1504 ;sloc1                     Allocated to stack - sp +5
                                   1505 ;sloc2                     Allocated to stack - sp +8
                                   1506 ;------------------------------------------------------------
                                   1507 ;	/opt/contiki/core/dev/slip.c:162: slip_poll_handler(uint8_t *outbuf, uint16_t blen)
                                   1508 ;	-----------------------------------------
                                   1509 ;	 function slip_poll_handler
                                   1510 ;	-----------------------------------------
      00019E                       1511 _slip_poll_handler:
      00019E C0 82            [24] 1512 	push	dpl
      0001A0 C0 83            [24] 1513 	push	dph
      0001A2 C0 F0            [24] 1514 	push	b
      0001A4 E5 81            [12] 1515 	mov	a,sp
      0001A6 24 04            [12] 1516 	add	a,#0x04
      0001A8 F5 81            [12] 1517 	mov	sp,a
                                   1518 ;	/opt/contiki/core/dev/slip.c:165: if(rxbuf[begin] == 'C') {
      0001AA 90r00r01         [24] 1519 	mov	dptr,#_begin
      0001AD E0               [24] 1520 	movx	a,@dptr
      0001AE FB               [12] 1521 	mov	r3,a
      0001AF A3               [24] 1522 	inc	dptr
      0001B0 E0               [24] 1523 	movx	a,@dptr
      0001B1 FC               [12] 1524 	mov	r4,a
      0001B2 E5 81            [12] 1525 	mov	a,sp
      0001B4 24 FD            [12] 1526 	add	a,#0xfd
      0001B6 F8               [12] 1527 	mov	r0,a
      0001B7 EB               [12] 1528 	mov	a,r3
      0001B8 24r05            [12] 1529 	add	a,#_rxbuf
      0001BA F6               [12] 1530 	mov	@r0,a
      0001BB EC               [12] 1531 	mov	a,r4
      0001BC 34s00            [12] 1532 	addc	a,#(_rxbuf >> 8)
      0001BE 08               [12] 1533 	inc	r0
      0001BF F6               [12] 1534 	mov	@r0,a
      0001C0 E5 81            [12] 1535 	mov	a,sp
      0001C2 24 FD            [12] 1536 	add	a,#0xfd
      0001C4 F8               [12] 1537 	mov	r0,a
      0001C5 86 82            [24] 1538 	mov	dpl,@r0
      0001C7 08               [12] 1539 	inc	r0
      0001C8 86 83            [24] 1540 	mov	dph,@r0
      0001CA E0               [24] 1541 	movx	a,@dptr
      0001CB FA               [12] 1542 	mov	r2,a
      0001CC 7F 00            [12] 1543 	mov	r7,#0x00
      0001CE BA 43 05         [24] 1544 	cjne	r2,#0x43,00181$
      0001D1 BF 00 02         [24] 1545 	cjne	r7,#0x00,00181$
      0001D4 80 03            [24] 1546 	sjmp	00182$
      0001D6                       1547 00181$:
      0001D6 02r02r99         [24] 1548 	ljmp	00107$
      0001D9                       1549 00182$:
                                   1550 ;	/opt/contiki/core/dev/slip.c:167: if(begin < end && (end - begin) >= 6
      0001D9 90r00r03         [24] 1551 	mov	dptr,#_end
      0001DC E0               [24] 1552 	movx	a,@dptr
      0001DD FE               [12] 1553 	mov	r6,a
      0001DE A3               [24] 1554 	inc	dptr
      0001DF E0               [24] 1555 	movx	a,@dptr
      0001E0 FF               [12] 1556 	mov	r7,a
      0001E1 C3               [12] 1557 	clr	c
      0001E2 EB               [12] 1558 	mov	a,r3
      0001E3 9E               [12] 1559 	subb	a,r6
      0001E4 EC               [12] 1560 	mov	a,r4
      0001E5 9F               [12] 1561 	subb	a,r7
      0001E6 40 03            [24] 1562 	jc	00183$
      0001E8 02r02r99         [24] 1563 	ljmp	00107$
      0001EB                       1564 00183$:
      0001EB EE               [12] 1565 	mov	a,r6
      0001EC C3               [12] 1566 	clr	c
      0001ED 9B               [12] 1567 	subb	a,r3
      0001EE FB               [12] 1568 	mov	r3,a
      0001EF EF               [12] 1569 	mov	a,r7
      0001F0 9C               [12] 1570 	subb	a,r4
      0001F1 FC               [12] 1571 	mov	r4,a
      0001F2 C3               [12] 1572 	clr	c
      0001F3 EB               [12] 1573 	mov	a,r3
      0001F4 94 06            [12] 1574 	subb	a,#0x06
      0001F6 EC               [12] 1575 	mov	a,r4
      0001F7 94 00            [12] 1576 	subb	a,#0x00
      0001F9 50 03            [24] 1577 	jnc	00184$
      0001FB 02r02r99         [24] 1578 	ljmp	00107$
      0001FE                       1579 00184$:
                                   1580 ;	/opt/contiki/core/dev/slip.c:168: && memcmp(&rxbuf[begin], "CLIENT", 6) == 0) {
      0001FE E5 81            [12] 1581 	mov	a,sp
      000200 24 FD            [12] 1582 	add	a,#0xfd
      000202 F8               [12] 1583 	mov	r0,a
      000203 86 06            [24] 1584 	mov	ar6,@r0
      000205 08               [12] 1585 	inc	r0
      000206 86 07            [24] 1586 	mov	ar7,@r0
      000208 7D 00            [12] 1587 	mov	r5,#0x00
      00020A 74 06            [12] 1588 	mov	a,#0x06
      00020C C0 E0            [24] 1589 	push	acc
      00020E E4               [12] 1590 	clr	a
      00020F C0 E0            [24] 1591 	push	acc
      000211 74r00            [12] 1592 	mov	a,#___str_0
      000213 C0 E0            [24] 1593 	push	acc
      000215 74s00            [12] 1594 	mov	a,#(___str_0 >> 8)
      000217 C0 E0            [24] 1595 	push	acc
      000219 74 80            [12] 1596 	mov	a,#0x80
      00021B C0 E0            [24] 1597 	push	acc
      00021D 8E 82            [24] 1598 	mov	dpl,r6
      00021F 8F 83            [24] 1599 	mov	dph,r7
      000221 8D F0            [24] 1600 	mov	b,r5
      000223 12r00r00         [24] 1601 	lcall	_memcmp
      000226 AE 82            [24] 1602 	mov	r6,dpl
      000228 AF 83            [24] 1603 	mov	r7,dph
      00022A E5 81            [12] 1604 	mov	a,sp
      00022C 24 FB            [12] 1605 	add	a,#0xfb
      00022E F5 81            [12] 1606 	mov	sp,a
      000230 EE               [12] 1607 	mov	a,r6
      000231 4F               [12] 1608 	orl	a,r7
      000232 70 65            [24] 1609 	jnz	00107$
                                   1610 ;	/opt/contiki/core/dev/slip.c:169: state = STATE_TWOPACKETS;	/* Interrupts do nothing. */
      000234 90r00r09         [24] 1611 	mov	dptr,#_state
      000237 E4               [12] 1612 	clr	a
      000238 F0               [24] 1613 	movx	@dptr,a
                                   1614 ;	/opt/contiki/core/dev/slip.c:170: memset(&rxbuf[begin], 0x0, 6);
      000239 90r00r01         [24] 1615 	mov	dptr,#_begin
      00023C E0               [24] 1616 	movx	a,@dptr
      00023D FE               [12] 1617 	mov	r6,a
      00023E A3               [24] 1618 	inc	dptr
      00023F E0               [24] 1619 	movx	a,@dptr
      000240 FF               [12] 1620 	mov	r7,a
      000241 EE               [12] 1621 	mov	a,r6
      000242 24r05            [12] 1622 	add	a,#_rxbuf
      000244 FE               [12] 1623 	mov	r6,a
      000245 EF               [12] 1624 	mov	a,r7
      000246 34s00            [12] 1625 	addc	a,#(_rxbuf >> 8)
      000248 FF               [12] 1626 	mov	r7,a
      000249 7D 00            [12] 1627 	mov	r5,#0x00
      00024B 74 06            [12] 1628 	mov	a,#0x06
      00024D C0 E0            [24] 1629 	push	acc
      00024F E4               [12] 1630 	clr	a
      000250 C0 E0            [24] 1631 	push	acc
      000252 C0 E0            [24] 1632 	push	acc
      000254 8E 82            [24] 1633 	mov	dpl,r6
      000256 8F 83            [24] 1634 	mov	dph,r7
      000258 8D F0            [24] 1635 	mov	b,r5
      00025A 12r00r00         [24] 1636 	lcall	_memset
      00025D 15 81            [12] 1637 	dec	sp
      00025F 15 81            [12] 1638 	dec	sp
      000261 15 81            [12] 1639 	dec	sp
                                   1640 ;	/opt/contiki/core/dev/slip.c:172: rxbuf_init();
      000263 12r01r85         [24] 1641 	lcall	_rxbuf_init
                                   1642 ;	/opt/contiki/core/dev/slip.c:174: for(i = 0; i < 13; i++) {
      000266 7E 00            [12] 1643 	mov	r6,#0x00
      000268 7F 00            [12] 1644 	mov	r7,#0x00
      00026A                       1645 00123$:
                                   1646 ;	/opt/contiki/core/dev/slip.c:175: slip_arch_writeb("CLIENTSERVER\300"[i]);
      00026A EE               [12] 1647 	mov	a,r6
      00026B 24r07            [12] 1648 	add	a,#___str_1
      00026D F5 82            [12] 1649 	mov	dpl,a
      00026F EF               [12] 1650 	mov	a,r7
      000270 34s00            [12] 1651 	addc	a,#(___str_1 >> 8)
      000272 F5 83            [12] 1652 	mov	dph,a
      000274 E4               [12] 1653 	clr	a
      000275 93               [24] 1654 	movc	a,@a+dptr
      000276 F5 82            [12] 1655 	mov	dpl,a
      000278 C0 07            [24] 1656 	push	ar7
      00027A C0 06            [24] 1657 	push	ar6
      00027C 12r00r00         [24] 1658 	lcall	_slip_arch_writeb
      00027F D0 06            [24] 1659 	pop	ar6
      000281 D0 07            [24] 1660 	pop	ar7
                                   1661 ;	/opt/contiki/core/dev/slip.c:174: for(i = 0; i < 13; i++) {
      000283 0E               [12] 1662 	inc	r6
      000284 BE 00 01         [24] 1663 	cjne	r6,#0x00,00186$
      000287 0F               [12] 1664 	inc	r7
      000288                       1665 00186$:
      000288 C3               [12] 1666 	clr	c
      000289 EE               [12] 1667 	mov	a,r6
      00028A 94 0D            [12] 1668 	subb	a,#0x0D
      00028C EF               [12] 1669 	mov	a,r7
      00028D 64 80            [12] 1670 	xrl	a,#0x80
      00028F 94 80            [12] 1671 	subb	a,#0x80
      000291 40 D7            [24] 1672 	jc	00123$
                                   1673 ;	/opt/contiki/core/dev/slip.c:177: return 0;
      000293 90 00 00         [24] 1674 	mov	dptr,#0x0000
      000296 02r04r0C         [24] 1675 	ljmp	00131$
      000299                       1676 00107$:
                                   1677 ;	/opt/contiki/core/dev/slip.c:211: if(begin != pkt_end) {
      000299 90r00r01         [24] 1678 	mov	dptr,#_begin
      00029C E0               [24] 1679 	movx	a,@dptr
      00029D FE               [12] 1680 	mov	r6,a
      00029E A3               [24] 1681 	inc	dptr
      00029F E0               [24] 1682 	movx	a,@dptr
      0002A0 FF               [12] 1683 	mov	r7,a
      0002A1 90r00r81         [24] 1684 	mov	dptr,#_pkt_end
      0002A4 E0               [24] 1685 	movx	a,@dptr
      0002A5 FC               [12] 1686 	mov	r4,a
      0002A6 A3               [24] 1687 	inc	dptr
      0002A7 E0               [24] 1688 	movx	a,@dptr
      0002A8 FD               [12] 1689 	mov	r5,a
      0002A9 EE               [12] 1690 	mov	a,r6
      0002AA B5 04 07         [24] 1691 	cjne	a,ar4,00188$
      0002AD EF               [12] 1692 	mov	a,r7
      0002AE B5 05 03         [24] 1693 	cjne	a,ar5,00188$
      0002B1 02r04r09         [24] 1694 	ljmp	00122$
      0002B4                       1695 00188$:
                                   1696 ;	/opt/contiki/core/dev/slip.c:214: if(begin < pkt_end) {
      0002B4 C3               [12] 1697 	clr	c
      0002B5 EE               [12] 1698 	mov	a,r6
      0002B6 9C               [12] 1699 	subb	a,r4
      0002B7 EF               [12] 1700 	mov	a,r7
      0002B8 9D               [12] 1701 	subb	a,r5
      0002B9 50 63            [24] 1702 	jnc	00117$
                                   1703 ;	/opt/contiki/core/dev/slip.c:215: len = pkt_end - begin;
      0002BB EC               [12] 1704 	mov	a,r4
      0002BC C3               [12] 1705 	clr	c
      0002BD 9E               [12] 1706 	subb	a,r6
      0002BE FA               [12] 1707 	mov	r2,a
      0002BF ED               [12] 1708 	mov	a,r5
      0002C0 9F               [12] 1709 	subb	a,r7
      0002C1 FB               [12] 1710 	mov	r3,a
      0002C2 A8 81            [24] 1711 	mov	r0,sp
      0002C4 18               [12] 1712 	dec	r0
      0002C5 A6 02            [24] 1713 	mov	@r0,ar2
      0002C7 08               [12] 1714 	inc	r0
      0002C8 A6 03            [24] 1715 	mov	@r0,ar3
                                   1716 ;	/opt/contiki/core/dev/slip.c:216: if(len > blen) {
      0002CA A8 81            [24] 1717 	mov	r0,sp
      0002CC 18               [12] 1718 	dec	r0
      0002CD E5 81            [12] 1719 	mov	a,sp
      0002CF 24 F6            [12] 1720 	add	a,#0xf6
      0002D1 F9               [12] 1721 	mov	r1,a
      0002D2 C3               [12] 1722 	clr	c
      0002D3 E7               [12] 1723 	mov	a,@r1
      0002D4 96               [12] 1724 	subb	a,@r0
      0002D5 09               [12] 1725 	inc	r1
      0002D6 E7               [12] 1726 	mov	a,@r1
      0002D7 08               [12] 1727 	inc	r0
      0002D8 96               [12] 1728 	subb	a,@r0
      0002D9 50 0A            [24] 1729 	jnc	00109$
                                   1730 ;	/opt/contiki/core/dev/slip.c:217: len = 0;
      0002DB A8 81            [24] 1731 	mov	r0,sp
      0002DD 18               [12] 1732 	dec	r0
      0002DE E4               [12] 1733 	clr	a
      0002DF F6               [12] 1734 	mov	@r0,a
      0002E0 08               [12] 1735 	inc	r0
      0002E1 F6               [12] 1736 	mov	@r0,a
      0002E2 02r03rCA         [24] 1737 	ljmp	00118$
      0002E5                       1738 00109$:
                                   1739 ;	/opt/contiki/core/dev/slip.c:219: memcpy(outbuf, &rxbuf[begin], len);
      0002E5 EE               [12] 1740 	mov	a,r6
      0002E6 24r05            [12] 1741 	add	a,#_rxbuf
      0002E8 FA               [12] 1742 	mov	r2,a
      0002E9 EF               [12] 1743 	mov	a,r7
      0002EA 34s00            [12] 1744 	addc	a,#(_rxbuf >> 8)
      0002EC FB               [12] 1745 	mov	r3,a
      0002ED 7F 00            [12] 1746 	mov	r7,#0x00
      0002EF E5 81            [12] 1747 	mov	a,sp
      0002F1 24 FA            [12] 1748 	add	a,#0xfa
      0002F3 F8               [12] 1749 	mov	r0,a
      0002F4 86 05            [24] 1750 	mov	ar5,@r0
      0002F6 08               [12] 1751 	inc	r0
      0002F7 86 06            [24] 1752 	mov	ar6,@r0
      0002F9 08               [12] 1753 	inc	r0
      0002FA 86 04            [24] 1754 	mov	ar4,@r0
      0002FC A8 81            [24] 1755 	mov	r0,sp
      0002FE 18               [12] 1756 	dec	r0
      0002FF E6               [12] 1757 	mov	a,@r0
      000300 C0 E0            [24] 1758 	push	acc
      000302 08               [12] 1759 	inc	r0
      000303 E6               [12] 1760 	mov	a,@r0
      000304 C0 E0            [24] 1761 	push	acc
      000306 C0 02            [24] 1762 	push	ar2
      000308 C0 03            [24] 1763 	push	ar3
      00030A C0 07            [24] 1764 	push	ar7
      00030C 8D 82            [24] 1765 	mov	dpl,r5
      00030E 8E 83            [24] 1766 	mov	dph,r6
      000310 8C F0            [24] 1767 	mov	b,r4
      000312 12r00r00         [24] 1768 	lcall	_memcpy
      000315 E5 81            [12] 1769 	mov	a,sp
      000317 24 FB            [12] 1770 	add	a,#0xfb
      000319 F5 81            [12] 1771 	mov	sp,a
      00031B 02r03rCA         [24] 1772 	ljmp	00118$
      00031E                       1773 00117$:
                                   1774 ;	/opt/contiki/core/dev/slip.c:222: len = (RX_BUFSIZE - begin) + (pkt_end - 0);
      00031E 74 7C            [12] 1775 	mov	a,#0x7C
      000320 C3               [12] 1776 	clr	c
      000321 9E               [12] 1777 	subb	a,r6
      000322 FA               [12] 1778 	mov	r2,a
      000323 E4               [12] 1779 	clr	a
      000324 9F               [12] 1780 	subb	a,r7
      000325 FB               [12] 1781 	mov	r3,a
      000326 EC               [12] 1782 	mov	a,r4
      000327 2A               [12] 1783 	add	a,r2
      000328 FC               [12] 1784 	mov	r4,a
      000329 ED               [12] 1785 	mov	a,r5
      00032A 3B               [12] 1786 	addc	a,r3
      00032B FD               [12] 1787 	mov	r5,a
      00032C A8 81            [24] 1788 	mov	r0,sp
      00032E 18               [12] 1789 	dec	r0
      00032F A6 04            [24] 1790 	mov	@r0,ar4
      000331 08               [12] 1791 	inc	r0
      000332 A6 05            [24] 1792 	mov	@r0,ar5
                                   1793 ;	/opt/contiki/core/dev/slip.c:223: if(len > blen) {
      000334 A8 81            [24] 1794 	mov	r0,sp
      000336 18               [12] 1795 	dec	r0
      000337 E5 81            [12] 1796 	mov	a,sp
      000339 24 F6            [12] 1797 	add	a,#0xf6
      00033B F9               [12] 1798 	mov	r1,a
      00033C C3               [12] 1799 	clr	c
      00033D E7               [12] 1800 	mov	a,@r1
      00033E 96               [12] 1801 	subb	a,@r0
      00033F 09               [12] 1802 	inc	r1
      000340 E7               [12] 1803 	mov	a,@r1
      000341 08               [12] 1804 	inc	r0
      000342 96               [12] 1805 	subb	a,@r0
      000343 50 0A            [24] 1806 	jnc	00114$
                                   1807 ;	/opt/contiki/core/dev/slip.c:224: len = 0;
      000345 A8 81            [24] 1808 	mov	r0,sp
      000347 18               [12] 1809 	dec	r0
      000348 E4               [12] 1810 	clr	a
      000349 F6               [12] 1811 	mov	@r0,a
      00034A 08               [12] 1812 	inc	r0
      00034B F6               [12] 1813 	mov	@r0,a
      00034C 02r03rCA         [24] 1814 	ljmp	00118$
      00034F                       1815 00114$:
                                   1816 ;	/opt/contiki/core/dev/slip.c:227: for(i = begin; i < RX_BUFSIZE; i++) {
      00034F E5 81            [12] 1817 	mov	a,sp
      000351 24 FA            [12] 1818 	add	a,#0xfa
      000353 F8               [12] 1819 	mov	r0,a
      000354 86 03            [24] 1820 	mov	ar3,@r0
      000356 08               [12] 1821 	inc	r0
      000357 86 04            [24] 1822 	mov	ar4,@r0
      000359 08               [12] 1823 	inc	r0
      00035A 86 05            [24] 1824 	mov	ar5,@r0
      00035C                       1825 00126$:
      00035C C3               [12] 1826 	clr	c
      00035D EE               [12] 1827 	mov	a,r6
      00035E 94 7C            [12] 1828 	subb	a,#0x7C
      000360 EF               [12] 1829 	mov	a,r7
      000361 94 00            [12] 1830 	subb	a,#0x00
      000363 50 21            [24] 1831 	jnc	00111$
                                   1832 ;	/opt/contiki/core/dev/slip.c:228: *outbuf++ = rxbuf[i];
      000365 EE               [12] 1833 	mov	a,r6
      000366 24r05            [12] 1834 	add	a,#_rxbuf
      000368 F5 82            [12] 1835 	mov	dpl,a
      00036A EF               [12] 1836 	mov	a,r7
      00036B 34s00            [12] 1837 	addc	a,#(_rxbuf >> 8)
      00036D F5 83            [12] 1838 	mov	dph,a
      00036F E0               [24] 1839 	movx	a,@dptr
      000370 FA               [12] 1840 	mov	r2,a
      000371 8B 82            [24] 1841 	mov	dpl,r3
      000373 8C 83            [24] 1842 	mov	dph,r4
      000375 8D F0            [24] 1843 	mov	b,r5
      000377 12r00r00         [24] 1844 	lcall	__gptrput
      00037A A3               [24] 1845 	inc	dptr
      00037B AB 82            [24] 1846 	mov	r3,dpl
      00037D AC 83            [24] 1847 	mov	r4,dph
                                   1848 ;	/opt/contiki/core/dev/slip.c:227: for(i = begin; i < RX_BUFSIZE; i++) {
      00037F 0E               [12] 1849 	inc	r6
      000380 BE 00 D9         [24] 1850 	cjne	r6,#0x00,00126$
      000383 0F               [12] 1851 	inc	r7
      000384 80 D6            [24] 1852 	sjmp	00126$
      000386                       1853 00111$:
                                   1854 ;	/opt/contiki/core/dev/slip.c:230: for(i = 0; i < pkt_end; i++) {
      000386 8B 07            [24] 1855 	mov	ar7,r3
      000388 8C 06            [24] 1856 	mov	ar6,r4
      00038A 7B 00            [12] 1857 	mov	r3,#0x00
      00038C 7C 00            [12] 1858 	mov	r4,#0x00
      00038E                       1859 00129$:
      00038E C0 07            [24] 1860 	push	ar7
      000390 C0 06            [24] 1861 	push	ar6
      000392 C0 05            [24] 1862 	push	ar5
      000394 90r00r81         [24] 1863 	mov	dptr,#_pkt_end
      000397 E0               [24] 1864 	movx	a,@dptr
      000398 FA               [12] 1865 	mov	r2,a
      000399 A3               [24] 1866 	inc	dptr
      00039A E0               [24] 1867 	movx	a,@dptr
      00039B FF               [12] 1868 	mov	r7,a
      00039C C3               [12] 1869 	clr	c
      00039D EB               [12] 1870 	mov	a,r3
      00039E 9A               [12] 1871 	subb	a,r2
      00039F EC               [12] 1872 	mov	a,r4
      0003A0 9F               [12] 1873 	subb	a,r7
      0003A1 D0 05            [24] 1874 	pop	ar5
      0003A3 D0 06            [24] 1875 	pop	ar6
      0003A5 D0 07            [24] 1876 	pop	ar7
      0003A7 50 21            [24] 1877 	jnc	00118$
                                   1878 ;	/opt/contiki/core/dev/slip.c:231: *outbuf++ = rxbuf[i];
      0003A9 EB               [12] 1879 	mov	a,r3
      0003AA 24r05            [12] 1880 	add	a,#_rxbuf
      0003AC F5 82            [12] 1881 	mov	dpl,a
      0003AE EC               [12] 1882 	mov	a,r4
      0003AF 34s00            [12] 1883 	addc	a,#(_rxbuf >> 8)
      0003B1 F5 83            [12] 1884 	mov	dph,a
      0003B3 E0               [24] 1885 	movx	a,@dptr
      0003B4 FA               [12] 1886 	mov	r2,a
      0003B5 8F 82            [24] 1887 	mov	dpl,r7
      0003B7 8E 83            [24] 1888 	mov	dph,r6
      0003B9 8D F0            [24] 1889 	mov	b,r5
      0003BB 12r00r00         [24] 1890 	lcall	__gptrput
      0003BE A3               [24] 1891 	inc	dptr
      0003BF AF 82            [24] 1892 	mov	r7,dpl
      0003C1 AE 83            [24] 1893 	mov	r6,dph
                                   1894 ;	/opt/contiki/core/dev/slip.c:230: for(i = 0; i < pkt_end; i++) {
      0003C3 0B               [12] 1895 	inc	r3
      0003C4 BB 00 C7         [24] 1896 	cjne	r3,#0x00,00129$
      0003C7 0C               [12] 1897 	inc	r4
      0003C8 80 C4            [24] 1898 	sjmp	00129$
      0003CA                       1899 00118$:
                                   1900 ;	/opt/contiki/core/dev/slip.c:237: begin = pkt_end;
      0003CA 90r00r81         [24] 1901 	mov	dptr,#_pkt_end
      0003CD E0               [24] 1902 	movx	a,@dptr
      0003CE FE               [12] 1903 	mov	r6,a
      0003CF A3               [24] 1904 	inc	dptr
      0003D0 E0               [24] 1905 	movx	a,@dptr
      0003D1 FF               [12] 1906 	mov	r7,a
      0003D2 90r00r01         [24] 1907 	mov	dptr,#_begin
      0003D5 EE               [12] 1908 	mov	a,r6
      0003D6 F0               [24] 1909 	movx	@dptr,a
      0003D7 EF               [12] 1910 	mov	a,r7
      0003D8 A3               [24] 1911 	inc	dptr
      0003D9 F0               [24] 1912 	movx	@dptr,a
                                   1913 ;	/opt/contiki/core/dev/slip.c:238: if(state == STATE_TWOPACKETS) {
      0003DA 90r00r09         [24] 1914 	mov	dptr,#_state
      0003DD E0               [24] 1915 	movx	a,@dptr
      0003DE 70 1F            [24] 1916 	jnz	00120$
                                   1917 ;	/opt/contiki/core/dev/slip.c:239: pkt_end = end;
      0003E0 90r00r03         [24] 1918 	mov	dptr,#_end
      0003E3 E0               [24] 1919 	movx	a,@dptr
      0003E4 FE               [12] 1920 	mov	r6,a
      0003E5 A3               [24] 1921 	inc	dptr
      0003E6 E0               [24] 1922 	movx	a,@dptr
      0003E7 FF               [12] 1923 	mov	r7,a
      0003E8 90r00r81         [24] 1924 	mov	dptr,#_pkt_end
      0003EB EE               [12] 1925 	mov	a,r6
      0003EC F0               [24] 1926 	movx	@dptr,a
      0003ED EF               [12] 1927 	mov	a,r7
      0003EE A3               [24] 1928 	inc	dptr
      0003EF F0               [24] 1929 	movx	@dptr,a
                                   1930 ;	/opt/contiki/core/dev/slip.c:240: state = STATE_OK;		/* Assume no bytes where lost! */
      0003F0 90r00r09         [24] 1931 	mov	dptr,#_state
      0003F3 74 01            [12] 1932 	mov	a,#0x01
      0003F5 F0               [24] 1933 	movx	@dptr,a
                                   1934 ;	/opt/contiki/core/dev/slip.c:243: process_poll(&slip_process);
      0003F6 90r00r00         [24] 1935 	mov	dptr,#_slip_process
      0003F9 75 F0 00         [24] 1936 	mov	b,#0x00
      0003FC 12r00r00         [24] 1937 	lcall	_process_poll
      0003FF                       1938 00120$:
                                   1939 ;	/opt/contiki/core/dev/slip.c:245: return len;
      0003FF A8 81            [24] 1940 	mov	r0,sp
      000401 18               [12] 1941 	dec	r0
      000402 86 82            [24] 1942 	mov	dpl,@r0
      000404 08               [12] 1943 	inc	r0
      000405 86 83            [24] 1944 	mov	dph,@r0
      000407 80 03            [24] 1945 	sjmp	00131$
      000409                       1946 00122$:
                                   1947 ;	/opt/contiki/core/dev/slip.c:248: return 0;
      000409 90 00 00         [24] 1948 	mov	dptr,#0x0000
      00040C                       1949 00131$:
      00040C E5 81            [12] 1950 	mov	a,sp
      00040E 24 F9            [12] 1951 	add	a,#0xF9
      000410 F5 81            [12] 1952 	mov	sp,a
      000412 22               [24] 1953 	ret
                                   1954 ;------------------------------------------------------------
                                   1955 ;Allocation info for local variables in function 'process_thread_slip_process'
                                   1956 ;------------------------------------------------------------
                                   1957 ;ev                        Allocated to stack - sp -10
                                   1958 ;data                      Allocated to stack - sp -13
                                   1959 ;process_pt                Allocated to registers r5 r6 r7 
                                   1960 ;PT_YIELD_FLAG             Allocated to registers r4 
                                   1961 ;buf                       Allocated to stack - sp -7
                                   1962 ;nid                       Allocated to registers r3 r4 
                                   1963 ;ip_id                     Allocated with name '_process_thread_slip_process_ip_id_6_187'
                                   1964 ;------------------------------------------------------------
                                   1965 ;	/opt/contiki/core/dev/slip.c:251: PROCESS_THREAD(slip_process, ev, data)
                                   1966 ;	-----------------------------------------
                                   1967 ;	 function process_thread_slip_process
                                   1968 ;	-----------------------------------------
      000413                       1969 _process_thread_slip_process:
      000413 E5 81            [12] 1970 	mov	a,sp
      000415 24 08            [12] 1971 	add	a,#0x08
      000417 F5 81            [12] 1972 	mov	sp,a
                                   1973 ;	/opt/contiki/core/dev/slip.c:253: PROCESS_BEGIN();
      000419 AD 82            [24] 1974 	mov	r5,dpl
      00041B AE 83            [24] 1975 	mov	r6,dph
      00041D AF F0            [24] 1976 	mov	r7,b
      00041F 7C 01            [12] 1977 	mov	r4,#0x01
      000421 12r00r00         [24] 1978 	lcall	__gptrget
      000424 FA               [12] 1979 	mov	r2,a
      000425 A3               [24] 1980 	inc	dptr
      000426 12r00r00         [24] 1981 	lcall	__gptrget
      000429 FB               [12] 1982 	mov	r3,a
      00042A BA 00 05         [24] 1983 	cjne	r2,#0x00,00174$
      00042D BB 00 02         [24] 1984 	cjne	r3,#0x00,00174$
      000430 80 0B            [24] 1985 	sjmp	00101$
      000432                       1986 00174$:
      000432 BA 02 05         [24] 1987 	cjne	r2,#0x02,00175$
      000435 BB 01 02         [24] 1988 	cjne	r3,#0x01,00175$
      000438 80 24            [24] 1989 	sjmp	00102$
      00043A                       1990 00175$:
      00043A 02r06rDD         [24] 1991 	ljmp	00129$
      00043D                       1992 00101$:
                                   1993 ;	/opt/contiki/core/dev/slip.c:255: rxbuf_init();
      00043D C0 07            [24] 1994 	push	ar7
      00043F C0 06            [24] 1995 	push	ar6
      000441 C0 05            [24] 1996 	push	ar5
      000443 12r01r85         [24] 1997 	lcall	_rxbuf_init
      000446 D0 05            [24] 1998 	pop	ar5
      000448 D0 06            [24] 1999 	pop	ar6
      00044A D0 07            [24] 2000 	pop	ar7
                                   2001 ;	/opt/contiki/core/dev/slip.c:257: while(1) {
      00044C                       2002 00127$:
                                   2003 ;	/opt/contiki/core/dev/slip.c:258: PROCESS_YIELD_UNTIL(ev == PROCESS_EVENT_POLL);
      00044C 7C 00            [12] 2004 	mov	r4,#0x00
      00044E 8D 82            [24] 2005 	mov	dpl,r5
      000450 8E 83            [24] 2006 	mov	dph,r6
      000452 8F F0            [24] 2007 	mov	b,r7
      000454 74 02            [12] 2008 	mov	a,#0x02
      000456 12r00r00         [24] 2009 	lcall	__gptrput
      000459 A3               [24] 2010 	inc	dptr
      00045A 14               [12] 2011 	dec	a
      00045B 12r00r00         [24] 2012 	lcall	__gptrput
      00045E                       2013 00102$:
      00045E EC               [12] 2014 	mov	a,r4
      00045F 60 0A            [24] 2015 	jz	00103$
      000461 E5 81            [12] 2016 	mov	a,sp
      000463 24 F6            [12] 2017 	add	a,#0xf6
      000465 F8               [12] 2018 	mov	r0,a
      000466 B6 82 02         [24] 2019 	cjne	@r0,#0x82,00177$
      000469 80 06            [24] 2020 	sjmp	00107$
      00046B                       2021 00177$:
      00046B                       2022 00103$:
      00046B 75 82 01         [24] 2023 	mov	dpl,#0x01
      00046E 02r06rEE         [24] 2024 	ljmp	00130$
      000471                       2025 00107$:
                                   2026 ;	/opt/contiki/core/dev/slip.c:260: slip_active = 1;
      000471 90r00r00         [24] 2027 	mov	dptr,#_slip_active
      000474 74 01            [12] 2028 	mov	a,#0x01
      000476 F0               [24] 2029 	movx	@dptr,a
                                   2030 ;	/opt/contiki/core/dev/slip.c:263: uip_len = slip_poll_handler(&uip_buf[UIP_LLH_LEN],
      000477 C0 07            [24] 2031 	push	ar7
      000479 C0 06            [24] 2032 	push	ar6
      00047B C0 05            [24] 2033 	push	ar5
      00047D 74 6C            [12] 2034 	mov	a,#0x6C
      00047F C0 E0            [24] 2035 	push	acc
      000481 E4               [12] 2036 	clr	a
      000482 C0 E0            [24] 2037 	push	acc
      000484 90r00r00         [24] 2038 	mov	dptr,#_uip_aligned_buf
      000487 75 F0 00         [24] 2039 	mov	b,#0x00
      00048A 12r01r9E         [24] 2040 	lcall	_slip_poll_handler
      00048D AB 82            [24] 2041 	mov	r3,dpl
      00048F AC 83            [24] 2042 	mov	r4,dph
      000491 15 81            [12] 2043 	dec	sp
      000493 15 81            [12] 2044 	dec	sp
      000495 D0 05            [24] 2045 	pop	ar5
      000497 D0 06            [24] 2046 	pop	ar6
      000499 D0 07            [24] 2047 	pop	ar7
      00049B 90r00r00         [24] 2048 	mov	dptr,#_uip_len
      00049E EB               [12] 2049 	mov	a,r3
      00049F F0               [24] 2050 	movx	@dptr,a
      0004A0 EC               [12] 2051 	mov	a,r4
      0004A1 A3               [24] 2052 	inc	dptr
      0004A2 F0               [24] 2053 	movx	@dptr,a
                                   2054 ;	/opt/contiki/core/dev/slip.c:266: if(uip_len == 4 && strncmp((char*)&uip_buf[UIP_LLH_LEN], "?IPA", 4) == 0) {
      0004A3 BB 04 05         [24] 2055 	cjne	r3,#0x04,00178$
      0004A6 BC 00 02         [24] 2056 	cjne	r4,#0x00,00178$
      0004A9 80 03            [24] 2057 	sjmp	00179$
      0004AB                       2058 00178$:
      0004AB 02r05rB9         [24] 2059 	ljmp	00123$
      0004AE                       2060 00179$:
      0004AE C0 07            [24] 2061 	push	ar7
      0004B0 C0 06            [24] 2062 	push	ar6
      0004B2 C0 05            [24] 2063 	push	ar5
      0004B4 74 04            [12] 2064 	mov	a,#0x04
      0004B6 C0 E0            [24] 2065 	push	acc
      0004B8 E4               [12] 2066 	clr	a
      0004B9 C0 E0            [24] 2067 	push	acc
      0004BB 74r15            [12] 2068 	mov	a,#___str_2
      0004BD C0 E0            [24] 2069 	push	acc
      0004BF 74s00            [12] 2070 	mov	a,#(___str_2 >> 8)
      0004C1 C0 E0            [24] 2071 	push	acc
      0004C3 74 80            [12] 2072 	mov	a,#0x80
      0004C5 C0 E0            [24] 2073 	push	acc
      0004C7 90r00r00         [24] 2074 	mov	dptr,#_uip_aligned_buf
      0004CA 75 F0 00         [24] 2075 	mov	b,#0x00
      0004CD 12r00r00         [24] 2076 	lcall	_strncmp
      0004D0 AB 82            [24] 2077 	mov	r3,dpl
      0004D2 AC 83            [24] 2078 	mov	r4,dph
      0004D4 E5 81            [12] 2079 	mov	a,sp
      0004D6 24 FB            [12] 2080 	add	a,#0xfb
      0004D8 F5 81            [12] 2081 	mov	sp,a
      0004DA D0 05            [24] 2082 	pop	ar5
      0004DC D0 06            [24] 2083 	pop	ar6
      0004DE D0 07            [24] 2084 	pop	ar7
      0004E0 EB               [12] 2085 	mov	a,r3
      0004E1 4C               [12] 2086 	orl	a,r4
      0004E2 60 03            [24] 2087 	jz	00180$
      0004E4 02r05rB9         [24] 2088 	ljmp	00123$
      0004E7                       2089 00180$:
                                   2090 ;	/opt/contiki/core/dev/slip.c:268: memcpy(&buf[0], "=IPA", 4);
      0004E7 C0 05            [24] 2091 	push	ar5
      0004E9 C0 06            [24] 2092 	push	ar6
      0004EB C0 07            [24] 2093 	push	ar7
      0004ED E5 81            [12] 2094 	mov	a,sp
      0004EF 24 F6            [12] 2095 	add	a,#0xF6
      0004F1 FC               [12] 2096 	mov	r4,a
      0004F2 FA               [12] 2097 	mov	r2,a
      0004F3 7B 00            [12] 2098 	mov	r3,#0x00
      0004F5 7F 40            [12] 2099 	mov	r7,#0x40
      0004F7 C0 07            [24] 2100 	push	ar7
      0004F9 C0 06            [24] 2101 	push	ar6
      0004FB C0 05            [24] 2102 	push	ar5
      0004FD C0 04            [24] 2103 	push	ar4
      0004FF 74 04            [12] 2104 	mov	a,#0x04
      000501 C0 E0            [24] 2105 	push	acc
      000503 E4               [12] 2106 	clr	a
      000504 C0 E0            [24] 2107 	push	acc
      000506 74r1A            [12] 2108 	mov	a,#___str_3
      000508 C0 E0            [24] 2109 	push	acc
      00050A 74s00            [12] 2110 	mov	a,#(___str_3 >> 8)
      00050C C0 E0            [24] 2111 	push	acc
      00050E 74 80            [12] 2112 	mov	a,#0x80
      000510 C0 E0            [24] 2113 	push	acc
      000512 8A 82            [24] 2114 	mov	dpl,r2
      000514 8B 83            [24] 2115 	mov	dph,r3
      000516 8F F0            [24] 2116 	mov	b,r7
      000518 12r00r00         [24] 2117 	lcall	_memcpy
      00051B E5 81            [12] 2118 	mov	a,sp
      00051D 24 FB            [12] 2119 	add	a,#0xfb
      00051F F5 81            [12] 2120 	mov	sp,a
      000521 D0 04            [24] 2121 	pop	ar4
      000523 D0 05            [24] 2122 	pop	ar5
      000525 D0 06            [24] 2123 	pop	ar6
      000527 D0 07            [24] 2124 	pop	ar7
                                   2125 ;	/opt/contiki/core/dev/slip.c:269: memcpy(&buf[4], &uip_hostaddr, 4);
      000529 74 04            [12] 2126 	mov	a,#0x04
      00052B 2C               [12] 2127 	add	a,r4
      00052C FF               [12] 2128 	mov	r7,a
      00052D 7E 00            [12] 2129 	mov	r6,#0x00
      00052F 7D 40            [12] 2130 	mov	r5,#0x40
      000531 C0 07            [24] 2131 	push	ar7
      000533 C0 06            [24] 2132 	push	ar6
      000535 C0 05            [24] 2133 	push	ar5
      000537 C0 04            [24] 2134 	push	ar4
      000539 74 04            [12] 2135 	mov	a,#0x04
      00053B C0 E0            [24] 2136 	push	acc
      00053D E4               [12] 2137 	clr	a
      00053E C0 E0            [24] 2138 	push	acc
      000540 74r00            [12] 2139 	mov	a,#_uip_hostaddr
      000542 C0 E0            [24] 2140 	push	acc
      000544 74s00            [12] 2141 	mov	a,#(_uip_hostaddr >> 8)
      000546 C0 E0            [24] 2142 	push	acc
      000548 E4               [12] 2143 	clr	a
      000549 C0 E0            [24] 2144 	push	acc
      00054B 8F 82            [24] 2145 	mov	dpl,r7
      00054D 8E 83            [24] 2146 	mov	dph,r6
      00054F 8D F0            [24] 2147 	mov	b,r5
      000551 12r00r00         [24] 2148 	lcall	_memcpy
      000554 E5 81            [12] 2149 	mov	a,sp
      000556 24 FB            [12] 2150 	add	a,#0xfb
      000558 F5 81            [12] 2151 	mov	sp,a
      00055A D0 04            [24] 2152 	pop	ar4
      00055C D0 05            [24] 2153 	pop	ar5
      00055E D0 06            [24] 2154 	pop	ar6
      000560 D0 07            [24] 2155 	pop	ar7
                                   2156 ;	/opt/contiki/core/dev/slip.c:270: if(input_callback) {
      000562 D0 07            [24] 2157 	pop	ar7
      000564 D0 06            [24] 2158 	pop	ar6
      000566 D0 05            [24] 2159 	pop	ar5
      000568 90r00r0A         [24] 2160 	mov	dptr,#_input_callback
      00056B E0               [24] 2161 	movx	a,@dptr
      00056C F5 F0            [12] 2162 	mov	b,a
      00056E A3               [24] 2163 	inc	dptr
      00056F E0               [24] 2164 	movx	a,@dptr
      000570 45 F0            [12] 2165 	orl	a,b
      000572 60 1E            [24] 2166 	jz	00110$
                                   2167 ;	/opt/contiki/core/dev/slip.c:271: input_callback();
      000574 C0 07            [24] 2168 	push	ar7
      000576 C0 06            [24] 2169 	push	ar6
      000578 C0 05            [24] 2170 	push	ar5
      00057A C0 04            [24] 2171 	push	ar4
      00057C 90r00r0A         [24] 2172 	mov	dptr,#_input_callback
      00057F E0               [24] 2173 	movx	a,@dptr
      000580 F8               [12] 2174 	mov	r0,a
      000581 A3               [24] 2175 	inc	dptr
      000582 E0               [24] 2176 	movx	a,@dptr
      000583 F5 83            [12] 2177 	mov	dph,a
      000585 88 82            [24] 2178 	mov	dpl,r0
      000587 12r00r00         [24] 2179 	lcall	__sdcc_call_dptr
      00058A D0 04            [24] 2180 	pop	ar4
      00058C D0 05            [24] 2181 	pop	ar5
      00058E D0 06            [24] 2182 	pop	ar6
      000590 D0 07            [24] 2183 	pop	ar7
      000592                       2184 00110$:
                                   2185 ;	/opt/contiki/core/dev/slip.c:273: slip_write(buf, 8);
      000592 7B 00            [12] 2186 	mov	r3,#0x00
      000594 7A 40            [12] 2187 	mov	r2,#0x40
      000596 C0 07            [24] 2188 	push	ar7
      000598 C0 06            [24] 2189 	push	ar6
      00059A C0 05            [24] 2190 	push	ar5
      00059C 74 08            [12] 2191 	mov	a,#0x08
      00059E C0 E0            [24] 2192 	push	acc
      0005A0 E4               [12] 2193 	clr	a
      0005A1 C0 E0            [24] 2194 	push	acc
      0005A3 8C 82            [24] 2195 	mov	dpl,r4
      0005A5 8B 83            [24] 2196 	mov	dph,r3
      0005A7 8A F0            [24] 2197 	mov	b,r2
      0005A9 12r00rCC         [24] 2198 	lcall	_slip_write
      0005AC 15 81            [12] 2199 	dec	sp
      0005AE 15 81            [12] 2200 	dec	sp
      0005B0 D0 05            [24] 2201 	pop	ar5
      0005B2 D0 06            [24] 2202 	pop	ar6
      0005B4 D0 07            [24] 2203 	pop	ar7
      0005B6 02r04r4C         [24] 2204 	ljmp	00127$
      0005B9                       2205 00123$:
                                   2206 ;	/opt/contiki/core/dev/slip.c:274: } else if(uip_len > 0
      0005B9 90r00r00         [24] 2207 	mov	dptr,#_uip_len
      0005BC E0               [24] 2208 	movx	a,@dptr
      0005BD FB               [12] 2209 	mov	r3,a
      0005BE A3               [24] 2210 	inc	dptr
      0005BF E0               [24] 2211 	movx	a,@dptr
      0005C0 FC               [12] 2212 	mov	r4,a
      0005C1 90r00r00         [24] 2213 	mov	dptr,#_uip_len
      0005C4 E0               [24] 2214 	movx	a,@dptr
      0005C5 F5 F0            [12] 2215 	mov	b,a
      0005C7 A3               [24] 2216 	inc	dptr
      0005C8 E0               [24] 2217 	movx	a,@dptr
      0005C9 45 F0            [12] 2218 	orl	a,b
      0005CB 70 03            [24] 2219 	jnz	00182$
      0005CD 02r06rD3         [24] 2220 	ljmp	00118$
      0005D0                       2221 00182$:
                                   2222 ;	/opt/contiki/core/dev/slip.c:275: && uip_len == (((uint16_t)(BUF->len[0]) << 8) + BUF->len[1])
      0005D0 C0 05            [24] 2223 	push	ar5
      0005D2 C0 06            [24] 2224 	push	ar6
      0005D4 C0 07            [24] 2225 	push	ar7
      0005D6 90r00r02         [24] 2226 	mov	dptr,#(_uip_aligned_buf + 0x0002)
      0005D9 E0               [24] 2227 	movx	a,@dptr
      0005DA FF               [12] 2228 	mov	r7,a
      0005DB 7A 00            [12] 2229 	mov	r2,#0x00
      0005DD 90r00r03         [24] 2230 	mov	dptr,#(_uip_aligned_buf + 0x0003)
      0005E0 E0               [24] 2231 	movx	a,@dptr
      0005E1 FE               [12] 2232 	mov	r6,a
      0005E2 7D 00            [12] 2233 	mov	r5,#0x00
      0005E4 2A               [12] 2234 	add	a,r2
      0005E5 FA               [12] 2235 	mov	r2,a
      0005E6 ED               [12] 2236 	mov	a,r5
      0005E7 3F               [12] 2237 	addc	a,r7
      0005E8 FF               [12] 2238 	mov	r7,a
      0005E9 EB               [12] 2239 	mov	a,r3
      0005EA B5 02 06         [24] 2240 	cjne	a,ar2,00183$
      0005ED EC               [12] 2241 	mov	a,r4
      0005EE B5 07 02         [24] 2242 	cjne	a,ar7,00183$
      0005F1 80 09            [24] 2243 	sjmp	00184$
      0005F3                       2244 00183$:
      0005F3 D0 07            [24] 2245 	pop	ar7
      0005F5 D0 06            [24] 2246 	pop	ar6
      0005F7 D0 05            [24] 2247 	pop	ar5
      0005F9 02r06rD3         [24] 2248 	ljmp	00118$
      0005FC                       2249 00184$:
      0005FC D0 07            [24] 2250 	pop	ar7
      0005FE D0 06            [24] 2251 	pop	ar6
      000600 D0 05            [24] 2252 	pop	ar5
                                   2253 ;	/opt/contiki/core/dev/slip.c:276: && uip_ipchksum() == 0xffff) {
      000602 C0 07            [24] 2254 	push	ar7
      000604 C0 06            [24] 2255 	push	ar6
      000606 C0 05            [24] 2256 	push	ar5
      000608 12r00r00         [24] 2257 	lcall	_uip_ipchksum
      00060B AB 82            [24] 2258 	mov	r3,dpl
      00060D AC 83            [24] 2259 	mov	r4,dph
      00060F D0 05            [24] 2260 	pop	ar5
      000611 D0 06            [24] 2261 	pop	ar6
      000613 D0 07            [24] 2262 	pop	ar7
      000615 BB FF 05         [24] 2263 	cjne	r3,#0xFF,00185$
      000618 BC FF 02         [24] 2264 	cjne	r4,#0xFF,00185$
      00061B 80 03            [24] 2265 	sjmp	00186$
      00061D                       2266 00185$:
      00061D 02r06rD3         [24] 2267 	ljmp	00118$
      000620                       2268 00186$:
                                   2269 ;	/opt/contiki/core/dev/slip.c:278: if(BUF->ipid[0] == 0 && BUF->ipid[1] == 0 && BUF->ipoffset[0] & IP_DF) {
      000620 90r00r04         [24] 2270 	mov	dptr,#(_uip_aligned_buf + 0x0004)
      000623 E0               [24] 2271 	movx	a,@dptr
      000624 60 03            [24] 2272 	jz	00187$
      000626 02r06rC1         [24] 2273 	ljmp	00114$
      000629                       2274 00187$:
      000629 90r00r05         [24] 2275 	mov	dptr,#(_uip_aligned_buf + 0x0005)
      00062C E0               [24] 2276 	movx	a,@dptr
      00062D 60 03            [24] 2277 	jz	00188$
      00062F 02r06rC1         [24] 2278 	ljmp	00114$
      000632                       2279 00188$:
      000632 90r00r06         [24] 2280 	mov	dptr,#(_uip_aligned_buf + 0x0006)
      000635 E0               [24] 2281 	movx	a,@dptr
      000636 FC               [12] 2282 	mov	r4,a
      000637 20 E6 03         [24] 2283 	jb	acc.6,00189$
      00063A 02r06rC1         [24] 2284 	ljmp	00114$
      00063D                       2285 00189$:
                                   2286 ;	/opt/contiki/core/dev/slip.c:280: uint16_t nid = ip_id++;
      00063D C0 05            [24] 2287 	push	ar5
      00063F C0 06            [24] 2288 	push	ar6
      000641 C0 07            [24] 2289 	push	ar7
      000643 90r00r83         [24] 2290 	mov	dptr,#_process_thread_slip_process_ip_id_6_187
      000646 E0               [24] 2291 	movx	a,@dptr
      000647 FB               [12] 2292 	mov	r3,a
      000648 A3               [24] 2293 	inc	dptr
      000649 E0               [24] 2294 	movx	a,@dptr
      00064A FC               [12] 2295 	mov	r4,a
      00064B 90r00r83         [24] 2296 	mov	dptr,#_process_thread_slip_process_ip_id_6_187
      00064E 74 01            [12] 2297 	mov	a,#0x01
      000650 2B               [12] 2298 	add	a,r3
      000651 F0               [24] 2299 	movx	@dptr,a
      000652 E4               [12] 2300 	clr	a
      000653 3C               [12] 2301 	addc	a,r4
      000654 A3               [24] 2302 	inc	dptr
      000655 F0               [24] 2303 	movx	@dptr,a
                                   2304 ;	/opt/contiki/core/dev/slip.c:281: BUF->ipid[0] = nid >> 8;
      000656 8C 02            [24] 2305 	mov	ar2,r4
      000658 90r00r04         [24] 2306 	mov	dptr,#(_uip_aligned_buf + 0x0004)
      00065B EA               [12] 2307 	mov	a,r2
      00065C F0               [24] 2308 	movx	@dptr,a
                                   2309 ;	/opt/contiki/core/dev/slip.c:282: BUF->ipid[1] = nid;
      00065D 8B 02            [24] 2310 	mov	ar2,r3
      00065F 90r00r05         [24] 2311 	mov	dptr,#(_uip_aligned_buf + 0x0005)
      000662 EA               [12] 2312 	mov	a,r2
      000663 F0               [24] 2313 	movx	@dptr,a
                                   2314 ;	/opt/contiki/core/dev/slip.c:283: nid = uip_htons(nid);
      000664 8B 82            [24] 2315 	mov	dpl,r3
      000666 8C 83            [24] 2316 	mov	dph,r4
      000668 C0 06            [24] 2317 	push	ar6
      00066A C0 05            [24] 2318 	push	ar5
      00066C 12r00r00         [24] 2319 	lcall	_uip_htons
      00066F AA 82            [24] 2320 	mov	r2,dpl
      000671 AF 83            [24] 2321 	mov	r7,dph
      000673 D0 05            [24] 2322 	pop	ar5
      000675 D0 06            [24] 2323 	pop	ar6
      000677 8A 03            [24] 2324 	mov	ar3,r2
      000679 8F 04            [24] 2325 	mov	ar4,r7
                                   2326 ;	/opt/contiki/core/dev/slip.c:284: nid = ~nid;		/* negate */
      00067B EB               [12] 2327 	mov	a,r3
      00067C F4               [12] 2328 	cpl	a
      00067D FB               [12] 2329 	mov	r3,a
      00067E EC               [12] 2330 	mov	a,r4
      00067F F4               [12] 2331 	cpl	a
      000680 FC               [12] 2332 	mov	r4,a
                                   2333 ;	/opt/contiki/core/dev/slip.c:285: BUF->ipchksum += nid;	/* add */
      000681 90r00r0A         [24] 2334 	mov	dptr,#(_uip_aligned_buf + 0x000a)
      000684 E0               [24] 2335 	movx	a,@dptr
      000685 FE               [12] 2336 	mov	r6,a
      000686 A3               [24] 2337 	inc	dptr
      000687 E0               [24] 2338 	movx	a,@dptr
      000688 FF               [12] 2339 	mov	r7,a
      000689 EB               [12] 2340 	mov	a,r3
      00068A 2E               [12] 2341 	add	a,r6
      00068B FE               [12] 2342 	mov	r6,a
      00068C EC               [12] 2343 	mov	a,r4
      00068D 3F               [12] 2344 	addc	a,r7
      00068E FF               [12] 2345 	mov	r7,a
      00068F 90r00r0A         [24] 2346 	mov	dptr,#(_uip_aligned_buf + 0x000a)
      000692 EE               [12] 2347 	mov	a,r6
      000693 F0               [24] 2348 	movx	@dptr,a
      000694 EF               [12] 2349 	mov	a,r7
      000695 A3               [24] 2350 	inc	dptr
      000696 F0               [24] 2351 	movx	@dptr,a
                                   2352 ;	/opt/contiki/core/dev/slip.c:286: if(BUF->ipchksum < nid) { /* 1-complement overflow? */
      000697 90r00r0A         [24] 2353 	mov	dptr,#(_uip_aligned_buf + 0x000a)
      00069A E0               [24] 2354 	movx	a,@dptr
      00069B FE               [12] 2355 	mov	r6,a
      00069C A3               [24] 2356 	inc	dptr
      00069D E0               [24] 2357 	movx	a,@dptr
      00069E FF               [12] 2358 	mov	r7,a
      00069F C3               [12] 2359 	clr	c
      0006A0 EE               [12] 2360 	mov	a,r6
      0006A1 9B               [12] 2361 	subb	a,r3
      0006A2 EF               [12] 2362 	mov	a,r7
      0006A3 9C               [12] 2363 	subb	a,r4
      0006A4 D0 07            [24] 2364 	pop	ar7
      0006A6 D0 06            [24] 2365 	pop	ar6
      0006A8 D0 05            [24] 2366 	pop	ar5
      0006AA 50 15            [24] 2367 	jnc	00114$
                                   2368 ;	/opt/contiki/core/dev/slip.c:287: BUF->ipchksum++;
      0006AC 90r00r0A         [24] 2369 	mov	dptr,#(_uip_aligned_buf + 0x000a)
      0006AF E0               [24] 2370 	movx	a,@dptr
      0006B0 FB               [12] 2371 	mov	r3,a
      0006B1 A3               [24] 2372 	inc	dptr
      0006B2 E0               [24] 2373 	movx	a,@dptr
      0006B3 FC               [12] 2374 	mov	r4,a
      0006B4 0B               [12] 2375 	inc	r3
      0006B5 BB 00 01         [24] 2376 	cjne	r3,#0x00,00191$
      0006B8 0C               [12] 2377 	inc	r4
      0006B9                       2378 00191$:
      0006B9 90r00r0A         [24] 2379 	mov	dptr,#(_uip_aligned_buf + 0x000a)
      0006BC EB               [12] 2380 	mov	a,r3
      0006BD F0               [24] 2381 	movx	@dptr,a
      0006BE EC               [12] 2382 	mov	a,r4
      0006BF A3               [24] 2383 	inc	dptr
      0006C0 F0               [24] 2384 	movx	@dptr,a
      0006C1                       2385 00114$:
                                   2386 ;	/opt/contiki/core/dev/slip.c:293: tcpip_input();
      0006C1 C0 07            [24] 2387 	push	ar7
      0006C3 C0 06            [24] 2388 	push	ar6
      0006C5 C0 05            [24] 2389 	push	ar5
      0006C7 12r00r00         [24] 2390 	lcall	_tcpip_input
      0006CA D0 05            [24] 2391 	pop	ar5
      0006CC D0 06            [24] 2392 	pop	ar6
      0006CE D0 07            [24] 2393 	pop	ar7
      0006D0 02r04r4C         [24] 2394 	ljmp	00127$
      0006D3                       2395 00118$:
                                   2396 ;	/opt/contiki/core/dev/slip.c:296: uip_clear_buf();
      0006D3 90r00r00         [24] 2397 	mov	dptr,#_uip_len
      0006D6 E4               [12] 2398 	clr	a
      0006D7 F0               [24] 2399 	movx	@dptr,a
      0006D8 A3               [24] 2400 	inc	dptr
      0006D9 F0               [24] 2401 	movx	@dptr,a
      0006DA 02r04r4C         [24] 2402 	ljmp	00127$
                                   2403 ;	/opt/contiki/core/dev/slip.c:313: PROCESS_END();
      0006DD                       2404 00129$:
      0006DD 8D 82            [24] 2405 	mov	dpl,r5
      0006DF 8E 83            [24] 2406 	mov	dph,r6
      0006E1 8F F0            [24] 2407 	mov	b,r7
      0006E3 E4               [12] 2408 	clr	a
      0006E4 12r00r00         [24] 2409 	lcall	__gptrput
      0006E7 A3               [24] 2410 	inc	dptr
      0006E8 12r00r00         [24] 2411 	lcall	__gptrput
      0006EB 75 82 03         [24] 2412 	mov	dpl,#0x03
      0006EE                       2413 00130$:
      0006EE E5 81            [12] 2414 	mov	a,sp
      0006F0 24 F8            [12] 2415 	add	a,#0xF8
      0006F2 F5 81            [12] 2416 	mov	sp,a
      0006F4 22               [24] 2417 	ret
                                   2418 ;------------------------------------------------------------
                                   2419 ;Allocation info for local variables in function 'slip_input_byte'
                                   2420 ;------------------------------------------------------------
                                   2421 ;c                         Allocated to registers r7 
                                   2422 ;next                      Allocated to registers r3 r4 
                                   2423 ;sloc0                     Allocated to stack - sp -1
                                   2424 ;------------------------------------------------------------
                                   2425 ;	/opt/contiki/core/dev/slip.c:317: slip_input_byte(unsigned char c)
                                   2426 ;	-----------------------------------------
                                   2427 ;	 function slip_input_byte
                                   2428 ;	-----------------------------------------
      0006F5                       2429 _slip_input_byte:
      0006F5 05 81            [12] 2430 	inc	sp
      0006F7 05 81            [12] 2431 	inc	sp
      0006F9 AF 82            [24] 2432 	mov	r7,dpl
                                   2433 ;	/opt/contiki/core/dev/slip.c:319: switch(state) {
      0006FB 90r00r09         [24] 2434 	mov	dptr,#_state
      0006FE E0               [24] 2435 	movx	a,@dptr
      0006FF FE               [12] 2436 	mov  r6,a
      000700 24 FC            [12] 2437 	add	a,#0xff - 0x03
      000702 50 03            [24] 2438 	jnc	00169$
      000704 02r07rCF         [24] 2439 	ljmp	00123$
      000707                       2440 00169$:
      000707 EE               [12] 2441 	mov	a,r6
      000708 2E               [12] 2442 	add	a,r6
      000709 2E               [12] 2443 	add	a,r6
      00070A 90r07r0E         [24] 2444 	mov	dptr,#00170$
      00070D 73               [24] 2445 	jmp	@a+dptr
      00070E                       2446 00170$:
      00070E 02r07r26         [24] 2447 	ljmp	00104$
      000711 02r07r5F         [24] 2448 	ljmp	00112$
      000714 02r07r2C         [24] 2449 	ljmp	00105$
                                   2450 ;	/opt/contiki/core/dev/slip.c:320: case STATE_RUBBISH:
                                   2451 ;	/opt/contiki/core/dev/slip.c:321: if(c == SLIP_END) {
      000717 BF C0 06         [24] 2452 	cjne	r7,#0xC0,00103$
                                   2453 ;	/opt/contiki/core/dev/slip.c:322: state = STATE_OK;
      00071A 90r00r09         [24] 2454 	mov	dptr,#_state
      00071D 74 01            [12] 2455 	mov	a,#0x01
      00071F F0               [24] 2456 	movx	@dptr,a
      000720                       2457 00103$:
                                   2458 ;	/opt/contiki/core/dev/slip.c:324: return 0;
      000720 90 00 00         [24] 2459 	mov	dptr,#0x0000
      000723 02r08r74         [24] 2460 	ljmp	00131$
                                   2461 ;	/opt/contiki/core/dev/slip.c:326: case STATE_TWOPACKETS:       /* Two packets are already buffered! */
      000726                       2462 00104$:
                                   2463 ;	/opt/contiki/core/dev/slip.c:327: return 0;
      000726 90 00 00         [24] 2464 	mov	dptr,#0x0000
      000729 02r08r74         [24] 2465 	ljmp	00131$
                                   2466 ;	/opt/contiki/core/dev/slip.c:329: case STATE_ESC:
      00072C                       2467 00105$:
                                   2468 ;	/opt/contiki/core/dev/slip.c:330: if(c == SLIP_ESC_END) {
      00072C BF DC 04         [24] 2469 	cjne	r7,#0xDC,00110$
                                   2470 ;	/opt/contiki/core/dev/slip.c:331: c = SLIP_END;
      00072F 7F C0            [12] 2471 	mov	r7,#0xC0
      000731 80 23            [24] 2472 	sjmp	00111$
      000733                       2473 00110$:
                                   2474 ;	/opt/contiki/core/dev/slip.c:332: } else if(c == SLIP_ESC_ESC) {
      000733 BF DD 04         [24] 2475 	cjne	r7,#0xDD,00107$
                                   2476 ;	/opt/contiki/core/dev/slip.c:333: c = SLIP_ESC;
      000736 7F DB            [12] 2477 	mov	r7,#0xDB
      000738 80 1C            [24] 2478 	sjmp	00111$
      00073A                       2479 00107$:
                                   2480 ;	/opt/contiki/core/dev/slip.c:335: state = STATE_RUBBISH;
      00073A 90r00r09         [24] 2481 	mov	dptr,#_state
      00073D 74 03            [12] 2482 	mov	a,#0x03
      00073F F0               [24] 2483 	movx	@dptr,a
                                   2484 ;	/opt/contiki/core/dev/slip.c:337: end = pkt_end;		/* remove rubbish */
      000740 90r00r81         [24] 2485 	mov	dptr,#_pkt_end
      000743 E0               [24] 2486 	movx	a,@dptr
      000744 FD               [12] 2487 	mov	r5,a
      000745 A3               [24] 2488 	inc	dptr
      000746 E0               [24] 2489 	movx	a,@dptr
      000747 FE               [12] 2490 	mov	r6,a
      000748 90r00r03         [24] 2491 	mov	dptr,#_end
      00074B ED               [12] 2492 	mov	a,r5
      00074C F0               [24] 2493 	movx	@dptr,a
      00074D EE               [12] 2494 	mov	a,r6
      00074E A3               [24] 2495 	inc	dptr
      00074F F0               [24] 2496 	movx	@dptr,a
                                   2497 ;	/opt/contiki/core/dev/slip.c:338: return 0;
      000750 90 00 00         [24] 2498 	mov	dptr,#0x0000
      000753 02r08r74         [24] 2499 	ljmp	00131$
      000756                       2500 00111$:
                                   2501 ;	/opt/contiki/core/dev/slip.c:340: state = STATE_OK;
      000756 90r00r09         [24] 2502 	mov	dptr,#_state
      000759 74 01            [12] 2503 	mov	a,#0x01
      00075B F0               [24] 2504 	movx	@dptr,a
                                   2505 ;	/opt/contiki/core/dev/slip.c:341: break;
      00075C 02r07rCF         [24] 2506 	ljmp	00123$
                                   2507 ;	/opt/contiki/core/dev/slip.c:343: case STATE_OK:
      00075F                       2508 00112$:
                                   2509 ;	/opt/contiki/core/dev/slip.c:344: if(c == SLIP_ESC) {
      00075F BF DB 0C         [24] 2510 	cjne	r7,#0xDB,00121$
                                   2511 ;	/opt/contiki/core/dev/slip.c:345: state = STATE_ESC;
      000762 90r00r09         [24] 2512 	mov	dptr,#_state
      000765 74 02            [12] 2513 	mov	a,#0x02
      000767 F0               [24] 2514 	movx	@dptr,a
                                   2515 ;	/opt/contiki/core/dev/slip.c:346: return 0;
      000768 90 00 00         [24] 2516 	mov	dptr,#0x0000
      00076B 02r08r74         [24] 2517 	ljmp	00131$
      00076E                       2518 00121$:
                                   2519 ;	/opt/contiki/core/dev/slip.c:347: } else if(c == SLIP_END) {
      00076E BF C0 5E         [24] 2520 	cjne	r7,#0xC0,00123$
                                   2521 ;	/opt/contiki/core/dev/slip.c:353: if(end != pkt_end) {	/* Non zero length. */
      000771 90r00r03         [24] 2522 	mov	dptr,#_end
      000774 E0               [24] 2523 	movx	a,@dptr
      000775 FD               [12] 2524 	mov	r5,a
      000776 A3               [24] 2525 	inc	dptr
      000777 E0               [24] 2526 	movx	a,@dptr
      000778 FE               [12] 2527 	mov	r6,a
      000779 90r00r81         [24] 2528 	mov	dptr,#_pkt_end
      00077C E0               [24] 2529 	movx	a,@dptr
      00077D FB               [12] 2530 	mov	r3,a
      00077E A3               [24] 2531 	inc	dptr
      00077F E0               [24] 2532 	movx	a,@dptr
      000780 FC               [12] 2533 	mov	r4,a
      000781 ED               [12] 2534 	mov	a,r5
      000782 B5 03 06         [24] 2535 	cjne	a,ar3,00181$
      000785 EE               [12] 2536 	mov	a,r6
      000786 B5 04 02         [24] 2537 	cjne	a,ar4,00181$
      000789 80 3E            [24] 2538 	sjmp	00117$
      00078B                       2539 00181$:
                                   2540 ;	/opt/contiki/core/dev/slip.c:354: if(begin == pkt_end) {	/* None buffered. */
      00078B C0 05            [24] 2541 	push	ar5
      00078D C0 06            [24] 2542 	push	ar6
      00078F 90r00r01         [24] 2543 	mov	dptr,#_begin
      000792 E0               [24] 2544 	movx	a,@dptr
      000793 FA               [12] 2545 	mov	r2,a
      000794 A3               [24] 2546 	inc	dptr
      000795 E0               [24] 2547 	movx	a,@dptr
      000796 FE               [12] 2548 	mov	r6,a
      000797 EA               [12] 2549 	mov	a,r2
      000798 B5 03 06         [24] 2550 	cjne	a,ar3,00182$
      00079B EE               [12] 2551 	mov	a,r6
      00079C B5 04 02         [24] 2552 	cjne	a,ar4,00182$
      00079F 80 06            [24] 2553 	sjmp	00183$
      0007A1                       2554 00182$:
      0007A1 D0 06            [24] 2555 	pop	ar6
      0007A3 D0 05            [24] 2556 	pop	ar5
      0007A5 80 0E            [24] 2557 	sjmp	00114$
      0007A7                       2558 00183$:
      0007A7 D0 06            [24] 2559 	pop	ar6
      0007A9 D0 05            [24] 2560 	pop	ar5
                                   2561 ;	/opt/contiki/core/dev/slip.c:355: pkt_end = end;
      0007AB 90r00r81         [24] 2562 	mov	dptr,#_pkt_end
      0007AE ED               [12] 2563 	mov	a,r5
      0007AF F0               [24] 2564 	movx	@dptr,a
      0007B0 EE               [12] 2565 	mov	a,r6
      0007B1 A3               [24] 2566 	inc	dptr
      0007B2 F0               [24] 2567 	movx	@dptr,a
      0007B3 80 05            [24] 2568 	sjmp	00115$
      0007B5                       2569 00114$:
                                   2570 ;	/opt/contiki/core/dev/slip.c:357: state = STATE_TWOPACKETS;
      0007B5 90r00r09         [24] 2571 	mov	dptr,#_state
      0007B8 E4               [12] 2572 	clr	a
      0007B9 F0               [24] 2573 	movx	@dptr,a
      0007BA                       2574 00115$:
                                   2575 ;	/opt/contiki/core/dev/slip.c:360: process_poll(&slip_process);
      0007BA 90r00r00         [24] 2576 	mov	dptr,#_slip_process
      0007BD 75 F0 00         [24] 2577 	mov	b,#0x00
      0007C0 12r00r00         [24] 2578 	lcall	_process_poll
                                   2579 ;	/opt/contiki/core/dev/slip.c:361: return 1;
      0007C3 90 00 01         [24] 2580 	mov	dptr,#0x0001
      0007C6 02r08r74         [24] 2581 	ljmp	00131$
      0007C9                       2582 00117$:
                                   2583 ;	/opt/contiki/core/dev/slip.c:363: return 0;
      0007C9 90 00 00         [24] 2584 	mov	dptr,#0x0000
      0007CC 02r08r74         [24] 2585 	ljmp	00131$
                                   2586 ;	/opt/contiki/core/dev/slip.c:366: }
      0007CF                       2587 00123$:
                                   2588 ;	/opt/contiki/core/dev/slip.c:371: next = end + 1;
      0007CF 90r00r03         [24] 2589 	mov	dptr,#_end
      0007D2 E0               [24] 2590 	movx	a,@dptr
      0007D3 FD               [12] 2591 	mov	r5,a
      0007D4 A3               [24] 2592 	inc	dptr
      0007D5 E0               [24] 2593 	movx	a,@dptr
      0007D6 FE               [12] 2594 	mov	r6,a
      0007D7 74 01            [12] 2595 	mov	a,#0x01
      0007D9 2D               [12] 2596 	add	a,r5
      0007DA FB               [12] 2597 	mov	r3,a
      0007DB E4               [12] 2598 	clr	a
      0007DC 3E               [12] 2599 	addc	a,r6
      0007DD FC               [12] 2600 	mov	r4,a
                                   2601 ;	/opt/contiki/core/dev/slip.c:372: if(next == RX_BUFSIZE) {
      0007DE BB 7C 07         [24] 2602 	cjne	r3,#0x7C,00125$
      0007E1 BC 00 04         [24] 2603 	cjne	r4,#0x00,00125$
                                   2604 ;	/opt/contiki/core/dev/slip.c:373: next = 0;
      0007E4 7B 00            [12] 2605 	mov	r3,#0x00
      0007E6 7C 00            [12] 2606 	mov	r4,#0x00
      0007E8                       2607 00125$:
                                   2608 ;	/opt/contiki/core/dev/slip.c:375: if(next == begin) {		/* rxbuf is full */
      0007E8 C0 05            [24] 2609 	push	ar5
      0007EA C0 06            [24] 2610 	push	ar6
      0007EC 90r00r01         [24] 2611 	mov	dptr,#_begin
      0007EF E0               [24] 2612 	movx	a,@dptr
      0007F0 FA               [12] 2613 	mov	r2,a
      0007F1 A3               [24] 2614 	inc	dptr
      0007F2 E0               [24] 2615 	movx	a,@dptr
      0007F3 FE               [12] 2616 	mov	r6,a
      0007F4 EB               [12] 2617 	mov	a,r3
      0007F5 B5 02 06         [24] 2618 	cjne	a,ar2,00186$
      0007F8 EC               [12] 2619 	mov	a,r4
      0007F9 B5 06 02         [24] 2620 	cjne	a,ar6,00186$
      0007FC 80 06            [24] 2621 	sjmp	00187$
      0007FE                       2622 00186$:
      0007FE D0 06            [24] 2623 	pop	ar6
      000800 D0 05            [24] 2624 	pop	ar5
      000802 80 27            [24] 2625 	sjmp	00127$
      000804                       2626 00187$:
      000804 D0 06            [24] 2627 	pop	ar6
      000806 D0 05            [24] 2628 	pop	ar5
                                   2629 ;	/opt/contiki/core/dev/slip.c:376: state = STATE_RUBBISH;
      000808 90r00r09         [24] 2630 	mov	dptr,#_state
      00080B 74 03            [12] 2631 	mov	a,#0x03
      00080D F0               [24] 2632 	movx	@dptr,a
                                   2633 ;	/opt/contiki/core/dev/slip.c:378: end = pkt_end;		/* remove rubbish */
      00080E 90r00r81         [24] 2634 	mov	dptr,#_pkt_end
      000811 A8 81            [24] 2635 	mov	r0,sp
      000813 18               [12] 2636 	dec	r0
      000814 E0               [24] 2637 	movx	a,@dptr
      000815 F6               [12] 2638 	mov	@r0,a
      000816 A3               [24] 2639 	inc	dptr
      000817 E0               [24] 2640 	movx	a,@dptr
      000818 08               [12] 2641 	inc	r0
      000819 F6               [12] 2642 	mov	@r0,a
      00081A A8 81            [24] 2643 	mov	r0,sp
      00081C 18               [12] 2644 	dec	r0
      00081D 90r00r03         [24] 2645 	mov	dptr,#_end
      000820 E6               [12] 2646 	mov	a,@r0
      000821 F0               [24] 2647 	movx	@dptr,a
      000822 08               [12] 2648 	inc	r0
      000823 E6               [12] 2649 	mov	a,@r0
      000824 A3               [24] 2650 	inc	dptr
      000825 F0               [24] 2651 	movx	@dptr,a
                                   2652 ;	/opt/contiki/core/dev/slip.c:379: return 0;
      000826 90 00 00         [24] 2653 	mov	dptr,#0x0000
      000829 80 49            [24] 2654 	sjmp	00131$
      00082B                       2655 00127$:
                                   2656 ;	/opt/contiki/core/dev/slip.c:381: rxbuf[end] = c;
      00082B ED               [12] 2657 	mov	a,r5
      00082C 24r05            [12] 2658 	add	a,#_rxbuf
      00082E F5 82            [12] 2659 	mov	dpl,a
      000830 EE               [12] 2660 	mov	a,r6
      000831 34s00            [12] 2661 	addc	a,#(_rxbuf >> 8)
      000833 F5 83            [12] 2662 	mov	dph,a
      000835 EF               [12] 2663 	mov	a,r7
      000836 F0               [24] 2664 	movx	@dptr,a
                                   2665 ;	/opt/contiki/core/dev/slip.c:382: end = next;
      000837 90r00r03         [24] 2666 	mov	dptr,#_end
      00083A EB               [12] 2667 	mov	a,r3
      00083B F0               [24] 2668 	movx	@dptr,a
      00083C EC               [12] 2669 	mov	a,r4
      00083D A3               [24] 2670 	inc	dptr
      00083E F0               [24] 2671 	movx	@dptr,a
                                   2672 ;	/opt/contiki/core/dev/slip.c:386: if(c == 'T' && rxbuf[begin] == 'C') {
      00083F 7E 00            [12] 2673 	mov	r6,#0x00
      000841 BF 54 2D         [24] 2674 	cjne	r7,#0x54,00129$
      000844 BE 00 2A         [24] 2675 	cjne	r6,#0x00,00129$
      000847 90r00r01         [24] 2676 	mov	dptr,#_begin
      00084A E0               [24] 2677 	movx	a,@dptr
      00084B FE               [12] 2678 	mov	r6,a
      00084C A3               [24] 2679 	inc	dptr
      00084D E0               [24] 2680 	movx	a,@dptr
      00084E FF               [12] 2681 	mov	r7,a
      00084F EE               [12] 2682 	mov	a,r6
      000850 24r05            [12] 2683 	add	a,#_rxbuf
      000852 F5 82            [12] 2684 	mov	dpl,a
      000854 EF               [12] 2685 	mov	a,r7
      000855 34s00            [12] 2686 	addc	a,#(_rxbuf >> 8)
      000857 F5 83            [12] 2687 	mov	dph,a
      000859 E0               [24] 2688 	movx	a,@dptr
      00085A FF               [12] 2689 	mov	r7,a
      00085B 7E 00            [12] 2690 	mov	r6,#0x00
      00085D BF 43 11         [24] 2691 	cjne	r7,#0x43,00129$
      000860 BE 00 0E         [24] 2692 	cjne	r6,#0x00,00129$
                                   2693 ;	/opt/contiki/core/dev/slip.c:387: process_poll(&slip_process);
      000863 90r00r00         [24] 2694 	mov	dptr,#_slip_process
      000866 75 F0 00         [24] 2695 	mov	b,#0x00
      000869 12r00r00         [24] 2696 	lcall	_process_poll
                                   2697 ;	/opt/contiki/core/dev/slip.c:388: return 1;
      00086C 90 00 01         [24] 2698 	mov	dptr,#0x0001
      00086F 80 03            [24] 2699 	sjmp	00131$
      000871                       2700 00129$:
                                   2701 ;	/opt/contiki/core/dev/slip.c:391: return 0;
      000871 90 00 00         [24] 2702 	mov	dptr,#0x0000
      000874                       2703 00131$:
      000874 15 81            [12] 2704 	dec	sp
      000876 15 81            [12] 2705 	dec	sp
      000878 22               [24] 2706 	ret
                                   2707 	.area CSEG    (CODE)
                                   2708 	.area CONST   (CODE)
      000000                       2709 ___str_0:
      000000 43 4C 49 45 4E 54     2710 	.ascii "CLIENT"
      000006 00                    2711 	.db 0x00
      000007                       2712 ___str_1:
      000007 43 4C 49 45 4E 54 53  2713 	.ascii "CLIENTSERVER"
             45 52 56 45 52
      000013 C0                    2714 	.db 0xC0
      000014 00                    2715 	.db 0x00
      000015                       2716 ___str_2:
      000015 3F 49 50 41           2717 	.ascii "?IPA"
      000019 00                    2718 	.db 0x00
      00001A                       2719 ___str_3:
      00001A 3D 49 50 41           2720 	.ascii "=IPA"
      00001E 00                    2721 	.db 0x00
                                   2722 	.area XINIT   (CODE)
      000000                       2723 __xinit__slip_process:
                                   2724 ; generic printIvalPtr
      000000 00 00 00              2725 	.byte #0x00,#0x00,#0x00
      000003r13s04                 2726 	.byte _process_thread_slip_process, (_process_thread_slip_process >> 8)
      000005 00 00                 2727 	.byte #0x00, #0x00
      000007 00                    2728 	.db #0x00	; 0
      000008 00                    2729 	.db #0x00	; 0
      000009                       2730 __xinit__state:
      000009 00                    2731 	.db #0x00	; 0
      00000A                       2732 __xinit__input_callback:
      00000A 00 00                 2733 	.byte #0x00,#0x00
                                   2734 	.area CABS    (ABS,CODE)
